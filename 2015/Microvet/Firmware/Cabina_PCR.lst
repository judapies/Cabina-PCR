CCS PCH C Compiler, Version 4.104, 5967               31-oct.-15 09:56

               Filename: H:\JP\JP\Laboratorio\Cabina de PCR\Firmware\Cabina_PCR.lst

               ROM used: 12800 bytes (39%)
                         Largest free fragment is 19964
               RAM used: 163 (8%) at main() level
                         200 (10%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1804
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de Flujo Laminar Vertical. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Permite cambiar la velocidad del motor digitalmente. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
05CE:  CLRF   FEA
05D0:  MOVLW  B6
05D2:  MOVWF  FE9
05D4:  MOVF   FEF,W
05D6:  BZ    05F4
05D8:  MOVLW  0F
05DA:  MOVWF  01
05DC:  CLRF   00
05DE:  DECFSZ 00,F
05E0:  BRA    05DE
05E2:  DECFSZ 01,F
05E4:  BRA    05DC
05E6:  MOVLW  8F
05E8:  MOVWF  00
05EA:  DECFSZ 00,F
05EC:  BRA    05EA
05EE:  NOP   
05F0:  DECFSZ FEF,F
05F2:  BRA    05D8
05F4:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_cycles(30); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_us(30); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
05F6:  SWAPF  xB7,W
05F8:  ANDLW  F0
05FA:  MOVWF  00
05FC:  MOVLW  0F
05FE:  ANDWF  F81,W
0600:  IORWF  00,W
0602:  MOVWF  F81
....................       delay_cycles(30); 
0604:  MOVLW  09
0606:  MOVWF  00
0608:  DECFSZ 00,F
060A:  BRA    0608
060C:  BRA    060E
....................       lcd.enable = 1; 
060E:  BSF    F81.3
....................       delay_us(55); 
0610:  MOVLW  DB
0612:  MOVWF  00
0614:  DECFSZ 00,F
0616:  BRA    0614
0618:  BRA    061A
....................       lcd.enable = 0; 
061A:  BCF    F81.3
.................... } 
061C:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
061E:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
0620:  MOVLW  01
0622:  MOVWF  xB6
0624:  RCALL  05CE
....................       lcd.rs = address; 
0626:  BTFSS  xB4.0
0628:  BCF    F81.1
062A:  BTFSC  xB4.0
062C:  BSF    F81.1
....................       delay_cycles(30); 
062E:  MOVLW  09
0630:  MOVWF  00
0632:  DECFSZ 00,F
0634:  BRA    0632
0636:  BRA    0638
....................       lcd.rw = 0; 
0638:  BCF    F81.2
....................       delay_cycles(30); 
063A:  MOVLW  09
063C:  MOVWF  00
063E:  DECFSZ 00,F
0640:  BRA    063E
0642:  BRA    0644
....................       lcd.enable = 0; 
0644:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
0646:  SWAPF  xB5,W
0648:  MOVWF  xB6
064A:  MOVLW  0F
064C:  ANDWF  xB6,F
064E:  MOVFF  B6,B7
0652:  RCALL  05F6
....................       lcd_send_nibble(n & 0xf); 
0654:  MOVF   xB5,W
0656:  ANDLW  0F
0658:  MOVWF  xB6
065A:  MOVWF  xB7
065C:  RCALL  05F6
.................... } 
065E:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
0660:  MOVLW  00
0662:  MOVWF  F93
....................     lcd.rs = 0; 
0664:  BCF    F81.1
....................     lcd.rw = 0; 
0666:  BCF    F81.2
....................     lcd.enable = 0; 
0668:  BCF    F81.3
....................     delay_ms(15); 
066A:  MOVLW  0F
066C:  MOVWF  xB6
066E:  RCALL  05CE
....................     for(i=1;i<=3;++i) { 
0670:  MOVLW  01
0672:  MOVWF  x9F
0674:  MOVF   x9F,W
0676:  SUBLW  03
0678:  BNC   068A
....................        lcd_send_nibble(3); 
067A:  MOVLW  03
067C:  MOVWF  xB7
067E:  RCALL  05F6
....................        delay_ms(5); 
0680:  MOVLW  05
0682:  MOVWF  xB6
0684:  RCALL  05CE
....................     } 
0686:  INCF   x9F,F
0688:  BRA    0674
....................     lcd_send_nibble(2); 
068A:  MOVLW  02
068C:  MOVWF  xB7
068E:  RCALL  05F6
....................     for(i=0;i<=3;++i) 
0690:  CLRF   x9F
0692:  MOVF   x9F,W
0694:  SUBLW  03
0696:  BNC   06B4
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0698:  CLRF   03
069A:  MOVF   x9F,W
069C:  MOVFF  FF2,A0
06A0:  BCF    FF2.7
06A2:  RCALL  0096
06A4:  BTFSC  xA0.7
06A6:  BSF    FF2.7
06A8:  MOVWF  xA0
06AA:  CLRF   xB4
06AC:  MOVWF  xB5
06AE:  RCALL  061E
06B0:  INCF   x9F,F
06B2:  BRA    0692
.................... } 
06B4:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
073E:  MOVLW  01
0740:  SUBWF  xB2,W
0742:  ADDLW  FC
0744:  BC    0764
0746:  ADDLW  04
0748:  GOTO   0774
....................      case 1 : address=0x80;break; 
074C:  MOVLW  80
074E:  MOVWF  xB3
0750:  BRA    0764
....................      case 2 : address=0xc0;break; 
0752:  MOVLW  C0
0754:  MOVWF  xB3
0756:  BRA    0764
....................      case 3 : address=0x94;break; 
0758:  MOVLW  94
075A:  MOVWF  xB3
075C:  BRA    0764
....................      case 4 : address=0xd4;break; 
075E:  MOVLW  D4
0760:  MOVWF  xB3
0762:  BRA    0764
....................    } 
....................    address+=x-1; 
0764:  MOVLW  01
0766:  SUBWF  xB1,W
0768:  ADDWF  xB3,F
....................    lcd_send_byte(0,address); 
076A:  CLRF   xB4
076C:  MOVFF  B3,B5
0770:  RCALL  061E
.................... } 
0772:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
07A0:  MOVF   xB0,W
07A2:  SUBLW  F1
07A4:  BNZ   07AA
....................    { 
....................       c=238; 
07A6:  MOVLW  EE
07A8:  MOVWF  xB0
....................    } 
....................    if(c=='Ñ') 
07AA:  MOVF   xB0,W
07AC:  SUBLW  D1
07AE:  BNZ   07B4
....................    { 
....................       c=255; 
07B0:  MOVLW  FF
07B2:  MOVWF  xB0
....................    } 
....................     
....................    switch (c) { 
07B4:  MOVF   xB0,W
07B6:  XORLW  0C
07B8:  BZ    07C4
07BA:  XORLW  06
07BC:  BZ    07D8
07BE:  XORLW  02
07C0:  BZ    07E6
07C2:  BRA    07F0
....................      case '\f'   : lcd_send_byte(0,1); 
07C4:  CLRF   xB4
07C6:  MOVLW  01
07C8:  MOVWF  xB5
07CA:  RCALL  061E
....................                    lcdline=1; 
07CC:  MOVLW  01
07CE:  MOVWF  16
....................                    delay_ms(2); 
07D0:  MOVLW  02
07D2:  MOVWF  xB6
07D4:  RCALL  05CE
....................                                            break; 
07D6:  BRA    07FC
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
07D8:  INCF   16,F
07DA:  MOVLW  01
07DC:  MOVWF  xB1
07DE:  MOVFF  16,B2
07E2:  RCALL  073E
07E4:  BRA    07FC
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
07E6:  CLRF   xB4
07E8:  MOVLW  10
07EA:  MOVWF  xB5
07EC:  RCALL  061E
07EE:  BRA    07FC
....................      default     : lcd_send_byte(1,c);     break; 
07F0:  MOVLW  01
07F2:  MOVWF  xB4
07F4:  MOVFF  B0,B5
07F8:  RCALL  061E
07FA:  BRA    07FC
....................    } 
.................... } 
07FC:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
14BA:  BCF    xB2.0
....................    y = x; 
14BC:  MOVFF  A6,AB
14C0:  MOVFF  A5,AA
14C4:  MOVFF  A4,A9
14C8:  MOVFF  A3,A8
....................  
....................    if (x < 0) 
14CC:  MOVFF  A6,B6
14D0:  MOVFF  A5,B5
14D4:  MOVFF  A4,B4
14D8:  MOVFF  A3,B3
14DC:  CLRF   xBA
14DE:  CLRF   xB9
14E0:  CLRF   xB8
14E2:  CLRF   xB7
14E4:  RCALL  0FD0
14E6:  BNC   14F0
....................    { 
....................       s = 1; 
14E8:  BSF    xB2.0
....................       y = -y; 
14EA:  MOVF   xA9,W
14EC:  XORLW  80
14EE:  MOVWF  xA9
....................    } 
....................  
....................    if (y <= 32768.0) 
14F0:  MOVFF  AB,B6
14F4:  MOVFF  AA,B5
14F8:  MOVFF  A9,B4
14FC:  MOVFF  A8,B3
1500:  CLRF   xBA
1502:  CLRF   xB9
1504:  CLRF   xB8
1506:  MOVLW  8E
1508:  MOVWF  xB7
150A:  RCALL  0FD0
150C:  BC    1510
150E:  BNZ   1540
....................   res = (float32)(unsigned int16)y; 
1510:  MOVFF  AB,B6
1514:  MOVFF  AA,B5
1518:  MOVFF  A9,B4
151C:  MOVFF  A8,B3
1520:  RCALL  1482
1522:  MOVFF  02,B8
1526:  MOVFF  01,B7
152A:  CALL   06B6
152E:  MOVFF  03,AF
1532:  MOVFF  02,AE
1536:  MOVFF  01,AD
153A:  MOVFF  00,AC
....................  
....................  else if (y < 10000000.0) 
153E:  BRA    16CC
1540:  MOVFF  AB,B6
1544:  MOVFF  AA,B5
1548:  MOVFF  A9,B4
154C:  MOVFF  A8,B3
1550:  MOVLW  80
1552:  MOVWF  xBA
1554:  MOVLW  96
1556:  MOVWF  xB9
1558:  MOVLW  18
155A:  MOVWF  xB8
155C:  MOVLW  96
155E:  MOVWF  xB7
1560:  RCALL  0FD0
1562:  BTFSS  FD8.0
1564:  BRA    16BC
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1566:  MOVFF  AB,B6
156A:  MOVFF  AA,B5
156E:  MOVFF  A9,B4
1572:  MOVFF  A8,B3
1576:  CLRF   xBA
1578:  CLRF   xB9
157A:  CLRF   xB8
157C:  MOVLW  8E
157E:  MOVWF  xB7
1580:  CALL   0C0C
1584:  MOVFF  03,B6
1588:  MOVFF  02,B5
158C:  MOVFF  01,B4
1590:  MOVFF  00,B3
1594:  RCALL  1482
1596:  MOVFF  02,B1
159A:  MOVFF  01,B0
....................       y = 32768.0*(y/32768.0 - (float32)l); 
159E:  MOVFF  AB,B6
15A2:  MOVFF  AA,B5
15A6:  MOVFF  A9,B4
15AA:  MOVFF  A8,B3
15AE:  CLRF   xBA
15B0:  CLRF   xB9
15B2:  CLRF   xB8
15B4:  MOVLW  8E
15B6:  MOVWF  xB7
15B8:  CALL   0C0C
15BC:  MOVFF  00,B3
15C0:  MOVFF  01,B4
15C4:  MOVFF  02,B5
15C8:  MOVFF  03,B6
15CC:  MOVFF  B1,B8
15D0:  MOVFF  B0,B7
15D4:  CALL   06B6
15D8:  BSF    FD8.1
15DA:  MOVFF  B6,BA
15DE:  MOVFF  B5,B9
15E2:  MOVFF  B4,B8
15E6:  MOVFF  B3,B7
15EA:  MOVFF  03,BE
15EE:  MOVFF  02,BD
15F2:  MOVFF  01,BC
15F6:  MOVFF  00,BB
15FA:  CALL   0D66
15FE:  CLRF   xB6
1600:  CLRF   xB5
1602:  CLRF   xB4
1604:  MOVLW  8E
1606:  MOVWF  xB3
1608:  MOVFF  03,BA
160C:  MOVFF  02,B9
1610:  MOVFF  01,B8
1614:  MOVFF  00,B7
1618:  CALL   0B1A
161C:  MOVFF  03,AB
1620:  MOVFF  02,AA
1624:  MOVFF  01,A9
1628:  MOVFF  00,A8
....................   res = 32768.0*(float32)l; 
162C:  MOVFF  B1,B8
1630:  MOVFF  B0,B7
1634:  CALL   06B6
1638:  CLRF   xB6
163A:  CLRF   xB5
163C:  CLRF   xB4
163E:  MOVLW  8E
1640:  MOVWF  xB3
1642:  MOVFF  03,BA
1646:  MOVFF  02,B9
164A:  MOVFF  01,B8
164E:  MOVFF  00,B7
1652:  CALL   0B1A
1656:  MOVFF  03,AF
165A:  MOVFF  02,AE
165E:  MOVFF  01,AD
1662:  MOVFF  00,AC
....................   res += (float32)(unsigned int16)y; 
1666:  MOVFF  AB,B6
166A:  MOVFF  AA,B5
166E:  MOVFF  A9,B4
1672:  MOVFF  A8,B3
1676:  RCALL  1482
1678:  MOVFF  02,B8
167C:  MOVFF  01,B7
1680:  CALL   06B6
1684:  BCF    FD8.1
1686:  MOVFF  AF,BA
168A:  MOVFF  AE,B9
168E:  MOVFF  AD,B8
1692:  MOVFF  AC,B7
1696:  MOVFF  03,BE
169A:  MOVFF  02,BD
169E:  MOVFF  01,BC
16A2:  MOVFF  00,BB
16A6:  CALL   0D66
16AA:  MOVFF  03,AF
16AE:  MOVFF  02,AE
16B2:  MOVFF  01,AD
16B6:  MOVFF  00,AC
....................  } 
....................  
....................  else 
16BA:  BRA    16CC
....................   res = y; 
16BC:  MOVFF  AB,AF
16C0:  MOVFF  AA,AE
16C4:  MOVFF  A9,AD
16C8:  MOVFF  A8,AC
....................  
....................  y = y - (float32)(unsigned int16)y; 
16CC:  MOVFF  AB,B6
16D0:  MOVFF  AA,B5
16D4:  MOVFF  A9,B4
16D8:  MOVFF  A8,B3
16DC:  RCALL  1482
16DE:  MOVFF  02,B8
16E2:  MOVFF  01,B7
16E6:  CALL   06B6
16EA:  BSF    FD8.1
16EC:  MOVFF  AB,BA
16F0:  MOVFF  AA,B9
16F4:  MOVFF  A9,B8
16F8:  MOVFF  A8,B7
16FC:  MOVFF  03,BE
1700:  MOVFF  02,BD
1704:  MOVFF  01,BC
1708:  MOVFF  00,BB
170C:  CALL   0D66
1710:  MOVFF  03,AB
1714:  MOVFF  02,AA
1718:  MOVFF  01,A9
171C:  MOVFF  00,A8
....................  
....................  if (s) 
1720:  BTFSS  xB2.0
1722:  BRA    172A
....................   res = -res; 
1724:  MOVF   xAD,W
1726:  XORLW  80
1728:  MOVWF  xAD
....................  
....................  if (y != 0) 
172A:  MOVFF  AB,B6
172E:  MOVFF  AA,B5
1732:  MOVFF  A9,B4
1736:  MOVFF  A8,B3
173A:  CLRF   xBA
173C:  CLRF   xB9
173E:  CLRF   xB8
1740:  CLRF   xB7
1742:  RCALL  0FD0
1744:  BZ    17B6
....................  { 
....................   if (s == 1 && n == 0) 
1746:  BTFSS  xB2.0
1748:  BRA    177E
174A:  MOVF   xA7,F
174C:  BNZ   177E
....................    res -= 1.0; 
174E:  BSF    FD8.1
1750:  MOVFF  AF,BA
1754:  MOVFF  AE,B9
1758:  MOVFF  AD,B8
175C:  MOVFF  AC,B7
1760:  CLRF   xBE
1762:  CLRF   xBD
1764:  CLRF   xBC
1766:  MOVLW  7F
1768:  MOVWF  xBB
176A:  CALL   0D66
176E:  MOVFF  03,AF
1772:  MOVFF  02,AE
1776:  MOVFF  01,AD
177A:  MOVFF  00,AC
....................  
....................   if (s == 0 && n == 1) 
177E:  BTFSC  xB2.0
1780:  BRA    17B6
1782:  DECFSZ xA7,W
1784:  BRA    17B6
....................    res += 1.0; 
1786:  BCF    FD8.1
1788:  MOVFF  AF,BA
178C:  MOVFF  AE,B9
1790:  MOVFF  AD,B8
1794:  MOVFF  AC,B7
1798:  CLRF   xBE
179A:  CLRF   xBD
179C:  CLRF   xBC
179E:  MOVLW  7F
17A0:  MOVWF  xBB
17A2:  CALL   0D66
17A6:  MOVFF  03,AF
17AA:  MOVFF  02,AE
17AE:  MOVFF  01,AD
17B2:  MOVFF  00,AC
....................  } 
....................  if (x == 0) 
17B6:  MOVFF  A6,B6
17BA:  MOVFF  A5,B5
17BE:  MOVFF  A4,B4
17C2:  MOVFF  A3,B3
17C6:  CLRF   xBA
17C8:  CLRF   xB9
17CA:  CLRF   xB8
17CC:  CLRF   xB7
17CE:  RCALL  0FD0
17D0:  BNZ   17DA
....................     res = 0; 
17D2:  CLRF   xAF
17D4:  CLRF   xAE
17D6:  CLRF   xAD
17D8:  CLRF   xAC
....................  
....................  return (res); 
17DA:  MOVFF  AC,00
17DE:  MOVFF  AD,01
17E2:  MOVFF  AE,02
17E6:  MOVFF  AF,03
.................... } 
17EA:  GOTO   1802 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
17EE:  MOVFF  A2,A6
17F2:  MOVFF  A1,A5
17F6:  MOVFF  A0,A4
17FA:  MOVFF  9F,A3
17FE:  CLRF   xA7
1800:  BRA    14BA
.................... } 
1802:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_D0,1) 
.................... #define   Luz_UV_off        output_bit(PIN_D0,0) 
.................... #define   Luz_Blanca_on     output_bit(PIN_D1,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D1,0) 
.................... #define   Motor_L1_on       output_bit(PIN_D3,1) 
.................... #define   Motor_L1_off      output_bit(PIN_D3,0) 
.................... #define   Motor_L2_on       output_bit(PIN_D2,1) 
.................... #define   Motor_L2_off      output_bit(PIN_D2,0) 
.................... #define   Motor_L3_on       output_bit(PIN_D4,1) 
.................... #define   Motor_L3_off      output_bit(PIN_D4,0) 
.................... #define   Motor_L4_on       output_bit(PIN_D5,1) 
.................... #define   Motor_L4_off      output_bit(PIN_D5,0) 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,flagmv=0; 
.................... int8 Menu=0, n_opcionH=5,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0,Velocidad=1; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
....................  
.................... int16 tiempos,horas=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   3B,F
00BE:  BTFSC  FD8.2
00C0:  INCF   3C,F
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   3C,F
00C4:  BNZ   00CC
00C6:  MOVF   3B,W
00C8:  SUBLW  C7
00CA:  BC    0104
....................    {tiempos=0;tiemporeset++;segundos++;Lectura=1; 
00CC:  CLRF   3C
00CE:  CLRF   3B
00D0:  INCF   2C,F
00D2:  INCF   22,F
00D4:  BSF    18.0
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadouv==1) 
00D6:  BTFSS  17.0
00D8:  BRA    0104
....................    { 
....................       if(tiempo_cumplido==0) 
00DA:  BTFSC  17.7
00DC:  BRA    0104
....................       { 
....................          if(tempo_segundos>0) 
00DE:  MOVF   25,F
00E0:  BZ    00E6
....................          { 
....................             tempo_segundos--; 
00E2:  DECF   25,F
....................          } 
....................          else 
00E4:  BRA    0104
....................          { 
....................             if(tempo_minutos>0) 
00E6:  MOVF   24,F
00E8:  BZ    00F2
....................             { 
....................                tempo_minutos--; 
00EA:  DECF   24,F
....................                tempo_segundos=59; 
00EC:  MOVLW  3B
00EE:  MOVWF  25
....................             } 
....................             else 
00F0:  BRA    0104
....................             { 
....................                //tiempo_cumplido=1; 
....................                estadouv=0;Luz_UV_off;guardaruv=1; 
00F2:  BCF    17.0
00F4:  BCF    F8C.0
00F6:  BCF    F95.0
00F8:  MOVLW  01
00FA:  MOVWF  2D
....................                tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
00FC:  MOVFF  26,24
0100:  MOVFF  27,25
....................             } 
....................          } 
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
....................  
0104:  BCF    F9E.0
0106:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
092C:  DECFSZ xA0,W
092E:  BRA    0944
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
0930:  MOVLW  02
0932:  MOVWF  xB1
0934:  MOVFF  A1,B2
0938:  RCALL  073E
093A:  MOVLW  0A
093C:  MOVWF  FF6
093E:  MOVLW  01
0940:  MOVWF  FF7
0942:  RCALL  07FE
....................    if(x==2) 
0944:  MOVF   xA0,W
0946:  SUBLW  02
0948:  BNZ   095E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad Motor    ");} 
094A:  MOVLW  02
094C:  MOVWF  xB1
094E:  MOVFF  A1,B2
0952:  RCALL  073E
0954:  MOVLW  1E
0956:  MOVWF  FF6
0958:  MOVLW  01
095A:  MOVWF  FF7
095C:  RCALL  07FE
....................    if(x==3) 
095E:  MOVF   xA0,W
0960:  SUBLW  03
0962:  BNZ   0978
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0964:  MOVLW  02
0966:  MOVWF  xB1
0968:  MOVFF  A1,B2
096C:  RCALL  073E
096E:  MOVLW  32
0970:  MOVWF  FF6
0972:  MOVLW  01
0974:  MOVWF  FF7
0976:  RCALL  07FE
....................    if(x==4) 
0978:  MOVF   xA0,W
097A:  SUBLW  04
097C:  BNZ   0992
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
097E:  MOVLW  02
0980:  MOVWF  xB1
0982:  MOVFF  A1,B2
0986:  RCALL  073E
0988:  MOVLW  46
098A:  MOVWF  FF6
098C:  MOVLW  01
098E:  MOVWF  FF7
0990:  RCALL  07FE
.................... } 
0992:  RETLW  00
....................  
.................... void velocidades(int8 x)// Funcion para imprimir mensajes de Menu Principal. 
.................... {  if(x==0) 
*
09FA:  MOVF   xA1,F
09FC:  BNZ   0A0E
....................       {Motor_L2_off;Motor_L3_off;Motor_L4_off;Motor_L1_off;} 
09FE:  BCF    F8C.2
0A00:  BCF    F95.2
0A02:  BCF    F8C.4
0A04:  BCF    F95.4
0A06:  BCF    F8C.5
0A08:  BCF    F95.5
0A0A:  BCF    F8C.3
0A0C:  BCF    F95.3
....................    if(x==1) 
0A0E:  DECFSZ xA1,W
0A10:  BRA    0A22
....................       {Motor_L2_off;Motor_L3_off;Motor_L4_off;Motor_L1_on;} 
0A12:  BCF    F8C.2
0A14:  BCF    F95.2
0A16:  BCF    F8C.4
0A18:  BCF    F95.4
0A1A:  BCF    F8C.5
0A1C:  BCF    F95.5
0A1E:  BSF    F8C.3
0A20:  BCF    F95.3
....................    if(x==2) 
0A22:  MOVF   xA1,W
0A24:  SUBLW  02
0A26:  BNZ   0A38
....................       {Motor_L3_off;Motor_L4_off;Motor_L1_off;Motor_L2_on;} 
0A28:  BCF    F8C.4
0A2A:  BCF    F95.4
0A2C:  BCF    F8C.5
0A2E:  BCF    F95.5
0A30:  BCF    F8C.3
0A32:  BCF    F95.3
0A34:  BSF    F8C.2
0A36:  BCF    F95.2
....................    if(x==3) 
0A38:  MOVF   xA1,W
0A3A:  SUBLW  03
0A3C:  BNZ   0A4E
....................       {Motor_L4_off;Motor_L1_off;Motor_L2_off;Motor_L3_on;} 
0A3E:  BCF    F8C.5
0A40:  BCF    F95.5
0A42:  BCF    F8C.3
0A44:  BCF    F95.3
0A46:  BCF    F8C.2
0A48:  BCF    F95.2
0A4A:  BSF    F8C.4
0A4C:  BCF    F95.4
....................    if(x==4) 
0A4E:  MOVF   xA1,W
0A50:  SUBLW  04
0A52:  BNZ   0A64
....................       {Motor_L2_off;Motor_L3_off;Motor_L1_off;Motor_L4_on;} 
0A54:  BCF    F8C.2
0A56:  BCF    F95.2
0A58:  BCF    F8C.4
0A5A:  BCF    F95.4
0A5C:  BCF    F8C.3
0A5E:  BCF    F95.3
0A60:  BSF    F8C.5
0A62:  BCF    F95.5
.................... } 
0A64:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
06EC:  RLCF   xA4,W
06EE:  MOVWF  00
06F0:  RLCF   00,F
06F2:  MOVLW  FC
06F4:  ANDWF  00,F
06F6:  MOVFF  00,01
06FA:  MOVF   FC2,W
06FC:  ANDLW  C3
06FE:  IORWF  00,W
0700:  MOVWF  FC2
0702:  MOVLW  0A
0704:  MOVWF  xB6
0706:  RCALL  05CE
0708:  BSF    FC2.1
070A:  BTFSC  FC2.1
070C:  BRA    070A
070E:  MOVFF  FC4,03
0712:  MOVFF  FC3,B7
0716:  MOVFF  FC4,B8
071A:  RCALL  06B6
071C:  MOVFF  03,A8
0720:  MOVFF  02,A7
0724:  MOVFF  01,A6
0728:  MOVFF  00,A5
072C:  MOVFF  A5,00
0730:  MOVFF  A6,01
0734:  MOVFF  A7,02
0738:  MOVFF  A8,03
.................... } 
073C:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
1046:  CLRF   xA3
1048:  CLRF   xA2
104A:  CLRF   xA1
104C:  CLRF   xA0
....................    float promediopresion=0.0; 
....................    V1 = (sensores(1)*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
104E:  MOVLW  01
1050:  MOVWF  xA4
1052:  CALL   06EC
1056:  MOVFF  00,A4
105A:  MOVFF  01,A5
105E:  MOVFF  02,A6
1062:  MOVFF  03,A7
1066:  MOVFF  03,B6
106A:  MOVFF  02,B5
106E:  MOVFF  01,B4
1072:  MOVFF  00,B3
1076:  CLRF   xBA
1078:  CLRF   xB9
107A:  MOVLW  20
107C:  MOVWF  xB8
107E:  MOVLW  81
1080:  MOVWF  xB7
1082:  RCALL  0B1A
1084:  MOVFF  00,A4
1088:  MOVFF  01,A5
108C:  MOVFF  02,A6
1090:  MOVFF  03,A7
1094:  MOVFF  03,B6
1098:  MOVFF  02,B5
109C:  MOVFF  01,B4
10A0:  MOVFF  00,B3
10A4:  CLRF   xBA
10A6:  MOVLW  C0
10A8:  MOVWF  xB9
10AA:  MOVLW  7F
10AC:  MOVWF  xB8
10AE:  MOVLW  88
10B0:  MOVWF  xB7
10B2:  RCALL  0C0C
10B4:  MOVFF  03,92
10B8:  MOVFF  02,91
10BC:  MOVFF  01,90
10C0:  MOVFF  00,8F
....................    Presion=(V1/1.81)-1.0;// Presion=(Voltaje/Ganancia)-1 
10C4:  MOVFF  92,B6
10C8:  MOVFF  91,B5
10CC:  MOVFF  90,B4
10D0:  MOVFF  8F,B3
10D4:  MOVLW  14
10D6:  MOVWF  xBA
10D8:  MOVLW  AE
10DA:  MOVWF  xB9
10DC:  MOVLW  67
10DE:  MOVWF  xB8
10E0:  MOVLW  7F
10E2:  MOVWF  xB7
10E4:  RCALL  0C0C
10E6:  MOVFF  00,A4
10EA:  MOVFF  01,A5
10EE:  MOVFF  02,A6
10F2:  MOVFF  03,A7
10F6:  BSF    FD8.1
10F8:  MOVFF  03,BA
10FC:  MOVFF  02,B9
1100:  MOVFF  01,B8
1104:  MOVFF  00,B7
1108:  CLRF   xBE
110A:  CLRF   xBD
110C:  CLRF   xBC
110E:  MOVLW  7F
1110:  MOVWF  xBB
1112:  RCALL  0D66
1114:  MOVFF  03,96
1118:  MOVFF  02,95
111C:  MOVFF  01,94
1120:  MOVFF  00,93
....................     
....................    if(Presion<0.0) 
1124:  MOVFF  96,B6
1128:  MOVFF  95,B5
112C:  MOVFF  94,B4
1130:  MOVFF  93,B3
1134:  CLRF   xBA
1136:  CLRF   xB9
1138:  CLRF   xB8
113A:  CLRF   xB7
113C:  RCALL  0FD0
113E:  BNC   1148
....................    { 
....................       Presion=0.0; 
1140:  CLRF   x96
1142:  CLRF   x95
1144:  CLRF   x94
1146:  CLRF   x93
....................    } 
....................  
....................    if(r>media-1) 
1148:  MOVLW  01
114A:  SUBWF  x9F,W
114C:  SUBWF  28,W
114E:  BZ    1154
1150:  BNC   1154
....................    {r=0;} 
1152:  CLRF   28
....................    PromPresion[r]=Presion;r++; 
1154:  MOVF   28,W
1156:  MULLW  04
1158:  MOVF   FF3,W
115A:  CLRF   03
115C:  ADDLW  3F
115E:  MOVWF  FE9
1160:  MOVLW  00
1162:  ADDWFC 03,W
1164:  MOVWF  FEA
1166:  MOVFF  93,FEF
116A:  MOVFF  94,FEC
116E:  MOVFF  95,FEC
1172:  MOVFF  96,FEC
1176:  INCF   28,F
....................           
....................    for(q=0;q<=(media-1);q++) 
1178:  CLRF   29
117A:  MOVLW  01
117C:  SUBWF  x9F,W
117E:  SUBWF  29,W
1180:  BZ    1184
1182:  BC    11EE
....................    { 
....................       promediopresion+=PromPresion[q]; 
1184:  MOVF   29,W
1186:  MULLW  04
1188:  MOVF   FF3,W
118A:  CLRF   03
118C:  ADDLW  3F
118E:  MOVWF  FE9
1190:  MOVLW  00
1192:  ADDWFC 03,W
1194:  MOVWF  FEA
1196:  MOVFF  FEF,00
119A:  MOVFF  FEC,01
119E:  MOVFF  FEC,02
11A2:  MOVFF  FEC,03
11A6:  MOVFF  FEA,A5
11AA:  MOVFF  FE9,A4
11AE:  BCF    FD8.1
11B0:  MOVFF  A3,BA
11B4:  MOVFF  A2,B9
11B8:  MOVFF  A1,B8
11BC:  MOVFF  A0,B7
11C0:  MOVFF  03,BE
11C4:  MOVFF  02,BD
11C8:  MOVFF  01,BC
11CC:  MOVFF  00,BB
11D0:  RCALL  0D66
11D2:  MOVFF  A5,FEA
11D6:  MOVFF  A4,FE9
11DA:  MOVFF  03,A3
11DE:  MOVFF  02,A2
11E2:  MOVFF  01,A1
11E6:  MOVFF  00,A0
....................    }  
11EA:  INCF   29,F
11EC:  BRA    117A
....................    promediopresion=promediopresion/media;    
11EE:  CLRF   xB8
11F0:  MOVFF  9F,B7
11F4:  CALL   06B6
11F8:  MOVFF  A3,B6
11FC:  MOVFF  A2,B5
1200:  MOVFF  A1,B4
1204:  MOVFF  A0,B3
1208:  MOVFF  03,BA
120C:  MOVFF  02,B9
1210:  MOVFF  01,B8
1214:  MOVFF  00,B7
1218:  RCALL  0C0C
121A:  MOVFF  03,A3
121E:  MOVFF  02,A2
1222:  MOVFF  01,A1
1226:  MOVFF  00,A0
....................     
....................    return promediopresion; 
122A:  MOVFF  A0,00
122E:  MOVFF  A1,01
1232:  MOVFF  A2,02
1236:  MOVFF  A3,03
.................... } 
123A:  GOTO   2C84 (RETURN)
.................... void main () 
.................... { 
*
1804:  CLRF   FF8
1806:  BCF    FD0.7
1808:  BSF    07.7
180A:  CLRF   FEA
180C:  CLRF   FE9
180E:  BCF    17.0
1810:  BCF    17.1
1812:  BCF    17.2
1814:  BCF    17.3
1816:  BCF    17.4
1818:  BCF    17.5
181A:  BCF    17.6
181C:  BCF    17.7
181E:  BCF    18.0
1820:  BCF    18.1
1822:  BCF    18.2
1824:  BCF    18.3
1826:  CLRF   19
1828:  MOVLW  05
182A:  MOVWF  1A
182C:  MOVLW  02
182E:  MOVWF  1B
1830:  MOVLW  0B
1832:  MOVWF  1C
1834:  MOVLW  02
1836:  MOVWF  1D
1838:  MOVLW  03
183A:  MOVWF  1E
183C:  MOVLW  02
183E:  MOVWF  1F
1840:  MOVWF  20
1842:  MOVLW  04
1844:  MOVWF  21
1846:  CLRF   22
1848:  CLRF   23
184A:  CLRF   24
184C:  CLRF   25
184E:  CLRF   26
1850:  CLRF   27
1852:  CLRF   28
1854:  CLRF   29
1856:  CLRF   2A
1858:  MOVLW  01
185A:  MOVWF  2B
185C:  CLRF   2C
185E:  CLRF   2D
1860:  CLRF   2E
1862:  MOVWF  2F
1864:  CLRF   3E
1866:  CLRF   3D
1868:  CLRF   x92
186A:  CLRF   x91
186C:  CLRF   x90
186E:  CLRF   x8F
1870:  CLRF   x96
1872:  CLRF   x95
1874:  CLRF   x94
1876:  CLRF   x93
1878:  CLRF   x9A
187A:  CLRF   x99
187C:  CLRF   x98
187E:  CLRF   x97
1880:  CLRF   x9E
1882:  CLRF   x9D
1884:  CLRF   x9C
1886:  CLRF   x9B
1888:  MOVF   FC1,W
188A:  ANDLW  C0
188C:  IORLW  0F
188E:  MOVWF  FC1
1890:  MOVLW  07
1892:  MOVWF  FB4
1894:  MOVLW  3E
1896:  MOVWF  30
1898:  MOVLW  20
189A:  MOVWF  31
189C:  MOVLW  5E
189E:  MOVWF  32
18A0:  CLRF   33
18A2:  CLRF   34
18A4:  CLRF   35
18A6:  CLRF   36
18A8:  CLRF   37
18AA:  CLRF   38
18AC:  CLRF   39
18AE:  CLRF   3A
18B0:  CLRF   3F
18B2:  CLRF   40
18B4:  CLRF   41
18B6:  CLRF   42
18B8:  CLRF   43
18BA:  CLRF   44
18BC:  CLRF   45
18BE:  CLRF   46
18C0:  CLRF   47
18C2:  CLRF   48
18C4:  CLRF   49
18C6:  CLRF   4A
18C8:  CLRF   4B
18CA:  CLRF   4C
18CC:  CLRF   4D
18CE:  CLRF   4E
18D0:  CLRF   4F
18D2:  CLRF   50
18D4:  CLRF   51
18D6:  CLRF   52
18D8:  CLRF   53
18DA:  CLRF   54
18DC:  CLRF   55
18DE:  CLRF   56
18E0:  CLRF   57
18E2:  CLRF   58
18E4:  CLRF   59
18E6:  CLRF   5A
18E8:  CLRF   5B
18EA:  CLRF   5C
18EC:  CLRF   5D
18EE:  CLRF   5E
18F0:  CLRF   5F
18F2:  CLRF   x60
18F4:  CLRF   x61
18F6:  CLRF   x62
18F8:  CLRF   x63
18FA:  CLRF   x64
18FC:  CLRF   x65
18FE:  CLRF   x66
1900:  CLRF   x67
1902:  CLRF   x68
1904:  CLRF   x69
1906:  CLRF   x6A
1908:  CLRF   x6B
190A:  CLRF   x6C
190C:  CLRF   x6D
190E:  CLRF   x6E
1910:  CLRF   x6F
1912:  CLRF   x70
1914:  CLRF   x71
1916:  CLRF   x72
1918:  CLRF   x73
191A:  CLRF   x74
191C:  CLRF   x75
191E:  CLRF   x76
1920:  CLRF   x77
1922:  CLRF   x78
1924:  CLRF   x79
1926:  CLRF   x7A
1928:  CLRF   x7B
192A:  CLRF   x7C
192C:  CLRF   x7D
192E:  CLRF   x7E
1930:  CLRF   x7F
1932:  CLRF   x80
1934:  CLRF   x81
1936:  CLRF   x82
1938:  CLRF   x83
193A:  CLRF   x84
193C:  CLRF   x85
193E:  CLRF   x86
1940:  CLRF   x87
1942:  CLRF   x88
1944:  CLRF   x89
1946:  CLRF   x8A
1948:  CLRF   x8B
194A:  CLRF   x8C
194C:  CLRF   x8D
194E:  CLRF   x8E
....................    output_d(0); 
1950:  CLRF   F95
1952:  CLRF   F8C
....................    lcd_init(); 
1954:  CALL   0660
....................    enable_interrupts(global); 
1958:  MOVLW  C0
195A:  IORWF  FF2,F
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
195C:  MOVLW  85
195E:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
1960:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
1962:  MOVF   FC1,W
1964:  ANDLW  C0
1966:  IORLW  0D
1968:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
196A:  BCF    FC0.0
196C:  BSF    FC0.1
196E:  BCF    FC0.2
1970:  BSF    FC0.7
1972:  BSF    FC2.0
....................    sensores(0); 
1974:  CLRF   xA4
1976:  CALL   06EC
....................    lcd_gotoxy(1,1); 
197A:  MOVLW  01
197C:  MOVWF  xB1
197E:  MOVWF  xB2
1980:  CALL   073E
....................    printf(lcd_putc,"       CABINA       "); 
1984:  MOVLW  5A
1986:  MOVWF  FF6
1988:  MOVLW  01
198A:  MOVWF  FF7
198C:  CALL   07FE
....................    lcd_gotoxy(1,2); 
1990:  MOVLW  01
1992:  MOVWF  xB1
1994:  MOVLW  02
1996:  MOVWF  xB2
1998:  CALL   073E
....................    printf(lcd_putc,"         PCR        "); 
199C:  MOVLW  70
199E:  MOVWF  FF6
19A0:  MOVLW  01
19A2:  MOVWF  FF7
19A4:  CALL   07FE
....................    lcd_gotoxy(1,3); 
19A8:  MOVLW  01
19AA:  MOVWF  xB1
19AC:  MOVLW  03
19AE:  MOVWF  xB2
19B0:  CALL   073E
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
19B4:  MOVLW  86
19B6:  MOVWF  FF6
19B8:  MOVLW  01
19BA:  MOVWF  FF7
19BC:  CALL   07FE
....................    lcd_gotoxy(1,4); 
19C0:  MOVLW  01
19C2:  MOVWF  xB1
19C4:  MOVLW  04
19C6:  MOVWF  xB2
19C8:  CALL   073E
....................    printf(lcd_putc,"   REF: JPCPCR-24   "); 
19CC:  MOVLW  9C
19CE:  MOVWF  FF6
19D0:  MOVLW  01
19D2:  MOVWF  FF7
19D4:  CALL   07FE
....................    delay_ms(2000); 
19D8:  MOVLW  08
19DA:  MOVWF  x9F
19DC:  MOVLW  FA
19DE:  MOVWF  xB6
19E0:  CALL   05CE
19E4:  DECFSZ x9F,F
19E6:  BRA    19DC
....................    printf(lcd_putc,"\f"); 
19E8:  MOVLW  0C
19EA:  MOVWF  xB0
19EC:  CALL   07A0
....................     
....................    //Solo para simulacion 
....................    //write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20); 
....................    //write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
....................    Velocidad=read_eeprom(5); 
19F0:  MOVFF  FF2,9F
19F4:  BCF    FF2.7
19F6:  MOVLW  05
19F8:  MOVWF  FA9
19FA:  BCF    FA6.6
19FC:  BCF    FA6.7
19FE:  BSF    FA6.0
1A00:  MOVF   FA8,W
1A02:  BTFSC  x9F.7
1A04:  BSF    FF2.7
1A06:  MOVWF  2F
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1A08:  MOVFF  FF2,9F
1A0C:  BCF    FF2.7
1A0E:  CLRF   FA9
1A10:  BCF    FA6.6
1A12:  BCF    FA6.7
1A14:  BSF    FA6.0
1A16:  MOVF   FA8,W
1A18:  BTFSC  x9F.7
1A1A:  BSF    FF2.7
1A1C:  MOVWF  37
1A1E:  MOVLW  14
1A20:  MOVWF  xB6
1A22:  CALL   05CE
1A26:  MOVFF  FF2,9F
1A2A:  BCF    FF2.7
1A2C:  MOVLW  01
1A2E:  MOVWF  FA9
1A30:  BCF    FA6.6
1A32:  BCF    FA6.7
1A34:  BSF    FA6.0
1A36:  MOVF   FA8,W
1A38:  BTFSC  x9F.7
1A3A:  BSF    FF2.7
1A3C:  MOVWF  38
1A3E:  MOVLW  14
1A40:  MOVWF  xB6
1A42:  CALL   05CE
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
1A46:  MOVFF  FF2,9F
1A4A:  BCF    FF2.7
1A4C:  MOVLW  02
1A4E:  MOVWF  FA9
1A50:  BCF    FA6.6
1A52:  BCF    FA6.7
1A54:  BSF    FA6.0
1A56:  MOVF   FA8,W
1A58:  BTFSC  x9F.7
1A5A:  BSF    FF2.7
1A5C:  MOVWF  39
1A5E:  MOVLW  14
1A60:  MOVWF  xB6
1A62:  CALL   05CE
1A66:  MOVFF  FF2,9F
1A6A:  BCF    FF2.7
1A6C:  MOVLW  03
1A6E:  MOVWF  FA9
1A70:  BCF    FA6.6
1A72:  BCF    FA6.7
1A74:  BSF    FA6.0
1A76:  MOVF   FA8,W
1A78:  BTFSC  x9F.7
1A7A:  BSF    FF2.7
1A7C:  MOVWF  3A
1A7E:  MOVLW  14
1A80:  MOVWF  xB6
1A82:  CALL   05CE
....................    tempo_minutos=read_eeprom(20);tempo_segundos=read_eeprom(21); 
1A86:  MOVFF  FF2,9F
1A8A:  BCF    FF2.7
1A8C:  MOVLW  14
1A8E:  MOVWF  FA9
1A90:  BCF    FA6.6
1A92:  BCF    FA6.7
1A94:  BSF    FA6.0
1A96:  MOVF   FA8,W
1A98:  BTFSC  x9F.7
1A9A:  BSF    FF2.7
1A9C:  MOVWF  24
1A9E:  MOVFF  FF2,9F
1AA2:  BCF    FF2.7
1AA4:  MOVLW  15
1AA6:  MOVWF  FA9
1AA8:  BCF    FA6.6
1AAA:  BCF    FA6.7
1AAC:  BSF    FA6.0
1AAE:  MOVF   FA8,W
1AB0:  BTFSC  x9F.7
1AB2:  BSF    FF2.7
1AB4:  MOVWF  25
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
1AB6:  MOVFF  24,26
1ABA:  MOVFF  25,27
....................    segundos=read_eeprom(50);minutos=read_eeprom(51);horas=read_eeprom(52); 
1ABE:  MOVFF  FF2,9F
1AC2:  BCF    FF2.7
1AC4:  MOVLW  32
1AC6:  MOVWF  FA9
1AC8:  BCF    FA6.6
1ACA:  BCF    FA6.7
1ACC:  BSF    FA6.0
1ACE:  MOVF   FA8,W
1AD0:  BTFSC  x9F.7
1AD2:  BSF    FF2.7
1AD4:  MOVWF  22
1AD6:  MOVFF  FF2,9F
1ADA:  BCF    FF2.7
1ADC:  MOVLW  33
1ADE:  MOVWF  FA9
1AE0:  BCF    FA6.6
1AE2:  BCF    FA6.7
1AE4:  BSF    FA6.0
1AE6:  MOVF   FA8,W
1AE8:  BTFSC  x9F.7
1AEA:  BSF    FF2.7
1AEC:  MOVWF  23
1AEE:  MOVFF  FF2,9F
1AF2:  BCF    FF2.7
1AF4:  MOVLW  34
1AF6:  MOVWF  FA9
1AF8:  BCF    FA6.6
1AFA:  BCF    FA6.7
1AFC:  BSF    FA6.0
1AFE:  MOVF   FA8,W
1B00:  BTFSC  x9F.7
1B02:  BSF    FF2.7
1B04:  CLRF   3E
1B06:  MOVWF  3D
....................    
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1B08:  MOVF   19,F
1B0A:  BTFSS  FD8.2
1B0C:  BRA    1EB6
....................    lcd_gotoxy(1,1); 
1B0E:  MOVLW  01
1B10:  MOVWF  xB1
1B12:  MOVWF  xB2
1B14:  CALL   073E
....................    printf(lcd_putc,"     Ingrese        "); 
1B18:  MOVLW  B2
1B1A:  MOVWF  FF6
1B1C:  MOVLW  01
1B1E:  MOVWF  FF7
1B20:  CALL   07FE
....................    lcd_gotoxy(1,2); 
1B24:  MOVLW  01
1B26:  MOVWF  xB1
1B28:  MOVLW  02
1B2A:  MOVWF  xB2
1B2C:  CALL   073E
....................    printf(lcd_putc,"    Contraseña      "); 
1B30:  MOVLW  C8
1B32:  MOVWF  FF6
1B34:  MOVLW  01
1B36:  MOVWF  FF7
1B38:  CALL   07FE
....................    lcd_gotoxy(1,3); 
1B3C:  MOVLW  01
1B3E:  MOVWF  xB1
1B40:  MOVLW  03
1B42:  MOVWF  xB2
1B44:  CALL   073E
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1B48:  MOVLW  DE
1B4A:  MOVWF  FF6
1B4C:  MOVLW  01
1B4E:  MOVWF  FF7
1B50:  MOVLW  0A
1B52:  MOVWF  xA3
1B54:  CALL   081E
1B58:  MOVFF  33,9F
1B5C:  MOVLW  1F
1B5E:  MOVWF  xA0
1B60:  CALL   0864
1B64:  MOVFF  34,9F
1B68:  MOVLW  1F
1B6A:  MOVWF  xA0
1B6C:  CALL   0864
1B70:  MOVFF  35,9F
1B74:  MOVLW  1F
1B76:  MOVWF  xA0
1B78:  CALL   0864
1B7C:  MOVFF  36,9F
1B80:  MOVLW  1F
1B82:  MOVWF  xA0
1B84:  CALL   0864
1B88:  MOVLW  20
1B8A:  MOVWF  xB0
1B8C:  CALL   07A0
1B90:  MOVLW  20
1B92:  MOVWF  xB0
1B94:  CALL   07A0
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
1B98:  BSF    F92.5
1B9A:  BTFSS  F80.5
1B9C:  BRA    1BC0
....................       {  if(Flanco == 0)  
1B9E:  BTFSC  17.3
1BA0:  BRA    1BBE
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
1BA2:  MOVLW  0B
1BA4:  SUBWF  1C,W
1BA6:  CLRF   03
1BA8:  ADDLW  33
1BAA:  MOVWF  FE9
1BAC:  MOVLW  00
1BAE:  ADDWFC 03,W
1BB0:  MOVWF  FEA
1BB2:  INCF   FEF,F
1BB4:  BSF    17.3
1BB6:  MOVLW  1E
1BB8:  MOVWF  xB6
1BBA:  CALL   05CE
....................          else 
1BBE:  BRA    1BC2
....................             {Flanco = 0;} 
1BC0:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1BC2:  BSF    F96.0
1BC4:  BTFSS  F84.0
1BC6:  BRA    1BEA
....................       {  if(Flanco2 == 0)  
1BC8:  BTFSC  17.5
1BCA:  BRA    1BE8
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
1BCC:  MOVLW  0B
1BCE:  SUBWF  1C,W
1BD0:  CLRF   03
1BD2:  ADDLW  33
1BD4:  MOVWF  FE9
1BD6:  MOVLW  00
1BD8:  ADDWFC 03,W
1BDA:  MOVWF  FEA
1BDC:  DECF   FEF,F
1BDE:  BSF    17.5
1BE0:  MOVLW  1E
1BE2:  MOVWF  xB6
1BE4:  CALL   05CE
....................          else 
1BE8:  BRA    1BEC
....................             {Flanco2 = 0;} 
1BEA:  BCF    17.5
....................     
....................       if(RIGHT)// Si Oprime Derecha 
1BEC:  BSF    F96.1
1BEE:  BTFSS  F84.1
1BF0:  BRA    1C0C
....................       {  if(Flanco1 == 0)  
1BF2:  BTFSC  17.4
1BF4:  BRA    1C0A
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
1BF6:  BSF    17.4
1BF8:  INCF   1C,F
1BFA:  MOVLW  1E
1BFC:  MOVWF  xB6
1BFE:  CALL   05CE
1C02:  MOVLW  0C
1C04:  MOVWF  xB0
1C06:  CALL   07A0
....................          else 
1C0A:  BRA    1C0E
....................             {Flanco1 = 0;}    
1C0C:  BCF    17.4
....................              
....................        if(LEFT)// Si Oprime izquierda 
1C0E:  BSF    F96.2
1C10:  BTFSS  F84.2
1C12:  BRA    1C2E
....................       {  if(Flanco3 == 0)  
1C14:  BTFSC  17.6
1C16:  BRA    1C2C
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
1C18:  BSF    17.6
1C1A:  DECF   1C,F
1C1C:  MOVLW  1E
1C1E:  MOVWF  xB6
1C20:  CALL   05CE
1C24:  MOVLW  0C
1C26:  MOVWF  xB0
1C28:  CALL   07A0
....................          else 
1C2C:  BRA    1C30
....................             {Flanco3 = 0;}     
1C2E:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1C30:  MOVLW  0B
1C32:  SUBWF  1C,W
1C34:  CLRF   03
1C36:  ADDLW  33
1C38:  MOVWF  FE9
1C3A:  MOVLW  00
1C3C:  ADDWFC 03,W
1C3E:  MOVWF  FEA
1C40:  BTFSC  FEF.7
1C42:  BRA    1C46
1C44:  BRA    1C5A
....................        {clave[unidad-11]=9;} 
1C46:  MOVLW  0B
1C48:  SUBWF  1C,W
1C4A:  CLRF   03
1C4C:  ADDLW  33
1C4E:  MOVWF  FE9
1C50:  MOVLW  00
1C52:  ADDWFC 03,W
1C54:  MOVWF  FEA
1C56:  MOVLW  09
1C58:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1C5A:  MOVLW  0B
1C5C:  SUBWF  1C,W
1C5E:  CLRF   03
1C60:  ADDLW  33
1C62:  MOVWF  FE9
1C64:  MOVLW  00
1C66:  ADDWFC 03,W
1C68:  MOVWF  FEA
1C6A:  BTFSC  FEF.7
1C6C:  BRA    1C86
1C6E:  MOVF   FEF,W
1C70:  SUBLW  09
1C72:  BC    1C86
....................        {clave[unidad-11]=0;} 
1C74:  MOVLW  0B
1C76:  SUBWF  1C,W
1C78:  CLRF   03
1C7A:  ADDLW  33
1C7C:  MOVWF  FE9
1C7E:  MOVLW  00
1C80:  ADDWFC 03,W
1C82:  MOVWF  FEA
1C84:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1C86:  MOVF   1C,W
1C88:  SUBLW  0A
1C8A:  BNC   1C90
....................        {unidad=11;} 
1C8C:  MOVLW  0B
1C8E:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1C90:  MOVFF  1C,B1
1C94:  MOVLW  04
1C96:  MOVWF  xB2
1C98:  CALL   073E
....................        lcd_putc(t[2]); 
1C9C:  MOVFF  32,B0
1CA0:  CALL   07A0
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1CA4:  MOVF   1C,W
1CA6:  SUBLW  0E
1CA8:  BTFSC  FD8.0
1CAA:  BRA    1E92
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1CAC:  MOVF   33,W
1CAE:  SUBLW  03
1CB0:  BNZ   1D8C
1CB2:  MOVF   34,W
1CB4:  SUBLW  08
1CB6:  BNZ   1D8C
1CB8:  MOVF   35,W
1CBA:  SUBLW  09
1CBC:  BNZ   1D8C
1CBE:  MOVF   36,W
1CC0:  SUBLW  02
1CC2:  BNZ   1D8C
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1CC4:  CLRF   FA9
1CC6:  CLRF   FA8
1CC8:  BCF    FA6.6
1CCA:  BCF    FA6.7
1CCC:  BSF    FA6.2
1CCE:  MOVF   FF2,W
1CD0:  MOVWF  00
1CD2:  BCF    FF2.7
1CD4:  MOVLB  F
1CD6:  MOVLW  55
1CD8:  MOVWF  FA7
1CDA:  MOVLW  AA
1CDC:  MOVWF  FA7
1CDE:  BSF    FA6.1
1CE0:  BTFSC  FA6.1
1CE2:  BRA    1CE0
1CE4:  BCF    FA6.2
1CE6:  MOVF   00,W
1CE8:  IORWF  FF2,F
1CEA:  MOVLW  14
1CEC:  MOVLB  0
1CEE:  MOVWF  xB6
1CF0:  CALL   05CE
1CF4:  MOVLW  01
1CF6:  MOVWF  FA9
1CF8:  CLRF   FA8
1CFA:  BCF    FA6.6
1CFC:  BCF    FA6.7
1CFE:  BSF    FA6.2
1D00:  MOVF   FF2,W
1D02:  MOVWF  00
1D04:  BCF    FF2.7
1D06:  MOVLB  F
1D08:  MOVLW  55
1D0A:  MOVWF  FA7
1D0C:  MOVLW  AA
1D0E:  MOVWF  FA7
1D10:  BSF    FA6.1
1D12:  BTFSC  FA6.1
1D14:  BRA    1D12
1D16:  BCF    FA6.2
1D18:  MOVF   00,W
1D1A:  IORWF  FF2,F
1D1C:  MOVLW  14
1D1E:  MOVLB  0
1D20:  MOVWF  xB6
1D22:  CALL   05CE
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1D26:  MOVLW  02
1D28:  MOVWF  FA9
1D2A:  CLRF   FA8
1D2C:  BCF    FA6.6
1D2E:  BCF    FA6.7
1D30:  BSF    FA6.2
1D32:  MOVF   FF2,W
1D34:  MOVWF  00
1D36:  BCF    FF2.7
1D38:  MOVLB  F
1D3A:  MOVLW  55
1D3C:  MOVWF  FA7
1D3E:  MOVLW  AA
1D40:  MOVWF  FA7
1D42:  BSF    FA6.1
1D44:  BTFSC  FA6.1
1D46:  BRA    1D44
1D48:  BCF    FA6.2
1D4A:  MOVF   00,W
1D4C:  IORWF  FF2,F
1D4E:  MOVLW  14
1D50:  MOVLB  0
1D52:  MOVWF  xB6
1D54:  CALL   05CE
1D58:  MOVLW  03
1D5A:  MOVWF  FA9
1D5C:  CLRF   FA8
1D5E:  BCF    FA6.6
1D60:  BCF    FA6.7
1D62:  BSF    FA6.2
1D64:  MOVF   FF2,W
1D66:  MOVWF  00
1D68:  BCF    FF2.7
1D6A:  MOVLB  F
1D6C:  MOVLW  55
1D6E:  MOVWF  FA7
1D70:  MOVLW  AA
1D72:  MOVWF  FA7
1D74:  BSF    FA6.1
1D76:  BTFSC  FA6.1
1D78:  BRA    1D76
1D7A:  BCF    FA6.2
1D7C:  MOVF   00,W
1D7E:  IORWF  FF2,F
1D80:  MOVLW  14
1D82:  MOVLB  0
1D84:  MOVWF  xB6
1D86:  CALL   05CE
....................              reset_cpu();} 
1D8A:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
1D8C:  MOVF   37,W
1D8E:  SUBWF  33,W
1D90:  BNZ   1E24
1D92:  MOVF   38,W
1D94:  SUBWF  34,W
1D96:  BNZ   1E24
1D98:  MOVF   39,W
1D9A:  SUBWF  35,W
1D9C:  BNZ   1E24
1D9E:  MOVF   3A,W
1DA0:  SUBWF  36,W
1DA2:  BNZ   1E24
....................             {lcd_gotoxy(1,1); 
1DA4:  MOVLW  01
1DA6:  MOVWF  xB1
1DA8:  MOVWF  xB2
1DAA:  CALL   073E
....................             printf(lcd_putc,"                   "); 
1DAE:  MOVLW  F4
1DB0:  MOVWF  FF6
1DB2:  MOVLW  01
1DB4:  MOVWF  FF7
1DB6:  CALL   07FE
....................             lcd_gotoxy(1,2); 
1DBA:  MOVLW  01
1DBC:  MOVWF  xB1
1DBE:  MOVLW  02
1DC0:  MOVWF  xB2
1DC2:  CALL   073E
....................             printf(lcd_putc,"     Contraseña    "); 
1DC6:  MOVLW  08
1DC8:  MOVWF  FF6
1DCA:  MOVLW  02
1DCC:  MOVWF  FF7
1DCE:  CALL   07FE
....................             lcd_gotoxy(1,3); 
1DD2:  MOVLW  01
1DD4:  MOVWF  xB1
1DD6:  MOVLW  03
1DD8:  MOVWF  xB2
1DDA:  CALL   073E
....................             printf(lcd_putc,"      Correcta     "); 
1DDE:  MOVLW  1C
1DE0:  MOVWF  FF6
1DE2:  MOVLW  02
1DE4:  MOVWF  FF7
1DE6:  CALL   07FE
....................             lcd_gotoxy(1,4); 
1DEA:  MOVLW  01
1DEC:  MOVWF  xB1
1DEE:  MOVLW  04
1DF0:  MOVWF  xB2
1DF2:  CALL   073E
....................             printf(lcd_putc,"                   "); 
1DF6:  MOVLW  30
1DF8:  MOVWF  FF6
1DFA:  MOVLW  02
1DFC:  MOVWF  FF7
1DFE:  CALL   07FE
....................             delay_ms(1000);Menu=100;unidad=11;printf(lcd_putc,"\f");} 
1E02:  MOVLW  04
1E04:  MOVWF  x9F
1E06:  MOVLW  FA
1E08:  MOVWF  xB6
1E0A:  CALL   05CE
1E0E:  DECFSZ x9F,F
1E10:  BRA    1E06
1E12:  MOVLW  64
1E14:  MOVWF  19
1E16:  MOVLW  0B
1E18:  MOVWF  1C
1E1A:  MOVLW  0C
1E1C:  MOVWF  xB0
1E1E:  CALL   07A0
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
1E22:  BRA    1E92
....................          {lcd_gotoxy(1,1); 
1E24:  MOVLW  01
1E26:  MOVWF  xB1
1E28:  MOVWF  xB2
1E2A:  CALL   073E
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
1E2E:  MOVLW  01
1E30:  MOVWF  xB1
1E32:  MOVLW  02
1E34:  MOVWF  xB2
1E36:  CALL   073E
....................             printf(lcd_putc,"     Contraseña    "); 
1E3A:  MOVLW  44
1E3C:  MOVWF  FF6
1E3E:  MOVLW  02
1E40:  MOVWF  FF7
1E42:  CALL   07FE
....................             lcd_gotoxy(1,3); 
1E46:  MOVLW  01
1E48:  MOVWF  xB1
1E4A:  MOVLW  03
1E4C:  MOVWF  xB2
1E4E:  CALL   073E
....................             printf(lcd_putc,"     Incorrecta    "); 
1E52:  MOVLW  58
1E54:  MOVWF  FF6
1E56:  MOVLW  02
1E58:  MOVWF  FF7
1E5A:  CALL   07FE
....................             lcd_gotoxy(1,4); 
1E5E:  MOVLW  01
1E60:  MOVWF  xB1
1E62:  MOVLW  04
1E64:  MOVWF  xB2
1E66:  CALL   073E
....................             printf(lcd_putc,"                   "); 
1E6A:  MOVLW  6C
1E6C:  MOVWF  FF6
1E6E:  MOVLW  02
1E70:  MOVWF  FF7
1E72:  CALL   07FE
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");} 
1E76:  MOVLW  04
1E78:  MOVWF  x9F
1E7A:  MOVLW  FA
1E7C:  MOVWF  xB6
1E7E:  CALL   05CE
1E82:  DECFSZ x9F,F
1E84:  BRA    1E7A
1E86:  MOVLW  0B
1E88:  MOVWF  1C
1E8A:  MOVLW  0C
1E8C:  MOVWF  xB0
1E8E:  CALL   07A0
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
1E92:  MOVF   1C,W
1E94:  SUBLW  0B
1E96:  BC    1EB6
1E98:  MOVF   1C,W
1E9A:  SUBLW  0D
1E9C:  BNC   1EB6
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1E9E:  MOVLW  01
1EA0:  SUBWF  1C,W
1EA2:  MOVWF  x9F
1EA4:  MOVWF  xB1
1EA6:  MOVLW  04
1EA8:  MOVWF  xB2
1EAA:  CALL   073E
....................             lcd_putc(t[1]); 
1EAE:  MOVFF  31,B0
1EB2:  CALL   07A0
....................           } 
....................  
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
1EB6:  DECFSZ 19,W
1EB8:  BRA    20AA
....................    lcd_gotoxy(1,1); 
1EBA:  MOVLW  01
1EBC:  MOVWF  xB1
1EBE:  MOVWF  xB2
1EC0:  CALL   073E
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
1EC4:  MOVLW  80
1EC6:  MOVWF  FF6
1EC8:  MOVLW  02
1ECA:  MOVWF  FF7
1ECC:  CALL   07FE
....................       if(paso<0) 
1ED0:  BTFSC  2E.7
1ED2:  BRA    1ED6
1ED4:  BRA    1ED8
....................         {paso=0;} 
1ED6:  CLRF   2E
....................          
....................       if(UP)//Si oprime hacia arriba 
1ED8:  BSF    F92.5
1EDA:  BTFSS  F80.5
1EDC:  BRA    1EF8
....................       { 
....................          if(Flanco == 0) 
1EDE:  BTFSC  17.3
1EE0:  BRA    1EF6
....................          { 
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
1EE2:  DECF   1F,F
1EE4:  DECF   1D,F
1EE6:  MOVLW  01
1EE8:  ADDWF  1D,W
1EEA:  MOVWF  1E
1EEC:  BSF    17.3
1EEE:  MOVLW  1E
1EF0:  MOVWF  xB6
1EF2:  CALL   05CE
....................          } 
....................       } 
....................       else 
1EF6:  BRA    1EFA
....................       { 
....................          Flanco = 0; 
1EF8:  BCF    17.3
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1EFA:  BSF    F96.0
1EFC:  BTFSS  F84.0
1EFE:  BRA    1F1A
....................       { 
....................          if(Flanco2 == 0) 
1F00:  BTFSC  17.5
1F02:  BRA    1F18
....................          { 
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
1F04:  INCF   1F,F
1F06:  INCF   1D,F
1F08:  MOVLW  01
1F0A:  SUBWF  1D,W
1F0C:  MOVWF  1E
1F0E:  BSF    17.5
1F10:  MOVLW  1E
1F12:  MOVWF  xB6
1F14:  CALL   05CE
....................          } 
....................       } 
....................       else 
1F18:  BRA    1F1C
....................       { 
....................          Flanco2 = 0; 
1F1A:  BCF    17.5
....................       } 
....................     
....................          
....................         if(Flecha2>nMenuH) 
1F1C:  MOVF   1F,W
1F1E:  SUBWF  21,W
1F20:  BC    1F32
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
1F22:  INCF   2E,F
1F24:  MOVFF  1F,21
1F28:  MOVLW  02
1F2A:  SUBWF  21,W
1F2C:  MOVWF  20
1F2E:  MOVLW  04
1F30:  MOVWF  1D
....................          
....................         if(Flecha2<nMenuL) 
1F32:  MOVF   20,W
1F34:  SUBWF  1F,W
1F36:  BC    1F48
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
1F38:  DECF   2E,F
1F3A:  MOVFF  1F,20
1F3E:  MOVLW  02
1F40:  ADDWF  20,W
1F42:  MOVWF  21
1F44:  MOVLW  02
1F46:  MOVWF  1D
....................          
....................         if(Flecha2>n_opcionH) 
1F48:  MOVF   1F,W
1F4A:  SUBWF  1A,W
1F4C:  BC    1F60
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
1F4E:  MOVFF  1B,1F
1F52:  MOVLW  02
1F54:  MOVWF  1D
1F56:  CLRF   2E
1F58:  MOVFF  1F,20
1F5C:  ADDWF  20,W
1F5E:  MOVWF  21
....................          
....................         if(Flecha2<n_opcionL) 
1F60:  MOVF   1B,W
1F62:  SUBWF  1F,W
1F64:  BC    1F7C
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}                
1F66:  MOVFF  1A,1F
1F6A:  MOVLW  04
1F6C:  MOVWF  1D
1F6E:  SUBWF  1A,W
1F70:  MOVWF  2E
1F72:  MOVFF  1F,21
1F76:  MOVLW  02
1F78:  SUBWF  21,W
1F7A:  MOVWF  20
....................          
....................         mensajes(1+paso,2); 
1F7C:  MOVLW  01
1F7E:  ADDWF  2E,W
1F80:  MOVWF  x9F
1F82:  MOVWF  xA0
1F84:  MOVLW  02
1F86:  MOVWF  xA1
1F88:  CALL   092C
....................         mensajes(2+paso,3); 
1F8C:  MOVLW  02
1F8E:  ADDWF  2E,W
1F90:  MOVWF  x9F
1F92:  MOVWF  xA0
1F94:  MOVLW  03
1F96:  MOVWF  xA1
1F98:  CALL   092C
....................         mensajes(3+paso,4); 
1F9C:  MOVLW  03
1F9E:  ADDWF  2E,W
1FA0:  MOVWF  x9F
1FA2:  MOVWF  xA0
1FA4:  MOVLW  04
1FA6:  MOVWF  xA1
1FA8:  CALL   092C
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
1FAC:  MOVLW  01
1FAE:  MOVWF  xB1
1FB0:  MOVFF  1D,B2
1FB4:  CALL   073E
....................         lcd_putc(t[0]); 
1FB8:  MOVFF  30,B0
1FBC:  CALL   07A0
....................  
....................         if(Flecha==2) 
1FC0:  MOVF   1D,W
1FC2:  SUBLW  02
1FC4:  BNZ   1FEE
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
1FC6:  MOVLW  01
1FC8:  MOVWF  xB1
1FCA:  MOVLW  04
1FCC:  MOVWF  xB2
1FCE:  CALL   073E
....................             lcd_putc(t[1]); 
1FD2:  MOVFF  31,B0
1FD6:  CALL   07A0
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
1FDA:  MOVLW  01
1FDC:  MOVWF  xB1
1FDE:  MOVLW  03
1FE0:  MOVWF  xB2
1FE2:  CALL   073E
....................             lcd_putc(t[1]); 
1FE6:  MOVFF  31,B0
1FEA:  CALL   07A0
....................           } 
....................          
....................         if(Flecha==4) 
1FEE:  MOVF   1D,W
1FF0:  SUBLW  04
1FF2:  BNZ   201C
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
1FF4:  MOVLW  01
1FF6:  MOVWF  xB1
1FF8:  MOVLW  02
1FFA:  MOVWF  xB2
1FFC:  CALL   073E
....................             lcd_putc(t[1]); 
2000:  MOVFF  31,B0
2004:  CALL   07A0
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2008:  MOVLW  01
200A:  MOVWF  xB1
200C:  MOVLW  03
200E:  MOVWF  xB2
2010:  CALL   073E
....................             lcd_putc(t[1]); 
2014:  MOVFF  31,B0
2018:  CALL   07A0
....................           } 
....................          
....................         if(Flecha==3) 
201C:  MOVF   1D,W
201E:  SUBLW  03
2020:  BNZ   204A
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2022:  MOVLW  01
2024:  MOVWF  xB1
2026:  MOVLW  04
2028:  MOVWF  xB2
202A:  CALL   073E
....................             lcd_putc(t[1]); 
202E:  MOVFF  31,B0
2032:  CALL   07A0
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2036:  MOVLW  01
2038:  MOVWF  xB1
203A:  MOVLW  02
203C:  MOVWF  xB2
203E:  CALL   073E
....................             lcd_putc(t[1]); 
2042:  MOVFF  31,B0
2046:  CALL   07A0
....................           } 
....................  
....................        if(RIGHT)// Si oprime derecha 
204A:  BSF    F96.1
204C:  BTFSS  F84.1
204E:  BRA    2086
....................        { 
....................          if(Flanco1 == 0) 
2050:  BTFSC  17.4
2052:  BRA    2084
....................          { 
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
2054:  BSF    17.4
2056:  MOVFF  1F,19
205A:  MOVLW  03
205C:  MOVWF  1D
205E:  MOVLW  02
2060:  MOVWF  x9F
2062:  MOVLW  96
2064:  MOVWF  xB6
2066:  CALL   05CE
206A:  DECFSZ x9F,F
206C:  BRA    2062
206E:  MOVLW  0C
2070:  MOVWF  xB0
2072:  CALL   07A0
....................             if(Menu==6) 
2076:  MOVF   19,W
2078:  SUBLW  06
207A:  BNZ   2084
....................             { 
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
207C:  CLRF   33
207E:  CLRF   34
2080:  CLRF   35
2082:  CLRF   36
....................             } 
....................          } 
....................        } 
....................        else 
2084:  BRA    2088
....................        { 
....................          Flanco1 = 0; 
2086:  BCF    17.4
....................        } 
....................              
....................        if(LEFT) 
2088:  BSF    F96.2
208A:  BTFSS  F84.2
208C:  BRA    20AA
....................        { 
....................          Menu=100;printf(lcd_putc,"\f");delay_ms(500); 
208E:  MOVLW  64
2090:  MOVWF  19
2092:  MOVLW  0C
2094:  MOVWF  xB0
2096:  CALL   07A0
209A:  MOVLW  02
209C:  MOVWF  x9F
209E:  MOVLW  FA
20A0:  MOVWF  xB6
20A2:  CALL   05CE
20A6:  DECFSZ x9F,F
20A8:  BRA    209E
....................        } 
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
20AA:  MOVF   19,W
20AC:  SUBLW  02
20AE:  BTFSS  FD8.2
20B0:  BRA    22E4
....................     
....................    lcd_gotoxy(1,1); 
20B2:  MOVLW  01
20B4:  MOVWF  xB1
20B6:  MOVWF  xB2
20B8:  CALL   073E
....................    printf(lcd_putc,"    Temporizador     "); 
20BC:  MOVLW  96
20BE:  MOVWF  FF6
20C0:  MOVLW  02
20C2:  MOVWF  FF7
20C4:  CALL   07FE
....................    lcd_gotoxy(1,2); 
20C8:  MOVLW  01
20CA:  MOVWF  xB1
20CC:  MOVLW  02
20CE:  MOVWF  xB2
20D0:  CALL   073E
....................    printf(lcd_putc,"       Luz UV        "); 
20D4:  MOVLW  AC
20D6:  MOVWF  FF6
20D8:  MOVLW  02
20DA:  MOVWF  FF7
20DC:  CALL   07FE
....................    lcd_gotoxy(6,3); 
20E0:  MOVLW  06
20E2:  MOVWF  xB1
20E4:  MOVLW  03
20E6:  MOVWF  xB2
20E8:  CALL   073E
....................    printf(lcd_putc,"%02u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
20EC:  MOVFF  26,9F
20F0:  MOVLW  01
20F2:  MOVWF  xA0
20F4:  CALL   0994
20F8:  MOVLW  3A
20FA:  MOVWF  xB0
20FC:  CALL   07A0
2100:  MOVFF  27,9F
2104:  MOVLW  01
2106:  MOVWF  xA0
2108:  CALL   0994
210C:  MOVLW  CB
210E:  MOVWF  FF6
2110:  MOVLW  02
2112:  MOVWF  FF7
2114:  MOVLW  08
2116:  MOVWF  xA3
2118:  CALL   081E
....................     
....................    lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
211C:  MOVLW  06
211E:  ADDWF  2B,W
2120:  MOVWF  x9F
2122:  MOVWF  xB1
2124:  MOVLW  04
2126:  MOVWF  xB2
2128:  CALL   073E
....................    lcd_putc(t[2]); 
212C:  MOVFF  32,B0
2130:  CALL   07A0
....................     
....................    if(UP) 
2134:  BSF    F92.5
2136:  BTFSS  F80.5
2138:  BRA    2174
....................    { 
....................       if(unidad2==1) 
213A:  DECFSZ 2B,W
213C:  BRA    2156
....................       { 
....................          if(tempo_minutos_pro<61) 
213E:  MOVF   26,W
2140:  SUBLW  3C
2142:  BNC   2156
....................          { 
....................             tempo_minutos_pro++;delay_ms(300); 
2144:  INCF   26,F
2146:  MOVLW  02
2148:  MOVWF  x9F
214A:  MOVLW  96
214C:  MOVWF  xB6
214E:  CALL   05CE
2152:  DECFSZ x9F,F
2154:  BRA    214A
....................          } 
....................       } 
....................        
....................       if(unidad2==3) 
2156:  MOVF   2B,W
2158:  SUBLW  03
215A:  BNZ   2174
....................       { 
....................          if(tempo_segundos_pro<60) 
215C:  MOVF   27,W
215E:  SUBLW  3B
2160:  BNC   2174
....................          { 
....................             tempo_segundos_pro++;delay_ms(300); 
2162:  INCF   27,F
2164:  MOVLW  02
2166:  MOVWF  x9F
2168:  MOVLW  96
216A:  MOVWF  xB6
216C:  CALL   05CE
2170:  DECFSZ x9F,F
2172:  BRA    2168
....................          } 
....................       } 
....................    } 
....................     
....................    if(DOWN) 
2174:  BSF    F96.0
2176:  BTFSS  F84.0
2178:  BRA    21E4
....................    { 
....................       if(unidad2==1) 
217A:  DECFSZ 2B,W
217C:  BRA    21AE
....................       { 
....................          if(tempo_minutos_pro>0) 
217E:  MOVF   26,F
2180:  BZ    2194
....................          { 
....................             tempo_minutos_pro--;delay_ms(300); 
2182:  DECF   26,F
2184:  MOVLW  02
2186:  MOVWF  x9F
2188:  MOVLW  96
218A:  MOVWF  xB6
218C:  CALL   05CE
2190:  DECFSZ x9F,F
2192:  BRA    2188
....................          } 
....................           
....................          if(tempo_minutos_pro>60) 
2194:  MOVF   26,W
2196:  SUBLW  3C
2198:  BC    21AE
....................          { 
....................             tempo_minutos_pro=60;delay_ms(300); 
219A:  MOVLW  3C
219C:  MOVWF  26
219E:  MOVLW  02
21A0:  MOVWF  x9F
21A2:  MOVLW  96
21A4:  MOVWF  xB6
21A6:  CALL   05CE
21AA:  DECFSZ x9F,F
21AC:  BRA    21A2
....................          } 
....................       } 
....................        
....................       if(unidad2==3) 
21AE:  MOVF   2B,W
21B0:  SUBLW  03
21B2:  BNZ   21E4
....................       { 
....................          if(tempo_segundos_pro>0) 
21B4:  MOVF   27,F
21B6:  BZ    21CA
....................          { 
....................             tempo_segundos_pro--;delay_ms(300); 
21B8:  DECF   27,F
21BA:  MOVLW  02
21BC:  MOVWF  x9F
21BE:  MOVLW  96
21C0:  MOVWF  xB6
21C2:  CALL   05CE
21C6:  DECFSZ x9F,F
21C8:  BRA    21BE
....................          } 
....................           
....................          if(tempo_segundos_pro>60) 
21CA:  MOVF   27,W
21CC:  SUBLW  3C
21CE:  BC    21E4
....................          { 
....................             tempo_segundos_pro=60;delay_ms(300); 
21D0:  MOVLW  3C
21D2:  MOVWF  27
21D4:  MOVLW  02
21D6:  MOVWF  x9F
21D8:  MOVLW  96
21DA:  MOVWF  xB6
21DC:  CALL   05CE
21E0:  DECFSZ x9F,F
21E2:  BRA    21D8
....................          } 
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
21E4:  BSF    F96.1
21E6:  BTFSS  F84.1
21E8:  BRA    2216
....................    { 
....................       if(unidad2==1) 
21EA:  DECFSZ 2B,W
21EC:  BRA    21F4
....................       { 
....................          unidad2=3; 
21EE:  MOVLW  03
21F0:  MOVWF  2B
....................       } 
....................       else 
21F2:  BRA    21FE
....................       { 
....................          if(unidad2==3) 
21F4:  MOVF   2B,W
21F6:  SUBLW  03
21F8:  BNZ   21FE
....................          { 
....................             unidad2=1; 
21FA:  MOVLW  01
21FC:  MOVWF  2B
....................          } 
....................       } 
....................       delay_ms(500); 
21FE:  MOVLW  02
2200:  MOVWF  x9F
2202:  MOVLW  FA
2204:  MOVWF  xB6
2206:  CALL   05CE
220A:  DECFSZ x9F,F
220C:  BRA    2202
....................       printf(lcd_putc,"\f"); 
220E:  MOVLW  0C
2210:  MOVWF  xB0
2212:  CALL   07A0
....................    } 
....................     
....................    if(LEFT) 
2216:  BSF    F96.2
2218:  BTFSS  F84.2
221A:  BRA    22E4
....................    { 
....................       delay_ms(200); 
221C:  MOVLW  C8
221E:  MOVWF  xB6
2220:  CALL   05CE
....................       printf(lcd_putc,"\f"); 
2224:  MOVLW  0C
2226:  MOVWF  xB0
2228:  CALL   07A0
....................       lcd_gotoxy(1,2); 
222C:  MOVLW  01
222E:  MOVWF  xB1
2230:  MOVLW  02
2232:  MOVWF  xB2
2234:  CALL   073E
....................       printf(lcd_putc,"Tiempo Almacenado"); 
2238:  MOVLW  D4
223A:  MOVWF  FF6
223C:  MOVLW  02
223E:  MOVWF  FF7
2240:  CALL   07FE
....................       lcd_gotoxy(1,3); 
2244:  MOVLW  01
2246:  MOVWF  xB1
2248:  MOVLW  03
224A:  MOVWF  xB2
224C:  CALL   073E
....................       printf(lcd_putc,"  Correctamente  "); 
2250:  MOVLW  E6
2252:  MOVWF  FF6
2254:  MOVLW  02
2256:  MOVWF  FF7
2258:  CALL   07FE
....................       write_eeprom(20,tempo_minutos_pro);write_eeprom(21,tempo_segundos_pro); 
225C:  MOVLW  14
225E:  MOVWF  FA9
2260:  MOVFF  26,FA8
2264:  BCF    FA6.6
2266:  BCF    FA6.7
2268:  BSF    FA6.2
226A:  MOVF   FF2,W
226C:  MOVWF  00
226E:  BCF    FF2.7
2270:  MOVLB  F
2272:  MOVLW  55
2274:  MOVWF  FA7
2276:  MOVLW  AA
2278:  MOVWF  FA7
227A:  BSF    FA6.1
227C:  BTFSC  FA6.1
227E:  BRA    227C
2280:  BCF    FA6.2
2282:  MOVF   00,W
2284:  IORWF  FF2,F
2286:  MOVLW  15
2288:  MOVWF  FA9
228A:  MOVFF  27,FA8
228E:  BCF    FA6.6
2290:  BCF    FA6.7
2292:  BSF    FA6.2
2294:  MOVF   FF2,W
2296:  MOVWF  00
2298:  BCF    FF2.7
229A:  MOVLW  55
229C:  MOVWF  FA7
229E:  MOVLW  AA
22A0:  MOVWF  FA7
22A2:  BSF    FA6.1
22A4:  BTFSC  FA6.1
22A6:  BRA    22A4
22A8:  BCF    FA6.2
22AA:  MOVF   00,W
22AC:  IORWF  FF2,F
....................       tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
22AE:  MOVFF  26,24
22B2:  MOVFF  27,25
....................       delay_ms(700); 
22B6:  MOVLW  04
22B8:  MOVLB  0
22BA:  MOVWF  x9F
22BC:  MOVLW  AF
22BE:  MOVWF  xB6
22C0:  CALL   05CE
22C4:  DECFSZ x9F,F
22C6:  BRA    22BC
....................       delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
22C8:  MOVLW  1E
22CA:  MOVWF  xB6
22CC:  CALL   05CE
22D0:  MOVLW  01
22D2:  MOVWF  19
22D4:  CLRF   2E
22D6:  MOVLW  02
22D8:  MOVWF  1D
22DA:  MOVWF  1F
22DC:  MOVLW  0C
22DE:  MOVWF  xB0
22E0:  CALL   07A0
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................    
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de estado de Motor Ventilador 
22E4:  MOVF   19,W
22E6:  SUBLW  03
22E8:  BTFSS  FD8.2
22EA:  BRA    24B6
....................    lcd_gotoxy(1,1); 
22EC:  MOVLW  01
22EE:  MOVWF  xB1
22F0:  MOVWF  xB2
22F2:  CALL   073E
....................    printf(lcd_putc,"Seleccione Velocidad"); 
22F6:  MOVLW  F8
22F8:  MOVWF  FF6
22FA:  MOVLW  02
22FC:  MOVWF  FF7
22FE:  CALL   07FE
....................    lcd_gotoxy(1,2); 
2302:  MOVLW  01
2304:  MOVWF  xB1
2306:  MOVLW  02
2308:  MOVWF  xB2
230A:  CALL   073E
....................    printf(lcd_putc,"    de Ventilador   "); 
230E:  MOVLW  0E
2310:  MOVWF  FF6
2312:  MOVLW  03
2314:  MOVWF  FF7
2316:  CALL   07FE
....................    lcd_gotoxy(8,3); 
231A:  MOVLW  08
231C:  MOVWF  xB1
231E:  MOVLW  03
2320:  MOVWF  xB2
2322:  CALL   073E
....................    printf(lcd_putc,"%i ",Velocidad); 
2326:  MOVFF  2F,9F
232A:  MOVLW  1F
232C:  MOVWF  xA0
232E:  CALL   0864
2332:  MOVLW  20
2334:  MOVWF  xB0
2336:  CALL   07A0
....................  
....................    if(UP)//Si oprime hacia arriba 
233A:  BSF    F92.5
233C:  BTFSS  F80.5
233E:  BRA    2352
....................       {  if(Flanco == 0)  
2340:  BTFSC  17.3
2342:  BRA    2350
....................             {Velocidad++;Flanco = 1;delay_ms(30);}} 
2344:  INCF   2F,F
2346:  BSF    17.3
2348:  MOVLW  1E
234A:  MOVWF  xB6
234C:  CALL   05CE
....................          else 
2350:  BRA    2354
....................             {Flanco = 0;} 
2352:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2354:  BSF    F96.0
2356:  BTFSS  F84.0
2358:  BRA    236C
....................       {  if(Flanco2 == 0)  
235A:  BTFSC  17.5
235C:  BRA    236A
....................             {Velocidad--;Flanco2 = 1;delay_ms(30);}} 
235E:  DECF   2F,F
2360:  BSF    17.5
2362:  MOVLW  1E
2364:  MOVWF  xB6
2366:  CALL   05CE
....................          else 
236A:  BRA    236E
....................             {Flanco2 = 0;} 
236C:  BCF    17.5
....................        
....................              
....................       if(LEFT)//Si oprime Izquierda 
236E:  BSF    F96.2
2370:  BTFSS  F84.2
2372:  BRA    2398
....................       {  if(Flanco3 == 0)  
2374:  BTFSC  17.6
2376:  BRA    2396
....................             {Flecha=2;Flecha2=2;Flanco3 = 1;Menu=1; paso=0;delay_ms(500);}} 
2378:  MOVLW  02
237A:  MOVWF  1D
237C:  MOVWF  1F
237E:  BSF    17.6
2380:  MOVLW  01
2382:  MOVWF  19
2384:  CLRF   2E
2386:  MOVLW  02
2388:  MOVWF  x9F
238A:  MOVLW  FA
238C:  MOVWF  xB6
238E:  CALL   05CE
2392:  DECFSZ x9F,F
2394:  BRA    238A
....................          else 
2396:  BRA    239A
....................             {Flanco3 = 0;} 
2398:  BCF    17.6
....................          if(Velocidad<1) 
239A:  BTFSC  2F.7
239C:  BRA    23A4
239E:  MOVF   2F,W
23A0:  SUBLW  00
23A2:  BNC   23A8
....................             {Velocidad=4;} 
23A4:  MOVLW  04
23A6:  MOVWF  2F
....................          if(Velocidad>4) 
23A8:  BTFSC  2F.7
23AA:  BRA    23B6
23AC:  MOVF   2F,W
23AE:  SUBLW  04
23B0:  BC    23B6
....................             {Velocidad=1;}     
23B2:  MOVLW  01
23B4:  MOVWF  2F
....................                      
....................       if(RIGHT)// Si oprime Derecha 
23B6:  BSF    F96.1
23B8:  BTFSS  F84.1
23BA:  BRA    24A0
....................       {  if(Flanco1 == 0)  
23BC:  BTFSC  17.4
23BE:  BRA    249E
....................             {Flanco1 = 1;Menu=1;paso=0; write_eeprom(5,Velocidad); 
23C0:  BSF    17.4
23C2:  MOVLW  01
23C4:  MOVWF  19
23C6:  CLRF   2E
23C8:  MOVLW  05
23CA:  MOVWF  FA9
23CC:  MOVFF  2F,FA8
23D0:  BCF    FA6.6
23D2:  BCF    FA6.7
23D4:  BSF    FA6.2
23D6:  MOVF   FF2,W
23D8:  MOVWF  00
23DA:  BCF    FF2.7
23DC:  MOVLB  F
23DE:  MOVLW  55
23E0:  MOVWF  FA7
23E2:  MOVLW  AA
23E4:  MOVWF  FA7
23E6:  BSF    FA6.1
23E8:  BTFSC  FA6.1
23EA:  BRA    23E8
23EC:  BCF    FA6.2
23EE:  MOVF   00,W
23F0:  IORWF  FF2,F
....................                 
....................              if(estadomv==1) 
23F2:  BTFSS  17.2
23F4:  BRA    2400
....................                {velocidades(Velocidad);} 
23F6:  MOVFF  2F,A1
23FA:  MOVLB  0
23FC:  CALL   09FA
....................                 
....................                lcd_gotoxy(1,1); 
2400:  MOVLW  01
2402:  MOVLB  0
2404:  MOVWF  xB1
2406:  MOVWF  xB2
2408:  CALL   073E
....................                printf(lcd_putc,"                    "); 
240C:  MOVLW  24
240E:  MOVWF  FF6
2410:  MOVLW  03
2412:  MOVWF  FF7
2414:  CALL   07FE
....................                lcd_gotoxy(1,2); 
2418:  MOVLW  01
241A:  MOVWF  xB1
241C:  MOVLW  02
241E:  MOVWF  xB2
2420:  CALL   073E
....................                printf(lcd_putc,"   Ha seleccionado  "); 
2424:  MOVLW  3A
2426:  MOVWF  FF6
2428:  MOVLW  03
242A:  MOVWF  FF7
242C:  CALL   07FE
....................                lcd_gotoxy(1,3); 
2430:  MOVLW  01
2432:  MOVWF  xB1
2434:  MOVLW  03
2436:  MOVWF  xB2
2438:  CALL   073E
....................                printf(lcd_putc,"  la velocidad  %i  ",Velocidad); 
243C:  MOVLW  50
243E:  MOVWF  FF6
2440:  MOVLW  03
2442:  MOVWF  FF7
2444:  MOVLW  10
2446:  MOVWF  xA3
2448:  CALL   081E
244C:  MOVFF  2F,9F
2450:  MOVLW  1F
2452:  MOVWF  xA0
2454:  CALL   0864
2458:  MOVLW  20
245A:  MOVWF  xB0
245C:  CALL   07A0
2460:  MOVLW  20
2462:  MOVWF  xB0
2464:  CALL   07A0
....................                lcd_gotoxy(1,4); 
2468:  MOVLW  01
246A:  MOVWF  xB1
246C:  MOVLW  04
246E:  MOVWF  xB2
2470:  CALL   073E
....................                printf(lcd_putc,"                    "); 
2474:  MOVLW  66
2476:  MOVWF  FF6
2478:  MOVLW  03
247A:  MOVWF  FF7
247C:  CALL   07FE
....................               
....................             delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
2480:  MOVLW  04
2482:  MOVWF  x9F
2484:  MOVLW  FA
2486:  MOVWF  xB6
2488:  CALL   05CE
248C:  DECFSZ x9F,F
248E:  BRA    2484
2490:  MOVLW  02
2492:  MOVWF  1D
2494:  MOVWF  1F
2496:  MOVLW  0C
2498:  MOVWF  xB0
249A:  CALL   07A0
....................          else 
249E:  BRA    24A2
....................             {Flanco1 = 0;}    
24A0:  BCF    17.4
....................  
....................         lcd_gotoxy(6,Flecha);// Para mostrar la flecha de seleccion 
24A2:  MOVLW  06
24A4:  MOVWF  xB1
24A6:  MOVFF  1D,B2
24AA:  CALL   073E
....................         lcd_putc(t[0]); 
24AE:  MOVFF  30,B0
24B2:  CALL   07A0
....................          
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu para Cambio de Contraseña 
24B6:  MOVF   19,W
24B8:  SUBLW  04
24BA:  BTFSS  FD8.2
24BC:  BRA    27B6
....................    lcd_gotoxy(1,1); 
24BE:  MOVLW  01
24C0:  MOVWF  xB1
24C2:  MOVWF  xB2
24C4:  CALL   073E
....................    printf(lcd_putc,"      Ingrese       "); 
24C8:  MOVLW  7C
24CA:  MOVWF  FF6
24CC:  MOVLW  03
24CE:  MOVWF  FF7
24D0:  CALL   07FE
....................    lcd_gotoxy(1,2); 
24D4:  MOVLW  01
24D6:  MOVWF  xB1
24D8:  MOVLW  02
24DA:  MOVWF  xB2
24DC:  CALL   073E
....................    printf(lcd_putc," Contraseña Actual  "); 
24E0:  MOVLW  92
24E2:  MOVWF  FF6
24E4:  MOVLW  03
24E6:  MOVWF  FF7
24E8:  CALL   07FE
....................    lcd_gotoxy(1,3); 
24EC:  MOVLW  01
24EE:  MOVWF  xB1
24F0:  MOVLW  03
24F2:  MOVWF  xB2
24F4:  CALL   073E
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
24F8:  MOVLW  A8
24FA:  MOVWF  FF6
24FC:  MOVLW  03
24FE:  MOVWF  FF7
2500:  MOVLW  0A
2502:  MOVWF  xA3
2504:  CALL   081E
2508:  MOVFF  33,9F
250C:  MOVLW  1F
250E:  MOVWF  xA0
2510:  CALL   0864
2514:  MOVFF  34,9F
2518:  MOVLW  1F
251A:  MOVWF  xA0
251C:  CALL   0864
2520:  MOVFF  35,9F
2524:  MOVLW  1F
2526:  MOVWF  xA0
2528:  CALL   0864
252C:  MOVFF  36,9F
2530:  MOVLW  1F
2532:  MOVWF  xA0
2534:  CALL   0864
2538:  MOVLW  20
253A:  MOVWF  xB0
253C:  CALL   07A0
2540:  MOVLW  20
2542:  MOVWF  xB0
2544:  CALL   07A0
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2548:  BSF    F92.5
254A:  BTFSS  F80.5
254C:  BRA    2570
....................       {  if(Flanco == 0)  
254E:  BTFSC  17.3
2550:  BRA    256E
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2552:  MOVLW  0B
2554:  SUBWF  1C,W
2556:  CLRF   03
2558:  ADDLW  33
255A:  MOVWF  FE9
255C:  MOVLW  00
255E:  ADDWFC 03,W
2560:  MOVWF  FEA
2562:  INCF   FEF,F
2564:  BSF    17.3
2566:  MOVLW  1E
2568:  MOVWF  xB6
256A:  CALL   05CE
....................          else 
256E:  BRA    2572
....................             {Flanco = 0;} 
2570:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2572:  BSF    F96.0
2574:  BTFSS  F84.0
2576:  BRA    259A
....................       {  if(Flanco2 == 0)  
2578:  BTFSC  17.5
257A:  BRA    2598
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
257C:  MOVLW  0B
257E:  SUBWF  1C,W
2580:  CLRF   03
2582:  ADDLW  33
2584:  MOVWF  FE9
2586:  MOVLW  00
2588:  ADDWFC 03,W
258A:  MOVWF  FEA
258C:  DECF   FEF,F
258E:  BSF    17.5
2590:  MOVLW  1E
2592:  MOVWF  xB6
2594:  CALL   05CE
....................          else 
2598:  BRA    259C
....................             {Flanco2 = 0;} 
259A:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime derecha 
259C:  BSF    F96.1
259E:  BTFSS  F84.1
25A0:  BRA    25BC
....................       {  if(Flanco1 == 0)  
25A2:  BTFSC  17.4
25A4:  BRA    25BA
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
25A6:  BSF    17.4
25A8:  INCF   1C,F
25AA:  MOVLW  1E
25AC:  MOVWF  xB6
25AE:  CALL   05CE
25B2:  MOVLW  0C
25B4:  MOVWF  xB0
25B6:  CALL   07A0
....................          else 
25BA:  BRA    25BE
....................             {Flanco1 = 0;}    
25BC:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
25BE:  BSF    F96.2
25C0:  BTFSS  F84.2
25C2:  BRA    25DE
....................       {  if(Flanco3 == 0)  
25C4:  BTFSC  17.6
25C6:  BRA    25DC
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
25C8:  BSF    17.6
25CA:  DECF   1C,F
25CC:  MOVLW  1E
25CE:  MOVWF  xB6
25D0:  CALL   05CE
25D4:  MOVLW  0C
25D6:  MOVWF  xB0
25D8:  CALL   07A0
....................          else 
25DC:  BRA    25E0
....................             {Flanco3 = 0;}     
25DE:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
25E0:  MOVLW  0B
25E2:  SUBWF  1C,W
25E4:  CLRF   03
25E6:  ADDLW  33
25E8:  MOVWF  FE9
25EA:  MOVLW  00
25EC:  ADDWFC 03,W
25EE:  MOVWF  FEA
25F0:  BTFSC  FEF.7
25F2:  BRA    25F6
25F4:  BRA    260A
....................        {clave[unidad-11]=9;} 
25F6:  MOVLW  0B
25F8:  SUBWF  1C,W
25FA:  CLRF   03
25FC:  ADDLW  33
25FE:  MOVWF  FE9
2600:  MOVLW  00
2602:  ADDWFC 03,W
2604:  MOVWF  FEA
2606:  MOVLW  09
2608:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
260A:  MOVLW  0B
260C:  SUBWF  1C,W
260E:  CLRF   03
2610:  ADDLW  33
2612:  MOVWF  FE9
2614:  MOVLW  00
2616:  ADDWFC 03,W
2618:  MOVWF  FEA
261A:  BTFSC  FEF.7
261C:  BRA    2636
261E:  MOVF   FEF,W
2620:  SUBLW  09
2622:  BC    2636
....................        {clave[unidad-11]=0;} 
2624:  MOVLW  0B
2626:  SUBWF  1C,W
2628:  CLRF   03
262A:  ADDLW  33
262C:  MOVWF  FE9
262E:  MOVLW  00
2630:  ADDWFC 03,W
2632:  MOVWF  FEA
2634:  CLRF   FEF
....................        if(unidad<11) 
2636:  MOVF   1C,W
2638:  SUBLW  0A
263A:  BNC   265C
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);} 
263C:  MOVLW  01
263E:  MOVWF  19
2640:  CLRF   2E
2642:  MOVLW  02
2644:  MOVWF  1D
2646:  MOVWF  1F
2648:  MOVLW  0B
264A:  MOVWF  1C
264C:  MOVLW  02
264E:  MOVWF  x9F
2650:  MOVLW  FA
2652:  MOVWF  xB6
2654:  CALL   05CE
2658:  DECFSZ x9F,F
265A:  BRA    2650
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
265C:  MOVFF  1C,B1
2660:  MOVLW  04
2662:  MOVWF  xB2
2664:  CALL   073E
....................        lcd_putc(t[2]); 
2668:  MOVFF  32,B0
266C:  CALL   07A0
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2670:  MOVF   1C,W
2672:  SUBLW  0E
2674:  BTFSC  FD8.0
2676:  BRA    2792
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
2678:  MOVF   37,W
267A:  SUBWF  33,W
267C:  BNZ   2718
267E:  MOVF   38,W
2680:  SUBWF  34,W
2682:  BNZ   2718
2684:  MOVF   39,W
2686:  SUBWF  35,W
2688:  BNZ   2718
268A:  MOVF   3A,W
268C:  SUBWF  36,W
268E:  BNZ   2718
....................             {lcd_gotoxy(1,1); 
2690:  MOVLW  01
2692:  MOVWF  xB1
2694:  MOVWF  xB2
2696:  CALL   073E
....................             printf(lcd_putc,"                    "); 
269A:  MOVLW  BE
269C:  MOVWF  FF6
269E:  MOVLW  03
26A0:  MOVWF  FF7
26A2:  CALL   07FE
....................             lcd_gotoxy(1,2); 
26A6:  MOVLW  01
26A8:  MOVWF  xB1
26AA:  MOVLW  02
26AC:  MOVWF  xB2
26AE:  CALL   073E
....................             printf(lcd_putc,"     Contraseña     "); 
26B2:  MOVLW  D4
26B4:  MOVWF  FF6
26B6:  MOVLW  03
26B8:  MOVWF  FF7
26BA:  CALL   07FE
....................             lcd_gotoxy(1,3); 
26BE:  MOVLW  01
26C0:  MOVWF  xB1
26C2:  MOVLW  03
26C4:  MOVWF  xB2
26C6:  CALL   073E
....................             printf(lcd_putc,"      Correcta      "); 
26CA:  MOVLW  EA
26CC:  MOVWF  FF6
26CE:  MOVLW  03
26D0:  MOVWF  FF7
26D2:  CALL   07FE
....................             lcd_gotoxy(1,4); 
26D6:  MOVLW  01
26D8:  MOVWF  xB1
26DA:  MOVLW  04
26DC:  MOVWF  xB2
26DE:  CALL   073E
....................             printf(lcd_putc,"                    "); 
26E2:  MOVLW  00
26E4:  MOVWF  FF6
26E6:  MOVLW  04
26E8:  MOVWF  FF7
26EA:  CALL   07FE
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
26EE:  MOVLW  02
26F0:  MOVWF  x9F
26F2:  MOVLW  FA
26F4:  MOVWF  xB6
26F6:  CALL   05CE
26FA:  DECFSZ x9F,F
26FC:  BRA    26F2
26FE:  MOVLW  3D
2700:  MOVWF  19
2702:  MOVLW  0B
2704:  MOVWF  1C
2706:  MOVLW  0C
2708:  MOVWF  xB0
270A:  CALL   07A0
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
270E:  CLRF   33
2710:  CLRF   34
2712:  CLRF   35
2714:  CLRF   36
....................          else 
2716:  BRA    2792
....................          {lcd_gotoxy(1,1); 
2718:  MOVLW  01
271A:  MOVWF  xB1
271C:  MOVWF  xB2
271E:  CALL   073E
....................             printf(lcd_putc,"                    "); 
2722:  MOVLW  16
2724:  MOVWF  FF6
2726:  MOVLW  04
2728:  MOVWF  FF7
272A:  CALL   07FE
....................             lcd_gotoxy(1,2); 
272E:  MOVLW  01
2730:  MOVWF  xB1
2732:  MOVLW  02
2734:  MOVWF  xB2
2736:  CALL   073E
....................             printf(lcd_putc,"     Contraseña     "); 
273A:  MOVLW  2C
273C:  MOVWF  FF6
273E:  MOVLW  04
2740:  MOVWF  FF7
2742:  CALL   07FE
....................             lcd_gotoxy(1,3); 
2746:  MOVLW  01
2748:  MOVWF  xB1
274A:  MOVLW  03
274C:  MOVWF  xB2
274E:  CALL   073E
....................             printf(lcd_putc,"     Incorrecta     "); 
2752:  MOVLW  42
2754:  MOVWF  FF6
2756:  MOVLW  04
2758:  MOVWF  FF7
275A:  CALL   07FE
....................             lcd_gotoxy(1,4); 
275E:  MOVLW  01
2760:  MOVWF  xB1
2762:  MOVLW  04
2764:  MOVWF  xB2
2766:  CALL   073E
....................             printf(lcd_putc,"                    "); 
276A:  MOVLW  58
276C:  MOVWF  FF6
276E:  MOVLW  04
2770:  MOVWF  FF7
2772:  CALL   07FE
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
2776:  MOVLW  02
2778:  MOVWF  x9F
277A:  MOVLW  FA
277C:  MOVWF  xB6
277E:  CALL   05CE
2782:  DECFSZ x9F,F
2784:  BRA    277A
2786:  MOVLW  0B
2788:  MOVWF  1C
278A:  MOVLW  0C
278C:  MOVWF  xB0
278E:  CALL   07A0
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
2792:  MOVF   1C,W
2794:  SUBLW  0B
2796:  BC    27B6
2798:  MOVF   1C,W
279A:  SUBLW  0D
279C:  BNC   27B6
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
279E:  MOVLW  01
27A0:  SUBWF  1C,W
27A2:  MOVWF  x9F
27A4:  MOVWF  xB1
27A6:  MOVLW  04
27A8:  MOVWF  xB2
27AA:  CALL   073E
....................             lcd_putc(t[1]); 
27AE:  MOVFF  31,B0
27B2:  CALL   07A0
....................           } 
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
27B6:  MOVF   19,W
27B8:  SUBLW  3D
27BA:  BTFSS  FD8.2
27BC:  BRA    2ACC
....................    lcd_gotoxy(1,1); 
27BE:  MOVLW  01
27C0:  MOVWF  xB1
27C2:  MOVWF  xB2
27C4:  CALL   073E
....................    printf(lcd_putc,"     Ingrese        "); 
27C8:  MOVLW  6E
27CA:  MOVWF  FF6
27CC:  MOVLW  04
27CE:  MOVWF  FF7
27D0:  CALL   07FE
....................    lcd_gotoxy(1,2); 
27D4:  MOVLW  01
27D6:  MOVWF  xB1
27D8:  MOVLW  02
27DA:  MOVWF  xB2
27DC:  CALL   073E
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
27E0:  MOVLW  84
27E2:  MOVWF  FF6
27E4:  MOVLW  04
27E6:  MOVWF  FF7
27E8:  CALL   07FE
....................    lcd_gotoxy(1,3); 
27EC:  MOVLW  01
27EE:  MOVWF  xB1
27F0:  MOVLW  03
27F2:  MOVWF  xB2
27F4:  CALL   073E
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
27F8:  MOVLW  9A
27FA:  MOVWF  FF6
27FC:  MOVLW  04
27FE:  MOVWF  FF7
2800:  MOVLW  0A
2802:  MOVWF  xA3
2804:  CALL   081E
2808:  MOVFF  33,9F
280C:  MOVLW  1F
280E:  MOVWF  xA0
2810:  CALL   0864
2814:  MOVFF  34,9F
2818:  MOVLW  1F
281A:  MOVWF  xA0
281C:  CALL   0864
2820:  MOVFF  35,9F
2824:  MOVLW  1F
2826:  MOVWF  xA0
2828:  CALL   0864
282C:  MOVFF  36,9F
2830:  MOVLW  1F
2832:  MOVWF  xA0
2834:  CALL   0864
2838:  MOVLW  20
283A:  MOVWF  xB0
283C:  CALL   07A0
2840:  MOVLW  20
2842:  MOVWF  xB0
2844:  CALL   07A0
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2848:  BSF    F92.5
284A:  BTFSS  F80.5
284C:  BRA    2870
....................       {  if(Flanco == 0)  
284E:  BTFSC  17.3
2850:  BRA    286E
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2852:  MOVLW  0B
2854:  SUBWF  1C,W
2856:  CLRF   03
2858:  ADDLW  33
285A:  MOVWF  FE9
285C:  MOVLW  00
285E:  ADDWFC 03,W
2860:  MOVWF  FEA
2862:  INCF   FEF,F
2864:  BSF    17.3
2866:  MOVLW  1E
2868:  MOVWF  xB6
286A:  CALL   05CE
....................          else 
286E:  BRA    2872
....................             {Flanco = 0;} 
2870:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2872:  BSF    F96.0
2874:  BTFSS  F84.0
2876:  BRA    289A
....................       {  if(Flanco2 == 0)  
2878:  BTFSC  17.5
287A:  BRA    2898
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
287C:  MOVLW  0B
287E:  SUBWF  1C,W
2880:  CLRF   03
2882:  ADDLW  33
2884:  MOVWF  FE9
2886:  MOVLW  00
2888:  ADDWFC 03,W
288A:  MOVWF  FEA
288C:  DECF   FEF,F
288E:  BSF    17.5
2890:  MOVLW  1E
2892:  MOVWF  xB6
2894:  CALL   05CE
....................          else 
2898:  BRA    289C
....................             {Flanco2 = 0;} 
289A:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime Derecha 
289C:  BSF    F96.1
289E:  BTFSS  F84.1
28A0:  BRA    28BC
....................       {  if(Flanco1 == 0)  
28A2:  BTFSC  17.4
28A4:  BRA    28BA
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
28A6:  BSF    17.4
28A8:  INCF   1C,F
28AA:  MOVLW  1E
28AC:  MOVWF  xB6
28AE:  CALL   05CE
28B2:  MOVLW  0C
28B4:  MOVWF  xB0
28B6:  CALL   07A0
....................          else 
28BA:  BRA    28BE
....................             {Flanco1 = 0;}    
28BC:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
28BE:  BSF    F96.2
28C0:  BTFSS  F84.2
28C2:  BRA    28DE
....................       {  if(Flanco3 == 0)  
28C4:  BTFSC  17.6
28C6:  BRA    28DC
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
28C8:  BSF    17.6
28CA:  DECF   1C,F
28CC:  MOVLW  1E
28CE:  MOVWF  xB6
28D0:  CALL   05CE
28D4:  MOVLW  0C
28D6:  MOVWF  xB0
28D8:  CALL   07A0
....................          else 
28DC:  BRA    28E0
....................             {Flanco3 = 0;}     
28DE:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
28E0:  MOVLW  0B
28E2:  SUBWF  1C,W
28E4:  CLRF   03
28E6:  ADDLW  33
28E8:  MOVWF  FE9
28EA:  MOVLW  00
28EC:  ADDWFC 03,W
28EE:  MOVWF  FEA
28F0:  BTFSC  FEF.7
28F2:  BRA    28F6
28F4:  BRA    290A
....................        {clave[unidad-11]=9;} 
28F6:  MOVLW  0B
28F8:  SUBWF  1C,W
28FA:  CLRF   03
28FC:  ADDLW  33
28FE:  MOVWF  FE9
2900:  MOVLW  00
2902:  ADDWFC 03,W
2904:  MOVWF  FEA
2906:  MOVLW  09
2908:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
290A:  MOVLW  0B
290C:  SUBWF  1C,W
290E:  CLRF   03
2910:  ADDLW  33
2912:  MOVWF  FE9
2914:  MOVLW  00
2916:  ADDWFC 03,W
2918:  MOVWF  FEA
291A:  BTFSC  FEF.7
291C:  BRA    2936
291E:  MOVF   FEF,W
2920:  SUBLW  09
2922:  BC    2936
....................        {clave[unidad-11]=0;} 
2924:  MOVLW  0B
2926:  SUBWF  1C,W
2928:  CLRF   03
292A:  ADDLW  33
292C:  MOVWF  FE9
292E:  MOVLW  00
2930:  ADDWFC 03,W
2932:  MOVWF  FEA
2934:  CLRF   FEF
....................        if(unidad<11) 
2936:  MOVF   1C,W
2938:  SUBLW  0A
293A:  BNC   2944
....................        {Menu=5;unidad=11;} 
293C:  MOVLW  05
293E:  MOVWF  19
2940:  MOVLW  0B
2942:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2944:  MOVFF  1C,B1
2948:  MOVLW  04
294A:  MOVWF  xB2
294C:  CALL   073E
....................        lcd_putc(t[2]); 
2950:  MOVFF  32,B0
2954:  CALL   07A0
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
2958:  MOVF   1C,W
295A:  SUBLW  0E
295C:  BTFSC  FD8.0
295E:  BRA    2AA8
....................        { 
....................             lcd_gotoxy(1,1); 
2960:  MOVLW  01
2962:  MOVWF  xB1
2964:  MOVWF  xB2
2966:  CALL   073E
....................             printf(lcd_putc,"                    "); 
296A:  MOVLW  B0
296C:  MOVWF  FF6
296E:  MOVLW  04
2970:  MOVWF  FF7
2972:  CALL   07FE
....................             lcd_gotoxy(1,2); 
2976:  MOVLW  01
2978:  MOVWF  xB1
297A:  MOVLW  02
297C:  MOVWF  xB2
297E:  CALL   073E
....................             printf(lcd_putc,"     Contraseña     "); 
2982:  MOVLW  C6
2984:  MOVWF  FF6
2986:  MOVLW  04
2988:  MOVWF  FF7
298A:  CALL   07FE
....................             lcd_gotoxy(1,3); 
298E:  MOVLW  01
2990:  MOVWF  xB1
2992:  MOVLW  03
2994:  MOVWF  xB2
2996:  CALL   073E
....................             printf(lcd_putc,"     Almacenada     "); 
299A:  MOVLW  DC
299C:  MOVWF  FF6
299E:  MOVLW  04
29A0:  MOVWF  FF7
29A2:  CALL   07FE
....................             lcd_gotoxy(1,4); 
29A6:  MOVLW  01
29A8:  MOVWF  xB1
29AA:  MOVLW  04
29AC:  MOVWF  xB2
29AE:  CALL   073E
....................             printf(lcd_putc,"                    "); 
29B2:  MOVLW  F2
29B4:  MOVWF  FF6
29B6:  MOVLW  04
29B8:  MOVWF  FF7
29BA:  CALL   07FE
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
29BE:  CLRF   FA9
29C0:  MOVFF  33,FA8
29C4:  BCF    FA6.6
29C6:  BCF    FA6.7
29C8:  BSF    FA6.2
29CA:  MOVF   FF2,W
29CC:  MOVWF  00
29CE:  BCF    FF2.7
29D0:  MOVLB  F
29D2:  MOVLW  55
29D4:  MOVWF  FA7
29D6:  MOVLW  AA
29D8:  MOVWF  FA7
29DA:  BSF    FA6.1
29DC:  BTFSC  FA6.1
29DE:  BRA    29DC
29E0:  BCF    FA6.2
29E2:  MOVF   00,W
29E4:  IORWF  FF2,F
29E6:  MOVLW  14
29E8:  MOVLB  0
29EA:  MOVWF  xB6
29EC:  CALL   05CE
29F0:  MOVLW  01
29F2:  MOVWF  FA9
29F4:  MOVFF  34,FA8
29F8:  BCF    FA6.6
29FA:  BCF    FA6.7
29FC:  BSF    FA6.2
29FE:  MOVF   FF2,W
2A00:  MOVWF  00
2A02:  BCF    FF2.7
2A04:  MOVLB  F
2A06:  MOVLW  55
2A08:  MOVWF  FA7
2A0A:  MOVLW  AA
2A0C:  MOVWF  FA7
2A0E:  BSF    FA6.1
2A10:  BTFSC  FA6.1
2A12:  BRA    2A10
2A14:  BCF    FA6.2
2A16:  MOVF   00,W
2A18:  IORWF  FF2,F
2A1A:  MOVLW  14
2A1C:  MOVLB  0
2A1E:  MOVWF  xB6
2A20:  CALL   05CE
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
2A24:  MOVLW  02
2A26:  MOVWF  FA9
2A28:  MOVFF  35,FA8
2A2C:  BCF    FA6.6
2A2E:  BCF    FA6.7
2A30:  BSF    FA6.2
2A32:  MOVF   FF2,W
2A34:  MOVWF  00
2A36:  BCF    FF2.7
2A38:  MOVLB  F
2A3A:  MOVLW  55
2A3C:  MOVWF  FA7
2A3E:  MOVLW  AA
2A40:  MOVWF  FA7
2A42:  BSF    FA6.1
2A44:  BTFSC  FA6.1
2A46:  BRA    2A44
2A48:  BCF    FA6.2
2A4A:  MOVF   00,W
2A4C:  IORWF  FF2,F
2A4E:  MOVLW  14
2A50:  MOVLB  0
2A52:  MOVWF  xB6
2A54:  CALL   05CE
2A58:  MOVLW  03
2A5A:  MOVWF  FA9
2A5C:  MOVFF  36,FA8
2A60:  BCF    FA6.6
2A62:  BCF    FA6.7
2A64:  BSF    FA6.2
2A66:  MOVF   FF2,W
2A68:  MOVWF  00
2A6A:  BCF    FF2.7
2A6C:  MOVLB  F
2A6E:  MOVLW  55
2A70:  MOVWF  FA7
2A72:  MOVLW  AA
2A74:  MOVWF  FA7
2A76:  BSF    FA6.1
2A78:  BTFSC  FA6.1
2A7A:  BRA    2A78
2A7C:  BCF    FA6.2
2A7E:  MOVF   00,W
2A80:  IORWF  FF2,F
2A82:  MOVLW  14
2A84:  MOVLB  0
2A86:  MOVWF  xB6
2A88:  CALL   05CE
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2A8C:  MOVLW  02
2A8E:  MOVWF  x9F
2A90:  MOVLW  FA
2A92:  MOVWF  xB6
2A94:  CALL   05CE
2A98:  DECFSZ x9F,F
2A9A:  BRA    2A90
2A9C:  MOVLW  01
2A9E:  MOVWF  19
2AA0:  CLRF   2E
2AA2:  MOVLW  02
2AA4:  MOVWF  1D
2AA6:  MOVWF  1F
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
2AA8:  MOVF   1C,W
2AAA:  SUBLW  0B
2AAC:  BC    2ACC
2AAE:  MOVF   1C,W
2AB0:  SUBLW  0D
2AB2:  BNC   2ACC
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2AB4:  MOVLW  01
2AB6:  SUBWF  1C,W
2AB8:  MOVWF  x9F
2ABA:  MOVWF  xB1
2ABC:  MOVLW  04
2ABE:  MOVWF  xB2
2AC0:  CALL   073E
....................             lcd_putc(t[1]); 
2AC4:  MOVFF  31,B0
2AC8:  CALL   07A0
....................           } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de tiempo de trabajo de Luz UV 
2ACC:  MOVF   19,W
2ACE:  SUBLW  05
2AD0:  BNZ   2B44
....................    lcd_gotoxy(1,1); 
2AD2:  MOVLW  01
2AD4:  MOVWF  xB1
2AD6:  MOVWF  xB2
2AD8:  CALL   073E
....................    printf(lcd_putc,"  Duracion Actual   "); 
2ADC:  MOVLW  08
2ADE:  MOVWF  FF6
2AE0:  MOVLW  05
2AE2:  MOVWF  FF7
2AE4:  CALL   07FE
....................    lcd_gotoxy(1,2); 
2AE8:  MOVLW  01
2AEA:  MOVWF  xB1
2AEC:  MOVLW  02
2AEE:  MOVWF  xB2
2AF0:  CALL   073E
....................    printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2AF4:  MOVLW  1E
2AF6:  MOVWF  FF6
2AF8:  MOVLW  05
2AFA:  MOVWF  FF7
2AFC:  MOVLW  0B
2AFE:  MOVWF  xA3
2B00:  CALL   081E
2B04:  MOVLW  08
2B06:  MOVWF  FE9
2B08:  MOVFF  3E,A0
2B0C:  MOVFF  3D,9F
2B10:  GOTO   0A66
2B14:  MOVLW  20
2B16:  MOVWF  xB0
2B18:  CALL   07A0
2B1C:  MOVLW  20
2B1E:  MOVWF  xB0
2B20:  CALL   07A0
2B24:  MOVLW  20
2B26:  MOVWF  xB0
2B28:  CALL   07A0
....................    lcd_gotoxy(1,4); 
2B2C:  MOVLW  01
2B2E:  MOVWF  xB1
2B30:  MOVLW  04
2B32:  MOVWF  xB2
2B34:  CALL   073E
....................    printf(lcd_putc," RESET= Oprima ^ y > "); 
2B38:  MOVLW  32
2B3A:  MOVWF  FF6
2B3C:  MOVLW  05
2B3E:  MOVWF  FF7
2B40:  CALL   07FE
....................     
....................    } 
....................     
....................       if(UP && RIGHT)//Si oprime hacia arriba 
2B44:  BSF    F92.5
2B46:  BTFSS  F80.5
2B48:  BRA    2C3A
2B4A:  BSF    F96.1
2B4C:  BTFSS  F84.1
2B4E:  BRA    2C3A
....................       {   
....................          delay_ms(200); 
2B50:  MOVLW  C8
2B52:  MOVWF  xB6
2B54:  CALL   05CE
....................          printf(lcd_putc,"\f"); 
2B58:  MOVLW  0C
2B5A:  MOVWF  xB0
2B5C:  CALL   07A0
....................          lcd_gotoxy(1,2); 
2B60:  MOVLW  01
2B62:  MOVWF  xB1
2B64:  MOVLW  02
2B66:  MOVWF  xB2
2B68:  CALL   073E
....................          printf(lcd_putc," Reset de tiempo "); 
2B6C:  MOVLW  48
2B6E:  MOVWF  FF6
2B70:  MOVLW  05
2B72:  MOVWF  FF7
2B74:  CALL   07FE
....................          lcd_gotoxy(1,3); 
2B78:  MOVLW  01
2B7A:  MOVWF  xB1
2B7C:  MOVLW  03
2B7E:  MOVWF  xB2
2B80:  CALL   073E
....................          printf(lcd_putc,"     Exitoso     "); 
2B84:  MOVLW  5A
2B86:  MOVWF  FF6
2B88:  MOVLW  05
2B8A:  MOVWF  FF7
2B8C:  CALL   07FE
....................          write_eeprom(50,0);write_eeprom(51,0);write_eeprom(52,0); 
2B90:  MOVLW  32
2B92:  MOVWF  FA9
2B94:  CLRF   FA8
2B96:  BCF    FA6.6
2B98:  BCF    FA6.7
2B9A:  BSF    FA6.2
2B9C:  MOVF   FF2,W
2B9E:  MOVWF  00
2BA0:  BCF    FF2.7
2BA2:  MOVLB  F
2BA4:  MOVLW  55
2BA6:  MOVWF  FA7
2BA8:  MOVLW  AA
2BAA:  MOVWF  FA7
2BAC:  BSF    FA6.1
2BAE:  BTFSC  FA6.1
2BB0:  BRA    2BAE
2BB2:  BCF    FA6.2
2BB4:  MOVF   00,W
2BB6:  IORWF  FF2,F
2BB8:  MOVLW  33
2BBA:  MOVWF  FA9
2BBC:  CLRF   FA8
2BBE:  BCF    FA6.6
2BC0:  BCF    FA6.7
2BC2:  BSF    FA6.2
2BC4:  MOVF   FF2,W
2BC6:  MOVWF  00
2BC8:  BCF    FF2.7
2BCA:  MOVLW  55
2BCC:  MOVWF  FA7
2BCE:  MOVLW  AA
2BD0:  MOVWF  FA7
2BD2:  BSF    FA6.1
2BD4:  BTFSC  FA6.1
2BD6:  BRA    2BD4
2BD8:  BCF    FA6.2
2BDA:  MOVF   00,W
2BDC:  IORWF  FF2,F
2BDE:  MOVLW  34
2BE0:  MOVWF  FA9
2BE2:  CLRF   FA8
2BE4:  BCF    FA6.6
2BE6:  BCF    FA6.7
2BE8:  BSF    FA6.2
2BEA:  MOVF   FF2,W
2BEC:  MOVWF  00
2BEE:  BCF    FF2.7
2BF0:  MOVLW  55
2BF2:  MOVWF  FA7
2BF4:  MOVLW  AA
2BF6:  MOVWF  FA7
2BF8:  BSF    FA6.1
2BFA:  BTFSC  FA6.1
2BFC:  BRA    2BFA
2BFE:  BCF    FA6.2
2C00:  MOVF   00,W
2C02:  IORWF  FF2,F
....................          delay_ms(700); 
2C04:  MOVLW  04
2C06:  MOVLB  0
2C08:  MOVWF  x9F
2C0A:  MOVLW  AF
2C0C:  MOVWF  xB6
2C0E:  CALL   05CE
2C12:  DECFSZ x9F,F
2C14:  BRA    2C0A
....................          segundos=0;minutos=0;horas=0; 
2C16:  CLRF   22
2C18:  CLRF   23
2C1A:  CLRF   3E
2C1C:  CLRF   3D
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2C1E:  MOVLW  1E
2C20:  MOVWF  xB6
2C22:  CALL   05CE
2C26:  MOVLW  01
2C28:  MOVWF  19
2C2A:  CLRF   2E
2C2C:  MOVLW  02
2C2E:  MOVWF  1D
2C30:  MOVWF  1F
2C32:  MOVLW  0C
2C34:  MOVWF  xB0
2C36:  CALL   07A0
....................       } 
....................              
....................       if(LEFT)// Si oprime Izquierda 
2C3A:  BSF    F96.2
2C3C:  BTFSS  F84.2
2C3E:  BRA    2C6C
....................       { 
....................          if(Flanco3 == 0) 
2C40:  BTFSC  17.6
2C42:  BRA    2C6A
....................          { 
....................             Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2C44:  BSF    17.6
2C46:  MOVLW  02
2C48:  MOVWF  x9F
2C4A:  MOVLW  FA
2C4C:  MOVWF  xB6
2C4E:  CALL   05CE
2C52:  DECFSZ x9F,F
2C54:  BRA    2C4A
2C56:  MOVLW  01
2C58:  MOVWF  19
2C5A:  CLRF   2E
2C5C:  MOVLW  02
2C5E:  MOVWF  1D
2C60:  MOVWF  1F
2C62:  MOVLW  0C
2C64:  MOVWF  xB0
2C66:  CALL   07A0
....................          } 
....................       } 
....................       else 
2C6A:  BRA    2C6E
....................       { 
....................          Flanco3 = 0; 
2C6C:  BCF    17.6
....................       } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 100){ // Menu de seleccion de Estado de Luz UV 
2C6E:  MOVF   19,W
2C70:  SUBLW  64
2C72:  BTFSS  FD8.2
2C74:  BRA    3158
....................     
....................    if(Lectura==1) 
2C76:  BTFSS  18.0
2C78:  BRA    2C94
....................    { 
....................       Lectura=0; 
2C7A:  BCF    18.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
2C7C:  MOVLW  05
2C7E:  MOVWF  x9F
2C80:  GOTO   1046
2C84:  MOVFF  03,9E
2C88:  MOVFF  02,9D
2C8C:  MOVFF  01,9C
2C90:  MOVFF  00,9B
....................    } 
....................     
....................    lcd_gotoxy(1,1); 
2C94:  MOVLW  01
2C96:  MOVWF  xB1
2C98:  MOVWF  xB2
2C9A:  CALL   073E
....................    printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02)); 
2C9E:  MOVFF  9E,B6
2CA2:  MOVFF  9D,B5
2CA6:  MOVFF  9C,B4
2CAA:  MOVFF  9B,B3
2CAE:  MOVLW  D7
2CB0:  MOVWF  xBA
2CB2:  MOVLW  A3
2CB4:  MOVWF  xB9
2CB6:  CLRF   xB8
2CB8:  MOVLW  81
2CBA:  MOVWF  xB7
2CBC:  CALL   0B1A
2CC0:  MOVFF  00,9F
2CC4:  MOVFF  01,A0
2CC8:  MOVFF  02,A1
2CCC:  MOVFF  03,A2
2CD0:  MOVLW  6C
2CD2:  MOVWF  FF6
2CD4:  MOVLW  05
2CD6:  MOVWF  FF7
2CD8:  MOVLW  08
2CDA:  MOVWF  xA3
2CDC:  CALL   081E
2CE0:  MOVLW  02
2CE2:  MOVWF  FE9
2CE4:  MOVFF  A2,A6
2CE8:  MOVFF  A1,A5
2CEC:  MOVFF  A0,A4
2CF0:  MOVFF  9F,A3
2CF4:  MOVWF  xA7
2CF6:  GOTO   12F8
2CFA:  MOVLW  79
2CFC:  MOVWF  FF6
2CFE:  MOVLW  05
2D00:  MOVWF  FF7
2D02:  MOVLW  07
2D04:  MOVWF  xA3
2D06:  CALL   081E
....................    lcd_gotoxy(1,2); 
2D0A:  MOVLW  01
2D0C:  MOVWF  xB1
2D0E:  MOVLW  02
2D10:  MOVWF  xB2
2D12:  CALL   073E
....................    printf(lcd_putc,"Filtro:"); 
2D16:  MOVLW  82
2D18:  MOVWF  FF6
2D1A:  MOVLW  05
2D1C:  MOVWF  FF7
2D1E:  CALL   07FE
....................     
....................    Saturacion=(CaidaPresion/0.37)*11; 
2D22:  MOVFF  9E,B6
2D26:  MOVFF  9D,B5
2D2A:  MOVFF  9C,B4
2D2E:  MOVFF  9B,B3
2D32:  MOVLW  A4
2D34:  MOVWF  xBA
2D36:  MOVLW  70
2D38:  MOVWF  xB9
2D3A:  MOVLW  3D
2D3C:  MOVWF  xB8
2D3E:  MOVLW  7D
2D40:  MOVWF  xB7
2D42:  CALL   0C0C
2D46:  MOVFF  00,9F
2D4A:  MOVFF  01,A0
2D4E:  MOVFF  02,A1
2D52:  MOVFF  03,A2
2D56:  MOVFF  03,B6
2D5A:  MOVFF  02,B5
2D5E:  MOVFF  01,B4
2D62:  MOVFF  00,B3
2D66:  CLRF   xBA
2D68:  CLRF   xB9
2D6A:  MOVLW  30
2D6C:  MOVWF  xB8
2D6E:  MOVLW  82
2D70:  MOVWF  xB7
2D72:  CALL   0B1A
2D76:  MOVFF  03,9A
2D7A:  MOVFF  02,99
2D7E:  MOVFF  01,98
2D82:  MOVFF  00,97
....................    if(Saturacion>11) 
2D86:  CLRF   xB6
2D88:  CLRF   xB5
2D8A:  MOVLW  30
2D8C:  MOVWF  xB4
2D8E:  MOVLW  82
2D90:  MOVWF  xB3
2D92:  MOVFF  9A,BA
2D96:  MOVFF  99,B9
2D9A:  MOVFF  98,B8
2D9E:  MOVFF  97,B7
2DA2:  CALL   0FD0
2DA6:  BNC   2DB4
....................    { 
....................       Saturacion=11; 
2DA8:  CLRF   x9A
2DAA:  CLRF   x99
2DAC:  MOVLW  30
2DAE:  MOVWF  x98
2DB0:  MOVLW  82
2DB2:  MOVWF  x97
....................    } 
....................     
....................    for(i=0;i<floor(Saturacion);i++) 
2DB4:  CLRF   2A
2DB6:  MOVFF  9A,A2
2DBA:  MOVFF  99,A1
2DBE:  MOVFF  98,A0
2DC2:  MOVFF  97,9F
2DC6:  CALL   17EE
2DCA:  MOVFF  00,9F
2DCE:  MOVFF  01,A0
2DD2:  MOVFF  02,A1
2DD6:  MOVFF  03,A2
2DDA:  CLRF   xB8
2DDC:  MOVFF  2A,B7
2DE0:  CALL   06B6
2DE4:  MOVFF  03,B6
2DE8:  MOVFF  02,B5
2DEC:  MOVFF  01,B4
2DF0:  MOVFF  00,B3
2DF4:  MOVFF  A2,BA
2DF8:  MOVFF  A1,B9
2DFC:  MOVFF  A0,B8
2E00:  MOVFF  9F,B7
2E04:  CALL   0FD0
2E08:  BNC   2E26
....................    { 
....................       lcd_gotoxy(i+8,2); 
2E0A:  MOVLW  08
2E0C:  ADDWF  2A,W
2E0E:  MOVWF  x9F
2E10:  MOVWF  xB1
2E12:  MOVLW  02
2E14:  MOVWF  xB2
2E16:  CALL   073E
....................       printf(lcd_putc,"Ñ"); 
2E1A:  MOVLW  D1
2E1C:  MOVWF  xB0
2E1E:  CALL   07A0
....................    } 
2E22:  INCF   2A,F
2E24:  BRA    2DB6
....................     
....................    for(i=floor(Saturacion);i<11;i++) 
2E26:  MOVFF  9A,A2
2E2A:  MOVFF  99,A1
2E2E:  MOVFF  98,A0
2E32:  MOVFF  97,9F
2E36:  CALL   17EE
2E3A:  MOVFF  03,B6
2E3E:  MOVFF  02,B5
2E42:  MOVFF  01,B4
2E46:  MOVFF  00,B3
2E4A:  CALL   1482
2E4E:  MOVFF  01,2A
2E52:  MOVF   2A,W
2E54:  SUBLW  0A
2E56:  BNC   2E74
....................    { 
....................       lcd_gotoxy(i+8,2); 
2E58:  MOVLW  08
2E5A:  ADDWF  2A,W
2E5C:  MOVWF  x9F
2E5E:  MOVWF  xB1
2E60:  MOVLW  02
2E62:  MOVWF  xB2
2E64:  CALL   073E
....................       printf(lcd_putc," "); 
2E68:  MOVLW  20
2E6A:  MOVWF  xB0
2E6C:  CALL   07A0
....................    } 
2E70:  INCF   2A,F
2E72:  BRA    2E52
....................     
....................    lcd_gotoxy(10,3); 
2E74:  MOVLW  0A
2E76:  MOVWF  xB1
2E78:  MOVLW  03
2E7A:  MOVWF  xB2
2E7C:  CALL   073E
....................    printf(lcd_putc,"Tempo:%02u:%02u",tempo_minutos,tempo_segundos); 
2E80:  MOVLW  8A
2E82:  MOVWF  FF6
2E84:  MOVLW  05
2E86:  MOVWF  FF7
2E88:  MOVLW  06
2E8A:  MOVWF  xA3
2E8C:  CALL   081E
2E90:  MOVFF  24,9F
2E94:  MOVLW  01
2E96:  MOVWF  xA0
2E98:  CALL   0994
2E9C:  MOVLW  3A
2E9E:  MOVWF  xB0
2EA0:  CALL   07A0
2EA4:  MOVFF  25,9F
2EA8:  MOVLW  01
2EAA:  MOVWF  xA0
2EAC:  CALL   0994
....................     
....................    if(estadomv==1) 
2EB0:  BTFSS  17.2
2EB2:  BRA    2F30
....................    { 
....................       lcd_gotoxy(1,4); 
2EB4:  MOVLW  01
2EB6:  MOVWF  xB1
2EB8:  MOVLW  04
2EBA:  MOVWF  xB2
2EBC:  CALL   073E
....................       printf(lcd_putc,"Motor:ON "); 
2EC0:  MOVLW  9A
2EC2:  MOVWF  FF6
2EC4:  MOVLW  05
2EC6:  MOVWF  FF7
2EC8:  CALL   07FE
....................       if(sensores(0)>=512) 
2ECC:  CLRF   xA4
2ECE:  CALL   06EC
2ED2:  MOVFF  00,9F
2ED6:  MOVFF  01,A0
2EDA:  MOVFF  02,A1
2EDE:  MOVFF  03,A2
2EE2:  CLRF   xB6
2EE4:  CLRF   xB5
2EE6:  CLRF   xB4
2EE8:  MOVLW  88
2EEA:  MOVWF  xB3
2EEC:  MOVFF  03,BA
2EF0:  MOVFF  02,B9
2EF4:  MOVFF  01,B8
2EF8:  MOVFF  00,B7
2EFC:  CALL   0FD0
2F00:  BC    2F04
2F02:  BNZ   2F26
....................       { 
....................          velocidades(read_eeprom(5)); 
2F04:  MOVFF  FF2,9F
2F08:  BCF    FF2.7
2F0A:  MOVLW  05
2F0C:  MOVWF  FA9
2F0E:  BCF    FA6.6
2F10:  BCF    FA6.7
2F12:  BSF    FA6.0
2F14:  MOVF   FA8,W
2F16:  BTFSC  x9F.7
2F18:  BSF    FF2.7
2F1A:  MOVWF  xA0
2F1C:  MOVFF  A0,A1
2F20:  CALL   09FA
....................       } 
....................       else 
2F24:  BRA    2F2E
....................       { 
....................          estadomv=0; 
2F26:  BCF    17.2
....................          velocidades(0); 
2F28:  CLRF   xA1
2F2A:  CALL   09FA
....................       } 
....................    } 
....................    else 
2F2E:  BRA    2F4E
....................    { 
....................       lcd_gotoxy(1,4); 
2F30:  MOVLW  01
2F32:  MOVWF  xB1
2F34:  MOVLW  04
2F36:  MOVWF  xB2
2F38:  CALL   073E
....................       printf(lcd_putc,"Motor:OFF"); 
2F3C:  MOVLW  A4
2F3E:  MOVWF  FF6
2F40:  MOVLW  05
2F42:  MOVWF  FF7
2F44:  CALL   07FE
....................       velocidades(0);  
2F48:  CLRF   xA1
2F4A:  CALL   09FA
....................    } 
....................     
....................    if(estadouv==1) 
2F4E:  BTFSS  17.0
2F50:  BRA    2FE4
....................    { 
....................       lcd_gotoxy(13,4); 
2F52:  MOVLW  0D
2F54:  MOVWF  xB1
2F56:  MOVLW  04
2F58:  MOVWF  xB2
2F5A:  CALL   073E
....................       printf(lcd_putc,"UV:ON "); 
2F5E:  MOVLW  AE
2F60:  MOVWF  FF6
2F62:  MOVLW  05
2F64:  MOVWF  FF7
2F66:  CALL   07FE
....................       if(sensores(0)<512) 
2F6A:  CLRF   xA4
2F6C:  CALL   06EC
2F70:  MOVFF  00,9F
2F74:  MOVFF  01,A0
2F78:  MOVFF  02,A1
2F7C:  MOVFF  03,A2
2F80:  MOVFF  03,B6
2F84:  MOVFF  02,B5
2F88:  MOVFF  01,B4
2F8C:  MOVFF  00,B3
2F90:  CLRF   xBA
2F92:  CLRF   xB9
2F94:  CLRF   xB8
2F96:  MOVLW  88
2F98:  MOVWF  xB7
2F9A:  CALL   0FD0
2F9E:  BNC   2FC8
....................       { 
....................          estadomv=0; 
2FA0:  BCF    17.2
....................          velocidades(0); 
2FA2:  CLRF   xA1
2FA4:  CALL   09FA
....................          estadofl=0; 
2FA8:  BCF    17.1
....................          Luz_Blanca_off; 
2FAA:  BCF    F8C.1
2FAC:  BCF    F95.1
....................          Luz_UV_on; 
2FAE:  BSF    F8C.0
2FB0:  BCF    F95.0
....................          tiempo_cumplido=0; 
2FB2:  BCF    17.7
....................          if(flaguv==0) 
2FB4:  BTFSC  18.1
2FB6:  BRA    2FC6
....................          { 
....................             delay_ms(50);lcd_init();flaguv=1; 
2FB8:  MOVLW  32
2FBA:  MOVWF  xB6
2FBC:  CALL   05CE
2FC0:  CALL   0660
2FC4:  BSF    18.1
....................          } 
....................       } 
....................       else 
2FC6:  BRA    2FE2
....................       { 
....................          estadouv=0; 
2FC8:  BCF    17.0
....................          Luz_UV_off; 
2FCA:  BCF    F8C.0
2FCC:  BCF    F95.0
....................          tiempo_cumplido=1; 
2FCE:  BSF    17.7
....................          if(flaguv==1) 
2FD0:  BTFSS  18.1
2FD2:  BRA    2FE2
....................          { 
....................             delay_ms(50);lcd_init();flaguv=0; 
2FD4:  MOVLW  32
2FD6:  MOVWF  xB6
2FD8:  CALL   05CE
2FDC:  CALL   0660
2FE0:  BCF    18.1
....................          } 
....................       } 
....................    } 
....................    else 
2FE2:  BRA    3014
....................    { 
....................       estadouv=0; 
2FE4:  BCF    17.0
....................       lcd_gotoxy(13,4); 
2FE6:  MOVLW  0D
2FE8:  MOVWF  xB1
2FEA:  MOVLW  04
2FEC:  MOVWF  xB2
2FEE:  CALL   073E
....................       printf(lcd_putc,"UV:OFF"); 
2FF2:  MOVLW  B6
2FF4:  MOVWF  FF6
2FF6:  MOVLW  05
2FF8:  MOVWF  FF7
2FFA:  CALL   07FE
....................       Luz_UV_off; 
2FFE:  BCF    F8C.0
3000:  BCF    F95.0
....................       if(flaguv==1) 
3002:  BTFSS  18.1
3004:  BRA    3014
....................       { 
....................          delay_ms(50);lcd_init();flaguv=0; 
3006:  MOVLW  32
3008:  MOVWF  xB6
300A:  CALL   05CE
300E:  CALL   0660
3012:  BCF    18.1
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
3014:  BTFSS  17.1
3016:  BRA    309A
....................    { 
....................       lcd_gotoxy(1,3); 
3018:  MOVLW  01
301A:  MOVWF  xB1
301C:  MOVLW  03
301E:  MOVWF  xB2
3020:  CALL   073E
....................       printf(lcd_putc,"Luz:ON "); 
3024:  MOVLW  BE
3026:  MOVWF  FF6
3028:  MOVLW  05
302A:  MOVWF  FF7
302C:  CALL   07FE
....................       if(sensores(0)>=512) 
3030:  CLRF   xA4
3032:  CALL   06EC
3036:  MOVFF  00,9F
303A:  MOVFF  01,A0
303E:  MOVFF  02,A1
3042:  MOVFF  03,A2
3046:  CLRF   xB6
3048:  CLRF   xB5
304A:  CLRF   xB4
304C:  MOVLW  88
304E:  MOVWF  xB3
3050:  MOVFF  03,BA
3054:  MOVFF  02,B9
3058:  MOVFF  01,B8
305C:  MOVFF  00,B7
3060:  CALL   0FD0
3064:  BC    3068
3066:  BNZ   3080
....................       { 
....................          Luz_Blanca_on; 
3068:  BSF    F8C.1
306A:  BCF    F95.1
....................          if(flagfl==0) 
306C:  BTFSC  18.2
306E:  BRA    307E
....................          { 
....................             delay_ms(50);lcd_init();flagfl=1; 
3070:  MOVLW  32
3072:  MOVWF  xB6
3074:  CALL   05CE
3078:  CALL   0660
307C:  BSF    18.2
....................          } 
....................       } 
....................       else 
307E:  BRA    3098
....................       { 
....................          estadofl=0; 
3080:  BCF    17.1
....................          Luz_Blanca_off; 
3082:  BCF    F8C.1
3084:  BCF    F95.1
....................          if(flagfl==1) 
3086:  BTFSS  18.2
3088:  BRA    3098
....................          { 
....................             delay_ms(50);lcd_init();flagfl=0; 
308A:  MOVLW  32
308C:  MOVWF  xB6
308E:  CALL   05CE
3092:  CALL   0660
3096:  BCF    18.2
....................          } 
....................       } 
....................    } 
....................    else 
3098:  BRA    30C8
....................    { 
....................       lcd_gotoxy(1,3); 
309A:  MOVLW  01
309C:  MOVWF  xB1
309E:  MOVLW  03
30A0:  MOVWF  xB2
30A2:  CALL   073E
....................       printf(lcd_putc,"Luz:OFF"); 
30A6:  MOVLW  C6
30A8:  MOVWF  FF6
30AA:  MOVLW  05
30AC:  MOVWF  FF7
30AE:  CALL   07FE
....................       Luz_Blanca_off; 
30B2:  BCF    F8C.1
30B4:  BCF    F95.1
....................       if(flagfl==1) 
30B6:  BTFSS  18.2
30B8:  BRA    30C8
....................       { 
....................          delay_ms(50);lcd_init();flagfl=0; 
30BA:  MOVLW  32
30BC:  MOVWF  xB6
30BE:  CALL   05CE
30C2:  CALL   0660
30C6:  BCF    18.2
....................       } 
....................    } 
....................     
....................    if(UP)//Si oprime hacia arriba 
30C8:  BSF    F92.5
30CA:  BTFSS  F80.5
30CC:  BRA    30E8
....................    { 
....................       if(Flanco == 0) 
30CE:  BTFSC  17.3
30D0:  BRA    30E6
....................       { 
....................          estadofl=!estadofl;Flanco = 1;delay_ms(300); 
30D2:  BTG    17.1
30D4:  BSF    17.3
30D6:  MOVLW  02
30D8:  MOVWF  x9F
30DA:  MOVLW  96
30DC:  MOVWF  xB6
30DE:  CALL   05CE
30E2:  DECFSZ x9F,F
30E4:  BRA    30DA
....................       } 
....................    } 
....................    else 
30E6:  BRA    30EA
....................    { 
....................       Flanco = 0; 
30E8:  BCF    17.3
....................    } 
....................     
....................    if(DOWN)//Si oprime hacia abajo 
30EA:  BSF    F96.0
30EC:  BTFSS  F84.0
30EE:  BRA    310A
....................    { 
....................       if(Flanco1 == 0) 
30F0:  BTFSC  17.4
30F2:  BRA    3108
....................       { 
....................          estadomv=!estadomv;Flanco1 = 1;delay_ms(300); 
30F4:  BTG    17.2
30F6:  BSF    17.4
30F8:  MOVLW  02
30FA:  MOVWF  x9F
30FC:  MOVLW  96
30FE:  MOVWF  xB6
3100:  CALL   05CE
3104:  DECFSZ x9F,F
3106:  BRA    30FC
....................       } 
....................    } 
....................    else 
3108:  BRA    310C
....................    { 
....................       Flanco1 = 0; 
310A:  BCF    17.4
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia izquierda 
310C:  BSF    F96.1
310E:  BTFSS  F84.1
3110:  BRA    3136
....................    { 
....................       printf(lcd_putc,"\f");delay_ms(300);Menu=1; paso=0;Flecha=2;Flecha2=2;    
3112:  MOVLW  0C
3114:  MOVWF  xB0
3116:  CALL   07A0
311A:  MOVLW  02
311C:  MOVWF  x9F
311E:  MOVLW  96
3120:  MOVWF  xB6
3122:  CALL   05CE
3126:  DECFSZ x9F,F
3128:  BRA    311E
312A:  MOVLW  01
312C:  MOVWF  19
312E:  CLRF   2E
3130:  MOVLW  02
3132:  MOVWF  1D
3134:  MOVWF  1F
....................    } 
....................     
....................    if(LEFT)//Si oprime hacia izquierda 
3136:  BSF    F96.2
3138:  BTFSS  F84.2
313A:  BRA    3156
....................    { 
....................       if(Flanco2 == 0) 
313C:  BTFSC  17.5
313E:  BRA    3154
....................       { 
....................          estadouv=!estadouv;Flanco2 = 1;delay_ms(300); 
3140:  BTG    17.0
3142:  BSF    17.5
3144:  MOVLW  02
3146:  MOVWF  x9F
3148:  MOVLW  96
314A:  MOVWF  xB6
314C:  CALL   05CE
3150:  DECFSZ x9F,F
3152:  BRA    3148
....................       } 
....................    } 
....................    else 
3154:  BRA    3158
....................    { 
....................       Flanco2 = 0; 
3156:  BCF    17.5
....................    } 
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------    
....................     
....................    if(guardaruv==1) 
3158:  DECFSZ 2D,W
315A:  BRA    31DA
....................    { 
....................       write_eeprom(50,segundos);write_eeprom(51,minutos);write_eeprom(52,horas); 
315C:  MOVLW  32
315E:  MOVWF  FA9
3160:  MOVFF  22,FA8
3164:  BCF    FA6.6
3166:  BCF    FA6.7
3168:  BSF    FA6.2
316A:  MOVF   FF2,W
316C:  MOVWF  00
316E:  BCF    FF2.7
3170:  MOVLB  F
3172:  MOVLW  55
3174:  MOVWF  FA7
3176:  MOVLW  AA
3178:  MOVWF  FA7
317A:  BSF    FA6.1
317C:  BTFSC  FA6.1
317E:  BRA    317C
3180:  BCF    FA6.2
3182:  MOVF   00,W
3184:  IORWF  FF2,F
3186:  MOVLW  33
3188:  MOVWF  FA9
318A:  MOVFF  23,FA8
318E:  BCF    FA6.6
3190:  BCF    FA6.7
3192:  BSF    FA6.2
3194:  MOVF   FF2,W
3196:  MOVWF  00
3198:  BCF    FF2.7
319A:  MOVLW  55
319C:  MOVWF  FA7
319E:  MOVLW  AA
31A0:  MOVWF  FA7
31A2:  BSF    FA6.1
31A4:  BTFSC  FA6.1
31A6:  BRA    31A4
31A8:  BCF    FA6.2
31AA:  MOVF   00,W
31AC:  IORWF  FF2,F
31AE:  MOVLW  34
31B0:  MOVWF  FA9
31B2:  MOVFF  3D,FA8
31B6:  BCF    FA6.6
31B8:  BCF    FA6.7
31BA:  BSF    FA6.2
31BC:  MOVF   FF2,W
31BE:  MOVWF  00
31C0:  BCF    FF2.7
31C2:  MOVLW  55
31C4:  MOVWF  FA7
31C6:  MOVLW  AA
31C8:  MOVWF  FA7
31CA:  BSF    FA6.1
31CC:  BTFSC  FA6.1
31CE:  BRA    31CC
31D0:  BCF    FA6.2
31D2:  MOVF   00,W
31D4:  IORWF  FF2,F
....................       guardaruv=0; 
31D6:  CLRF   2D
31D8:  MOVLB  0
....................    } 
....................    
....................    if(tiemporeset>=20) 
31DA:  MOVF   2C,W
31DC:  SUBLW  13
31DE:  BC    31E6
....................    { 
....................       lcd_init(); 
31E0:  CALL   0660
....................       tiemporeset=0; 
31E4:  CLRF   2C
....................    }    
....................     
....................    if(segundos>=60) 
31E6:  MOVF   22,W
31E8:  SUBLW  3B
31EA:  BC    31F0
....................    { 
....................       segundos=0;minutos++; 
31EC:  CLRF   22
31EE:  INCF   23,F
....................    } 
....................    if(minutos==60) 
31F0:  MOVF   23,W
31F2:  SUBLW  3C
31F4:  BNZ   31FE
....................    { 
....................       minutos=0;horas++; 
31F6:  CLRF   23
31F8:  INCF   3D,F
31FA:  BTFSC  FD8.2
31FC:  INCF   3E,F
....................    } 
....................     
....................    } 
31FE:  GOTO   1B08
.................... } 
....................  
3202:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
