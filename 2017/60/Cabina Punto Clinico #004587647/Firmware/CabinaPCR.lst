CCS PCH C Compiler, Version 4.104, 5967               18-ene.-18 11:37

               Filename: \\Casa\jp\JP\Laboratorio\Cabina de PCR\2017\60\Cabina Punto Clinico #004587647\Firmware\CabinaPCR.lst

               ROM used: 13568 bytes (41%)
                         Largest free fragment is 19196
               RAM used: 173 (8%) at main() level
                         210 (10%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   18BC
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR,NOPUT// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
06D8:  CLRF   FEA
06DA:  MOVLW  BB
06DC:  MOVWF  FE9
06DE:  MOVF   FEF,W
06E0:  BZ    06FE
06E2:  MOVLW  0F
06E4:  MOVWF  01
06E6:  CLRF   00
06E8:  DECFSZ 00,F
06EA:  BRA    06E8
06EC:  DECFSZ 01,F
06EE:  BRA    06E6
06F0:  MOVLW  8F
06F2:  MOVWF  00
06F4:  DECFSZ 00,F
06F6:  BRA    06F4
06F8:  NOP   
06FA:  DECFSZ FEF,F
06FC:  BRA    06E2
06FE:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
*
0720:  MOVLW  F0
0722:  MOVWF  F93
....................       lcd.rw = 1; 
0724:  BSF    F81.2
....................       delay_cycles(1); 
0726:  NOP   
....................       lcd.enable = 1; 
0728:  BSF    F81.0
....................       delay_cycles(1); 
072A:  NOP   
....................       high = lcd.data; 
072C:  SWAPF  F81,W
072E:  ANDLW  0F
0730:  MOVWF  xC1
....................       lcd.enable = 0; 
0732:  BCF    F81.0
....................       delay_cycles(1); 
0734:  NOP   
....................       lcd.enable = 1; 
0736:  BSF    F81.0
....................       delay_us(1); 
0738:  MOVLW  03
073A:  MOVWF  00
073C:  DECFSZ 00,F
073E:  BRA    073C
0740:  BRA    0742
....................       low = lcd.data; 
0742:  SWAPF  F81,W
0744:  ANDLW  0F
0746:  MOVWF  xC0
....................       lcd.enable = 0; 
0748:  BCF    F81.0
....................       set_tris_b(LCD_WRITE); 
074A:  MOVLW  00
074C:  MOVWF  F93
....................       return( (high<<4) | low); 
074E:  SWAPF  xC1,W
0750:  MOVWF  00
0752:  MOVLW  F0
0754:  ANDWF  00,F
0756:  MOVF   00,W
0758:  IORWF  xC0,W
075A:  MOVWF  01
.................... } 
075C:  GOTO   0764 (RETURN)
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0700:  SWAPF  xC1,W
0702:  ANDLW  F0
0704:  MOVWF  00
0706:  MOVLW  0F
0708:  ANDWF  F81,W
070A:  IORWF  00,W
070C:  MOVWF  F81
....................       delay_cycles(1); 
070E:  NOP   
....................       lcd.enable = 1; 
0710:  BSF    F81.0
....................       delay_us(2); 
0712:  MOVLW  07
0714:  MOVWF  00
0716:  DECFSZ 00,F
0718:  BRA    0716
071A:  BRA    071C
....................       lcd.enable = 0; 
071C:  BCF    F81.0
.................... } 
071E:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
*
0760:  BCF    F81.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
0762:  BRA    0720
0764:  MOVFF  01,C0
0768:  BTFSC  01.7
076A:  BRA    0762
....................       lcd.rs = address; 
076C:  BTFSS  xBE.0
076E:  BCF    F81.1
0770:  BTFSC  xBE.0
0772:  BSF    F81.1
....................       delay_cycles(1); 
0774:  NOP   
....................       lcd.rw = 0; 
0776:  BCF    F81.2
....................       delay_cycles(1); 
0778:  NOP   
....................       lcd.enable = 0; 
077A:  BCF    F81.0
....................       lcd_send_nibble(n >> 4); 
077C:  SWAPF  xBF,W
077E:  MOVWF  xC0
0780:  MOVLW  0F
0782:  ANDWF  xC0,F
0784:  MOVFF  C0,C1
0788:  RCALL  0700
....................       lcd_send_nibble(n & 0xf); 
078A:  MOVF   xBF,W
078C:  ANDLW  0F
078E:  MOVWF  xC0
0790:  MOVWF  xC1
0792:  RCALL  0700
.................... } 
0794:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
0796:  MOVLW  00
0798:  MOVWF  F93
....................     lcd.rs = 0; 
079A:  BCF    F81.1
....................     lcd.rw = 0; 
079C:  BCF    F81.2
....................     lcd.enable = 0; 
079E:  BCF    F81.0
....................     delay_ms(15); 
07A0:  MOVLW  0F
07A2:  MOVWF  xBB
07A4:  RCALL  06D8
....................     for(i=1;i<=3;++i) { 
07A6:  MOVLW  01
07A8:  MOVWF  xA9
07AA:  MOVF   xA9,W
07AC:  SUBLW  03
07AE:  BNC   07C0
....................        lcd_send_nibble(3); 
07B0:  MOVLW  03
07B2:  MOVWF  xC1
07B4:  RCALL  0700
....................        delay_ms(5); 
07B6:  MOVLW  05
07B8:  MOVWF  xBB
07BA:  RCALL  06D8
....................     } 
07BC:  INCF   xA9,F
07BE:  BRA    07AA
....................     lcd_send_nibble(2); 
07C0:  MOVLW  02
07C2:  MOVWF  xC1
07C4:  RCALL  0700
....................     for(i=0;i<=3;++i) 
07C6:  CLRF   xA9
07C8:  MOVF   xA9,W
07CA:  SUBLW  03
07CC:  BNC   07EA
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
07CE:  CLRF   03
07D0:  MOVF   xA9,W
07D2:  MOVFF  FF2,AA
07D6:  BCF    FF2.7
07D8:  RCALL  0096
07DA:  BTFSC  xAA.7
07DC:  BSF    FF2.7
07DE:  MOVWF  xAA
07E0:  CLRF   xBE
07E2:  MOVWF  xBF
07E4:  RCALL  0760
07E6:  INCF   xA9,F
07E8:  BRA    07C8
.................... } 
07EA:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0874:  MOVLW  01
0876:  SUBWF  xBC,W
0878:  ADDLW  FC
087A:  BC    089A
087C:  ADDLW  04
087E:  GOTO   08AA
....................      case 1 : address=0x80;break; 
0882:  MOVLW  80
0884:  MOVWF  xBD
0886:  BRA    089A
....................      case 2 : address=0xc0;break; 
0888:  MOVLW  C0
088A:  MOVWF  xBD
088C:  BRA    089A
....................      case 3 : address=0x94;break; 
088E:  MOVLW  94
0890:  MOVWF  xBD
0892:  BRA    089A
....................      case 4 : address=0xd4;break; 
0894:  MOVLW  D4
0896:  MOVWF  xBD
0898:  BRA    089A
....................    } 
....................    address+=x-1; 
089A:  MOVLW  01
089C:  SUBWF  xBB,W
089E:  ADDWF  xBD,F
....................    lcd_send_byte(0,address); 
08A0:  CLRF   xBE
08A2:  MOVFF  BD,BF
08A6:  RCALL  0760
.................... } 
08A8:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
08D6:  MOVF   xBA,W
08D8:  XORLW  0C
08DA:  BZ    08E6
08DC:  XORLW  06
08DE:  BZ    08FA
08E0:  XORLW  02
08E2:  BZ    0908
08E4:  BRA    0912
....................      case '\f'   : lcd_send_byte(0,1); 
08E6:  CLRF   xBE
08E8:  MOVLW  01
08EA:  MOVWF  xBF
08EC:  RCALL  0760
....................                    lcdline=1; 
08EE:  MOVLW  01
08F0:  MOVWF  16
....................                    delay_ms(2); 
08F2:  MOVLW  02
08F4:  MOVWF  xBB
08F6:  RCALL  06D8
....................                                            break; 
08F8:  BRA    091E
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
08FA:  INCF   16,F
08FC:  MOVLW  01
08FE:  MOVWF  xBB
0900:  MOVFF  16,BC
0904:  RCALL  0874
0906:  BRA    091E
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0908:  CLRF   xBE
090A:  MOVLW  10
090C:  MOVWF  xBF
090E:  RCALL  0760
0910:  BRA    091E
....................      default     : lcd_send_byte(1,c);     break; 
0912:  MOVLW  01
0914:  MOVWF  xBE
0916:  MOVFF  BA,BF
091A:  RCALL  0760
091C:  BRA    091E
....................    } 
.................... } 
091E:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
1564:  BCF    xBC.0
....................    y = x; 
1566:  MOVFF  B0,B5
156A:  MOVFF  AF,B4
156E:  MOVFF  AE,B3
1572:  MOVFF  AD,B2
....................  
....................    if (x < 0) 
1576:  MOVFF  B0,C0
157A:  MOVFF  AF,BF
157E:  MOVFF  AE,BE
1582:  MOVFF  AD,BD
1586:  CLRF   xC4
1588:  CLRF   xC3
158A:  CLRF   xC2
158C:  CLRF   xC1
158E:  RCALL  0FEE
1590:  BNC   159A
....................    { 
....................       s = 1; 
1592:  BSF    xBC.0
....................       y = -y; 
1594:  MOVF   xB3,W
1596:  XORLW  80
1598:  MOVWF  xB3
....................    } 
....................  
....................    if (y <= 32768.0) 
159A:  MOVFF  B5,C0
159E:  MOVFF  B4,BF
15A2:  MOVFF  B3,BE
15A6:  MOVFF  B2,BD
15AA:  CLRF   xC4
15AC:  CLRF   xC3
15AE:  CLRF   xC2
15B0:  MOVLW  8E
15B2:  MOVWF  xC1
15B4:  RCALL  0FEE
15B6:  BC    15BA
15B8:  BNZ   15EA
....................   res = (float32)(unsigned int16)y; 
15BA:  MOVFF  B5,C0
15BE:  MOVFF  B4,BF
15C2:  MOVFF  B3,BE
15C6:  MOVFF  B2,BD
15CA:  RCALL  152C
15CC:  MOVFF  02,C2
15D0:  MOVFF  01,C1
15D4:  CALL   07EC
15D8:  MOVFF  03,B9
15DC:  MOVFF  02,B8
15E0:  MOVFF  01,B7
15E4:  MOVFF  00,B6
....................  
....................  else if (y < 10000000.0) 
15E8:  BRA    1772
15EA:  MOVFF  B5,C0
15EE:  MOVFF  B4,BF
15F2:  MOVFF  B3,BE
15F6:  MOVFF  B2,BD
15FA:  MOVLW  80
15FC:  MOVWF  xC4
15FE:  MOVLW  96
1600:  MOVWF  xC3
1602:  MOVLW  18
1604:  MOVWF  xC2
1606:  MOVLW  96
1608:  MOVWF  xC1
160A:  RCALL  0FEE
160C:  BTFSS  FD8.0
160E:  BRA    1762
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1610:  MOVFF  B5,C0
1614:  MOVFF  B4,BF
1618:  MOVFF  B3,BE
161C:  MOVFF  B2,BD
1620:  CLRF   xC4
1622:  CLRF   xC3
1624:  CLRF   xC2
1626:  MOVLW  8E
1628:  MOVWF  xC1
162A:  CALL   0C2A
162E:  MOVFF  03,C0
1632:  MOVFF  02,BF
1636:  MOVFF  01,BE
163A:  MOVFF  00,BD
163E:  RCALL  152C
1640:  MOVFF  02,BB
1644:  MOVFF  01,BA
....................       y = 32768.0*(y/32768.0 - (float32)l); 
1648:  MOVFF  B5,C0
164C:  MOVFF  B4,BF
1650:  MOVFF  B3,BE
1654:  MOVFF  B2,BD
1658:  CLRF   xC4
165A:  CLRF   xC3
165C:  CLRF   xC2
165E:  MOVLW  8E
1660:  MOVWF  xC1
1662:  CALL   0C2A
1666:  MOVFF  00,BD
166A:  MOVFF  01,BE
166E:  MOVFF  02,BF
1672:  MOVFF  03,C0
1676:  MOVFF  BB,C2
167A:  MOVFF  BA,C1
167E:  CALL   07EC
1682:  BSF    FD8.1
1684:  MOVFF  C0,C4
1688:  MOVFF  BF,C3
168C:  MOVFF  BE,C2
1690:  MOVFF  BD,C1
1694:  MOVFF  03,C8
1698:  MOVFF  02,C7
169C:  MOVFF  01,C6
16A0:  MOVFF  00,C5
16A4:  CALL   0D84
16A8:  CLRF   xC0
16AA:  CLRF   xBF
16AC:  CLRF   xBE
16AE:  MOVLW  8E
16B0:  MOVWF  xBD
16B2:  MOVFF  03,C4
16B6:  MOVFF  02,C3
16BA:  MOVFF  01,C2
16BE:  MOVFF  00,C1
16C2:  RCALL  11FA
16C4:  MOVFF  03,B5
16C8:  MOVFF  02,B4
16CC:  MOVFF  01,B3
16D0:  MOVFF  00,B2
....................   res = 32768.0*(float32)l; 
16D4:  MOVFF  BB,C2
16D8:  MOVFF  BA,C1
16DC:  CALL   07EC
16E0:  CLRF   xC0
16E2:  CLRF   xBF
16E4:  CLRF   xBE
16E6:  MOVLW  8E
16E8:  MOVWF  xBD
16EA:  MOVFF  03,C4
16EE:  MOVFF  02,C3
16F2:  MOVFF  01,C2
16F6:  MOVFF  00,C1
16FA:  RCALL  11FA
16FC:  MOVFF  03,B9
1700:  MOVFF  02,B8
1704:  MOVFF  01,B7
1708:  MOVFF  00,B6
....................   res += (float32)(unsigned int16)y; 
170C:  MOVFF  B5,C0
1710:  MOVFF  B4,BF
1714:  MOVFF  B3,BE
1718:  MOVFF  B2,BD
171C:  RCALL  152C
171E:  MOVFF  02,C2
1722:  MOVFF  01,C1
1726:  CALL   07EC
172A:  BCF    FD8.1
172C:  MOVFF  B9,C4
1730:  MOVFF  B8,C3
1734:  MOVFF  B7,C2
1738:  MOVFF  B6,C1
173C:  MOVFF  03,C8
1740:  MOVFF  02,C7
1744:  MOVFF  01,C6
1748:  MOVFF  00,C5
174C:  CALL   0D84
1750:  MOVFF  03,B9
1754:  MOVFF  02,B8
1758:  MOVFF  01,B7
175C:  MOVFF  00,B6
....................  } 
....................  
....................  else 
1760:  BRA    1772
....................   res = y; 
1762:  MOVFF  B5,B9
1766:  MOVFF  B4,B8
176A:  MOVFF  B3,B7
176E:  MOVFF  B2,B6
....................  
....................  y = y - (float32)(unsigned int16)y; 
1772:  MOVFF  B5,C0
1776:  MOVFF  B4,BF
177A:  MOVFF  B3,BE
177E:  MOVFF  B2,BD
1782:  RCALL  152C
1784:  MOVFF  02,C2
1788:  MOVFF  01,C1
178C:  CALL   07EC
1790:  BSF    FD8.1
1792:  MOVFF  B5,C4
1796:  MOVFF  B4,C3
179A:  MOVFF  B3,C2
179E:  MOVFF  B2,C1
17A2:  MOVFF  03,C8
17A6:  MOVFF  02,C7
17AA:  MOVFF  01,C6
17AE:  MOVFF  00,C5
17B2:  CALL   0D84
17B6:  MOVFF  03,B5
17BA:  MOVFF  02,B4
17BE:  MOVFF  01,B3
17C2:  MOVFF  00,B2
....................  
....................  if (s) 
17C6:  BTFSS  xBC.0
17C8:  BRA    17D0
....................   res = -res; 
17CA:  MOVF   xB7,W
17CC:  XORLW  80
17CE:  MOVWF  xB7
....................  
....................  if (y != 0) 
17D0:  MOVFF  B5,C0
17D4:  MOVFF  B4,BF
17D8:  MOVFF  B3,BE
17DC:  MOVFF  B2,BD
17E0:  CLRF   xC4
17E2:  CLRF   xC3
17E4:  CLRF   xC2
17E6:  CLRF   xC1
17E8:  RCALL  0FEE
17EA:  BZ    185C
....................  { 
....................   if (s == 1 && n == 0) 
17EC:  BTFSS  xBC.0
17EE:  BRA    1824
17F0:  MOVF   xB1,F
17F2:  BNZ   1824
....................    res -= 1.0; 
17F4:  BSF    FD8.1
17F6:  MOVFF  B9,C4
17FA:  MOVFF  B8,C3
17FE:  MOVFF  B7,C2
1802:  MOVFF  B6,C1
1806:  CLRF   xC8
1808:  CLRF   xC7
180A:  CLRF   xC6
180C:  MOVLW  7F
180E:  MOVWF  xC5
1810:  CALL   0D84
1814:  MOVFF  03,B9
1818:  MOVFF  02,B8
181C:  MOVFF  01,B7
1820:  MOVFF  00,B6
....................  
....................   if (s == 0 && n == 1) 
1824:  BTFSC  xBC.0
1826:  BRA    185C
1828:  DECFSZ xB1,W
182A:  BRA    185C
....................    res += 1.0; 
182C:  BCF    FD8.1
182E:  MOVFF  B9,C4
1832:  MOVFF  B8,C3
1836:  MOVFF  B7,C2
183A:  MOVFF  B6,C1
183E:  CLRF   xC8
1840:  CLRF   xC7
1842:  CLRF   xC6
1844:  MOVLW  7F
1846:  MOVWF  xC5
1848:  CALL   0D84
184C:  MOVFF  03,B9
1850:  MOVFF  02,B8
1854:  MOVFF  01,B7
1858:  MOVFF  00,B6
....................  } 
....................  if (x == 0) 
185C:  MOVFF  B0,C0
1860:  MOVFF  AF,BF
1864:  MOVFF  AE,BE
1868:  MOVFF  AD,BD
186C:  CLRF   xC4
186E:  CLRF   xC3
1870:  CLRF   xC2
1872:  CLRF   xC1
1874:  CALL   0FEE
1878:  BNZ   1882
....................     res = 0; 
187A:  CLRF   xB9
187C:  CLRF   xB8
187E:  CLRF   xB7
1880:  CLRF   xB6
....................  
....................  return (res); 
1882:  MOVFF  B6,00
1886:  MOVFF  B7,01
188A:  MOVFF  B8,02
188E:  MOVFF  B9,03
.................... } 
1892:  GOTO   18AA (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
1896:  MOVFF  AC,B0
189A:  MOVFF  AB,AF
189E:  MOVFF  AA,AE
18A2:  MOVFF  A9,AD
18A6:  CLRF   xB1
18A8:  BRA    1564
.................... } 
18AA:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   IZQU          input(PIN_E2) 
.................... #define   VIDRIO        !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_D1,1) 
.................... #define   Luz_UV_off        output_bit(PIN_D1,0) 
.................... #define   Luz_Blanca_on     output_bit(PIN_D2,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D2,0) 
.................... #define   Motor_L1_on       output_bit(PIN_D3,1) 
.................... #define   Motor_L1_off      output_bit(PIN_D3,0) 
.................... #define   Buzzer_on         output_bit(PIN_D0,1) 
.................... #define   Buzzer_off        output_bit(PIN_D0,0) 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0; 
.................... int8 Menu=0, n_opcionH=6,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   3F,F
00BE:  BTFSC  FD8.2
00C0:  INCF   40,F
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   40,F
00C4:  BNZ   00CC
00C6:  MOVF   3F,W
00C8:  SUBLW  C7
00CA:  BC    011A
....................    {tiempos=0;tiemporeset++;Lectura=1; 
00CC:  CLRF   40
00CE:  CLRF   3F
00D0:  INCF   30,F
00D2:  BSF    18.0
....................     
....................    if(ActivaBuzzer==1) 
00D4:  DECFSZ 3E,W
00D6:  BRA    00EC
....................    { 
....................       if(estadobuzzer==0) 
00D8:  BTFSC  18.3
00DA:  BRA    00E2
....................       { 
....................          Buzzer_off; 
00DC:  BCF    F8C.0
00DE:  BCF    F95.0
....................       } 
....................       else 
00E0:  BRA    00EA
....................       { 
....................          if(estadoalarma==1) 
00E2:  BTFSS  18.4
00E4:  BRA    00EA
....................             Buzzer_on; 
00E6:  BSF    F8C.0
00E8:  BCF    F95.0
....................       } 
....................       estadobuzzer=!estadobuzzer; 
00EA:  BTG    18.3
....................    } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadouv==1) 
00EC:  BTFSS  17.0
00EE:  BRA    011A
....................    { 
....................       segundos++; 
00F0:  INCF   22,F
....................       if(tiempo_cumplido==0) 
00F2:  BTFSC  17.7
00F4:  BRA    011A
....................       { 
....................          if(tempo_segundos>0) 
00F6:  MOVF   29,F
00F8:  BZ    00FE
....................          { 
....................             tempo_segundos--; 
00FA:  DECF   29,F
....................          } 
....................          else 
00FC:  BRA    011A
....................          { 
....................             if(tempo_minutos>0) 
00FE:  MOVF   28,F
0100:  BZ    010A
....................             { 
....................                tempo_minutos--; 
0102:  DECF   28,F
....................                tempo_segundos=59; 
0104:  MOVLW  3B
0106:  MOVWF  29
....................             } 
....................             else 
0108:  BRA    011A
....................             { 
....................                tiempo_cumplido=1; 
010A:  BSF    17.7
....................                estadouv=0;Luz_UV_off; 
010C:  BCF    17.0
010E:  BCF    F8C.1
0110:  BCF    F95.1
....................                tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
0112:  MOVFF  2A,28
0116:  MOVFF  2B,29
....................             } 
....................          } 
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
....................  
011A:  BCF    F9E.0
011C:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
0A72:  DECFSZ xAA,W
0A74:  BRA    0A8A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
0A76:  MOVLW  02
0A78:  MOVWF  xBB
0A7A:  MOVFF  AB,BC
0A7E:  RCALL  0874
0A80:  MOVLW  20
0A82:  MOVWF  FF6
0A84:  MOVLW  01
0A86:  MOVWF  FF7
0A88:  RCALL  0920
....................    if(x==2) 
0A8A:  MOVF   xAA,W
0A8C:  SUBLW  02
0A8E:  BNZ   0AA4
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0A90:  MOVLW  02
0A92:  MOVWF  xBB
0A94:  MOVFF  AB,BC
0A98:  RCALL  0874
0A9A:  MOVLW  34
0A9C:  MOVWF  FF6
0A9E:  MOVLW  01
0AA0:  MOVWF  FF7
0AA2:  RCALL  0920
....................    if(x==3) 
0AA4:  MOVF   xAA,W
0AA6:  SUBLW  03
0AA8:  BNZ   0ABE
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
0AAA:  MOVLW  02
0AAC:  MOVWF  xBB
0AAE:  MOVFF  AB,BC
0AB2:  RCALL  0874
0AB4:  MOVLW  48
0AB6:  MOVWF  FF6
0AB8:  MOVLW  01
0ABA:  MOVWF  FF7
0ABC:  RCALL  0920
....................    if(x==4) 
0ABE:  MOVF   xAA,W
0AC0:  SUBLW  04
0AC2:  BNZ   0AD8
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
0AC4:  MOVLW  02
0AC6:  MOVWF  xBB
0AC8:  MOVFF  AB,BC
0ACC:  RCALL  0874
0ACE:  MOVLW  5C
0AD0:  MOVWF  FF6
0AD2:  MOVLW  01
0AD4:  MOVWF  FF7
0AD6:  RCALL  0920
....................     
....................    if(x==5) 
0AD8:  MOVF   xAA,W
0ADA:  SUBLW  05
0ADC:  BNZ   0B0E
....................    {if(estadoalarma==0) 
0ADE:  BTFSC  18.4
0AE0:  BRA    0AF6
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
0AE2:  MOVLW  02
0AE4:  MOVWF  xBB
0AE6:  MOVFF  AB,BC
0AEA:  RCALL  0874
0AEC:  MOVLW  70
0AEE:  MOVWF  FF6
0AF0:  MOVLW  01
0AF2:  MOVWF  FF7
0AF4:  RCALL  0920
....................    if(estadoalarma==1) 
0AF6:  BTFSS  18.4
0AF8:  BRA    0B0E
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
0AFA:  MOVLW  02
0AFC:  MOVWF  xBB
0AFE:  MOVFF  AB,BC
0B02:  RCALL  0874
0B04:  MOVLW  84
0B06:  MOVWF  FF6
0B08:  MOVLW  01
0B0A:  MOVWF  FF7
0B0C:  RCALL  0920
....................    } 
.................... } 
0B0E:  RETLW  00
....................  
.................... void velocidades(int8 x)// Funcion para imprimir mensajes de Menu Principal. 
.................... {  if(x==0) 
*
18AC:  MOVF   xA9,F
18AE:  BNZ   18B6
....................    { 
....................       Motor_L1_off; 
18B0:  BCF    F8C.3
18B2:  BCF    F95.3
....................    } 
....................    else 
18B4:  BRA    18BA
....................    { 
....................       Motor_L1_on; 
18B6:  BSF    F8C.3
18B8:  BCF    F95.3
....................    } 
.................... } 
18BA:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
0822:  RLCF   xAE,W
0824:  MOVWF  00
0826:  RLCF   00,F
0828:  MOVLW  FC
082A:  ANDWF  00,F
082C:  MOVFF  00,01
0830:  MOVF   FC2,W
0832:  ANDLW  C3
0834:  IORWF  00,W
0836:  MOVWF  FC2
0838:  MOVLW  0A
083A:  MOVWF  xBB
083C:  RCALL  06D8
083E:  BSF    FC2.1
0840:  BTFSC  FC2.1
0842:  BRA    0840
0844:  MOVFF  FC4,03
0848:  MOVFF  FC3,C1
084C:  MOVFF  FC4,C2
0850:  RCALL  07EC
0852:  MOVFF  03,B2
0856:  MOVFF  02,B1
085A:  MOVFF  01,B0
085E:  MOVFF  00,AF
0862:  MOVFF  AF,00
0866:  MOVFF  B0,01
086A:  MOVFF  B1,02
086E:  MOVFF  B2,03
.................... } 
0872:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
1064:  CLRF   xAD
1066:  CLRF   xAC
1068:  CLRF   xAB
106A:  CLRF   xAA
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
106C:  CLRF   xAE
106E:  CALL   0822
1072:  MOVFF  03,98
1076:  MOVFF  02,97
107A:  MOVFF  01,96
107E:  MOVFF  00,95
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
1082:  MOVFF  98,C0
1086:  MOVFF  97,BF
108A:  MOVFF  96,BE
108E:  MOVFF  95,BD
1092:  MOVFF  A8,C4
1096:  MOVFF  A7,C3
109A:  MOVFF  A6,C2
109E:  MOVFF  A5,C1
10A2:  RCALL  0C2A
10A4:  MOVFF  00,AE
10A8:  MOVFF  01,AF
10AC:  MOVFF  02,B0
10B0:  MOVFF  03,B1
10B4:  BSF    FD8.1
10B6:  MOVFF  03,C4
10BA:  MOVFF  02,C3
10BE:  MOVFF  01,C2
10C2:  MOVFF  00,C1
10C6:  CLRF   xC8
10C8:  CLRF   xC7
10CA:  CLRF   xC6
10CC:  MOVLW  7F
10CE:  MOVWF  xC5
10D0:  RCALL  0D84
10D2:  MOVFF  03,9C
10D6:  MOVFF  02,9B
10DA:  MOVFF  01,9A
10DE:  MOVFF  00,99
....................     
....................    if(Presion<0.0) 
10E2:  MOVFF  9C,C0
10E6:  MOVFF  9B,BF
10EA:  MOVFF  9A,BE
10EE:  MOVFF  99,BD
10F2:  CLRF   xC4
10F4:  CLRF   xC3
10F6:  CLRF   xC2
10F8:  CLRF   xC1
10FA:  RCALL  0FEE
10FC:  BNC   1106
....................    { 
....................       Presion=0.0; 
10FE:  CLRF   x9C
1100:  CLRF   x9B
1102:  CLRF   x9A
1104:  CLRF   x99
....................    } 
....................  
....................    if(r>media-1) 
1106:  MOVLW  01
1108:  SUBWF  xA9,W
110A:  SUBWF  2C,W
110C:  BZ    1112
110E:  BNC   1112
....................    {r=0;} 
1110:  CLRF   2C
....................    PromPresion[r]=Presion;r++; 
1112:  MOVF   2C,W
1114:  MULLW  04
1116:  MOVF   FF3,W
1118:  CLRF   03
111A:  ADDLW  45
111C:  MOVWF  FE9
111E:  MOVLW  00
1120:  ADDWFC 03,W
1122:  MOVWF  FEA
1124:  MOVFF  99,FEF
1128:  MOVFF  9A,FEC
112C:  MOVFF  9B,FEC
1130:  MOVFF  9C,FEC
1134:  INCF   2C,F
....................           
....................    for(q=0;q<=(media-1);q++) 
1136:  CLRF   2D
1138:  MOVLW  01
113A:  SUBWF  xA9,W
113C:  SUBWF  2D,W
113E:  BZ    1142
1140:  BC    11AC
....................    { 
....................       promediopresion+=PromPresion[q]; 
1142:  MOVF   2D,W
1144:  MULLW  04
1146:  MOVF   FF3,W
1148:  CLRF   03
114A:  ADDLW  45
114C:  MOVWF  FE9
114E:  MOVLW  00
1150:  ADDWFC 03,W
1152:  MOVWF  FEA
1154:  MOVFF  FEF,00
1158:  MOVFF  FEC,01
115C:  MOVFF  FEC,02
1160:  MOVFF  FEC,03
1164:  MOVFF  FEA,AF
1168:  MOVFF  FE9,AE
116C:  BCF    FD8.1
116E:  MOVFF  AD,C4
1172:  MOVFF  AC,C3
1176:  MOVFF  AB,C2
117A:  MOVFF  AA,C1
117E:  MOVFF  03,C8
1182:  MOVFF  02,C7
1186:  MOVFF  01,C6
118A:  MOVFF  00,C5
118E:  RCALL  0D84
1190:  MOVFF  AF,FEA
1194:  MOVFF  AE,FE9
1198:  MOVFF  03,AD
119C:  MOVFF  02,AC
11A0:  MOVFF  01,AB
11A4:  MOVFF  00,AA
....................    }  
11A8:  INCF   2D,F
11AA:  BRA    1138
....................    promediopresion=promediopresion/media;    
11AC:  CLRF   xC2
11AE:  MOVFF  A9,C1
11B2:  CALL   07EC
11B6:  MOVFF  AD,C0
11BA:  MOVFF  AC,BF
11BE:  MOVFF  AB,BE
11C2:  MOVFF  AA,BD
11C6:  MOVFF  03,C4
11CA:  MOVFF  02,C3
11CE:  MOVFF  01,C2
11D2:  MOVFF  00,C1
11D6:  RCALL  0C2A
11D8:  MOVFF  03,AD
11DC:  MOVFF  02,AC
11E0:  MOVFF  01,AB
11E4:  MOVFF  00,AA
....................     
....................    return promediopresion; 
11E8:  MOVFF  AA,00
11EC:  MOVFF  AB,01
11F0:  MOVFF  AC,02
11F4:  MOVFF  AD,03
.................... } 
11F8:  RETLW  00
....................  
.................... void Limita(void){ 
....................     
....................    if(Contrasena[0]>9) 
*
0940:  MOVF   3A,W
0942:  SUBLW  09
0944:  BC    0948
....................       Contrasena[0]=0; 
0946:  CLRF   3A
....................    if(Contrasena[1]>9) 
0948:  MOVF   3B,W
094A:  SUBLW  09
094C:  BC    0950
....................       Contrasena[1]=0; 
094E:  CLRF   3B
....................    if(Contrasena[2]>9) 
0950:  MOVF   3C,W
0952:  SUBLW  09
0954:  BC    0958
....................       Contrasena[2]=0; 
0956:  CLRF   3C
....................    if(Contrasena[3]>9) 
0958:  MOVF   3D,W
095A:  SUBLW  09
095C:  BC    0960
....................       Contrasena[3]=0; 
095E:  CLRF   3D
....................    /*if(tempo_minutos>60) 
....................       tempo_minutos=0; 
....................    if(tempo_segundos) 
....................       tempo_segundos=0; 
....................    if(segundos>60) 
....................       segundos=0; 
....................    if(minutos>60) 
....................       minutos=0;*/  
.................... } 
0960:  GOTO   1C4E (RETURN)
.................... void main () 
.................... { 
*
18BC:  CLRF   FF8
18BE:  BCF    FD0.7
18C0:  BSF    07.7
18C2:  CLRF   FEA
18C4:  CLRF   FE9
18C6:  BCF    17.0
18C8:  BCF    17.1
18CA:  BCF    17.2
18CC:  BCF    17.3
18CE:  BCF    17.4
18D0:  BCF    17.5
18D2:  BCF    17.6
18D4:  BCF    17.7
18D6:  BCF    18.0
18D8:  BCF    18.1
18DA:  BCF    18.2
18DC:  BCF    18.3
18DE:  BCF    18.4
18E0:  CLRF   19
18E2:  MOVLW  06
18E4:  MOVWF  1A
18E6:  MOVLW  02
18E8:  MOVWF  1B
18EA:  MOVLW  0B
18EC:  MOVWF  1C
18EE:  MOVLW  02
18F0:  MOVWF  1D
18F2:  MOVLW  03
18F4:  MOVWF  1E
18F6:  MOVLW  02
18F8:  MOVWF  1F
18FA:  MOVWF  20
18FC:  MOVLW  04
18FE:  MOVWF  21
1900:  CLRF   22
1902:  CLRF   23
1904:  CLRF   24
1906:  CLRF   25
1908:  CLRF   26
190A:  CLRF   27
190C:  CLRF   28
190E:  CLRF   29
1910:  CLRF   2A
1912:  CLRF   2B
1914:  CLRF   2C
1916:  CLRF   2D
1918:  CLRF   2E
191A:  MOVLW  01
191C:  MOVWF  2F
191E:  CLRF   30
1920:  CLRF   31
1922:  CLRF   32
1924:  CLRF   3E
1926:  CLRF   42
1928:  CLRF   41
192A:  CLRF   44
192C:  CLRF   43
192E:  CLRF   x98
1930:  CLRF   x97
1932:  CLRF   x96
1934:  CLRF   x95
1936:  CLRF   x9C
1938:  CLRF   x9B
193A:  CLRF   x9A
193C:  CLRF   x99
193E:  CLRF   xA0
1940:  CLRF   x9F
1942:  CLRF   x9E
1944:  CLRF   x9D
1946:  CLRF   xA4
1948:  CLRF   xA3
194A:  CLRF   xA2
194C:  CLRF   xA1
194E:  CLRF   xA8
1950:  CLRF   xA7
1952:  CLRF   xA6
1954:  MOVLW  80
1956:  MOVWF  xA5
1958:  MOVF   FC1,W
195A:  ANDLW  C0
195C:  IORLW  0F
195E:  MOVWF  FC1
1960:  MOVLW  07
1962:  MOVWF  FB4
1964:  MOVLW  3E
1966:  MOVWF  33
1968:  MOVLW  20
196A:  MOVWF  34
196C:  MOVLW  5E
196E:  MOVWF  35
1970:  CLRF   36
1972:  CLRF   37
1974:  CLRF   38
1976:  CLRF   39
1978:  CLRF   3A
197A:  CLRF   3B
197C:  CLRF   3C
197E:  CLRF   3D
1980:  CLRF   45
1982:  CLRF   46
1984:  CLRF   47
1986:  CLRF   48
1988:  CLRF   49
198A:  CLRF   4A
198C:  CLRF   4B
198E:  CLRF   4C
1990:  CLRF   4D
1992:  CLRF   4E
1994:  CLRF   4F
1996:  CLRF   50
1998:  CLRF   51
199A:  CLRF   52
199C:  CLRF   53
199E:  CLRF   54
19A0:  CLRF   55
19A2:  CLRF   56
19A4:  CLRF   57
19A6:  CLRF   58
19A8:  CLRF   59
19AA:  CLRF   5A
19AC:  CLRF   5B
19AE:  CLRF   5C
19B0:  CLRF   5D
19B2:  CLRF   5E
19B4:  CLRF   5F
19B6:  CLRF   x60
19B8:  CLRF   x61
19BA:  CLRF   x62
19BC:  CLRF   x63
19BE:  CLRF   x64
19C0:  CLRF   x65
19C2:  CLRF   x66
19C4:  CLRF   x67
19C6:  CLRF   x68
19C8:  CLRF   x69
19CA:  CLRF   x6A
19CC:  CLRF   x6B
19CE:  CLRF   x6C
19D0:  CLRF   x6D
19D2:  CLRF   x6E
19D4:  CLRF   x6F
19D6:  CLRF   x70
19D8:  CLRF   x71
19DA:  CLRF   x72
19DC:  CLRF   x73
19DE:  CLRF   x74
19E0:  CLRF   x75
19E2:  CLRF   x76
19E4:  CLRF   x77
19E6:  CLRF   x78
19E8:  CLRF   x79
19EA:  CLRF   x7A
19EC:  CLRF   x7B
19EE:  CLRF   x7C
19F0:  CLRF   x7D
19F2:  CLRF   x7E
19F4:  CLRF   x7F
19F6:  CLRF   x80
19F8:  CLRF   x81
19FA:  CLRF   x82
19FC:  CLRF   x83
19FE:  CLRF   x84
1A00:  CLRF   x85
1A02:  CLRF   x86
1A04:  CLRF   x87
1A06:  CLRF   x88
1A08:  CLRF   x89
1A0A:  CLRF   x8A
1A0C:  CLRF   x8B
1A0E:  CLRF   x8C
1A10:  CLRF   x8D
1A12:  CLRF   x8E
1A14:  CLRF   x8F
1A16:  CLRF   x90
1A18:  CLRF   x91
1A1A:  CLRF   x92
1A1C:  CLRF   x93
1A1E:  CLRF   x94
....................    lcd_init(); 
1A20:  CALL   0796
....................    set_tris_a(0XFF); 
1A24:  MOVLW  FF
1A26:  MOVWF  F92
....................    set_tris_e(0XFF); 
1A28:  MOVWF  F96
....................    set_tris_d(0X00); 
1A2A:  MOVLW  00
1A2C:  MOVWF  F95
....................    output_d(0); 
1A2E:  CLRF   F95
1A30:  CLRF   F8C
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1A32:  MOVLW  85
1A34:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
1A36:  BSF    F9D.0
....................    setup_adc_ports(AN0); 
1A38:  MOVF   FC1,W
1A3A:  ANDLW  C0
1A3C:  IORLW  0E
1A3E:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
1A40:  BCF    FC0.0
1A42:  BSF    FC0.1
1A44:  BCF    FC0.2
1A46:  BSF    FC0.7
1A48:  BSF    FC2.0
....................    enable_interrupts(global); 
1A4A:  MOVLW  C0
1A4C:  IORWF  FF2,F
....................    sensores(0); 
1A4E:  CLRF   xAE
1A50:  CALL   0822
....................    lcd_gotoxy(1,1); 
1A54:  MOVLW  01
1A56:  MOVWF  xBB
1A58:  MOVWF  xBC
1A5A:  CALL   0874
....................    printf(lcd_putc,"       CABINA       "); 
1A5E:  MOVLW  98
1A60:  MOVWF  FF6
1A62:  MOVLW  01
1A64:  MOVWF  FF7
1A66:  CALL   0920
....................    lcd_gotoxy(1,2); 
1A6A:  MOVLW  01
1A6C:  MOVWF  xBB
1A6E:  MOVLW  02
1A70:  MOVWF  xBC
1A72:  CALL   0874
....................    printf(lcd_putc,"        PCR         "); 
1A76:  MOVLW  AE
1A78:  MOVWF  FF6
1A7A:  MOVLW  01
1A7C:  MOVWF  FF7
1A7E:  CALL   0920
....................    lcd_gotoxy(1,3); 
1A82:  MOVLW  01
1A84:  MOVWF  xBB
1A86:  MOVLW  03
1A88:  MOVWF  xBC
1A8A:  CALL   0874
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
1A8E:  MOVLW  C4
1A90:  MOVWF  FF6
1A92:  MOVLW  01
1A94:  MOVWF  FF7
1A96:  CALL   0920
....................    lcd_gotoxy(1,4); 
1A9A:  MOVLW  01
1A9C:  MOVWF  xBB
1A9E:  MOVLW  04
1AA0:  MOVWF  xBC
1AA2:  CALL   0874
....................    printf(lcd_putc,"   REF:  JPCR-60    "); 
1AA6:  MOVLW  DA
1AA8:  MOVWF  FF6
1AAA:  MOVLW  01
1AAC:  MOVWF  FF7
1AAE:  CALL   0920
....................    delay_ms(2000); 
1AB2:  MOVLW  08
1AB4:  MOVWF  xA9
1AB6:  MOVLW  FA
1AB8:  MOVWF  xBB
1ABA:  CALL   06D8
1ABE:  DECFSZ xA9,F
1AC0:  BRA    1AB6
....................    printf(lcd_putc,"\f");    
1AC2:  MOVLW  0C
1AC4:  MOVWF  xBA
1AC6:  CALL   08D6
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1ACA:  MOVFF  FF2,A9
1ACE:  BCF    FF2.7
1AD0:  CLRF   FA9
1AD2:  BCF    FA6.6
1AD4:  BCF    FA6.7
1AD6:  BSF    FA6.0
1AD8:  MOVF   FA8,W
1ADA:  BTFSC  xA9.7
1ADC:  BSF    FF2.7
1ADE:  MOVWF  3A
1AE0:  MOVLW  14
1AE2:  MOVWF  xBB
1AE4:  CALL   06D8
1AE8:  MOVFF  FF2,A9
1AEC:  BCF    FF2.7
1AEE:  MOVLW  01
1AF0:  MOVWF  FA9
1AF2:  BCF    FA6.6
1AF4:  BCF    FA6.7
1AF6:  BSF    FA6.0
1AF8:  MOVF   FA8,W
1AFA:  BTFSC  xA9.7
1AFC:  BSF    FF2.7
1AFE:  MOVWF  3B
1B00:  MOVLW  14
1B02:  MOVWF  xBB
1B04:  CALL   06D8
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
1B08:  MOVFF  FF2,A9
1B0C:  BCF    FF2.7
1B0E:  MOVLW  02
1B10:  MOVWF  FA9
1B12:  BCF    FA6.6
1B14:  BCF    FA6.7
1B16:  BSF    FA6.0
1B18:  MOVF   FA8,W
1B1A:  BTFSC  xA9.7
1B1C:  BSF    FF2.7
1B1E:  MOVWF  3C
1B20:  MOVLW  14
1B22:  MOVWF  xBB
1B24:  CALL   06D8
1B28:  MOVFF  FF2,A9
1B2C:  BCF    FF2.7
1B2E:  MOVLW  03
1B30:  MOVWF  FA9
1B32:  BCF    FA6.6
1B34:  BCF    FA6.7
1B36:  BSF    FA6.0
1B38:  MOVF   FA8,W
1B3A:  BTFSC  xA9.7
1B3C:  BSF    FF2.7
1B3E:  MOVWF  3D
1B40:  MOVLW  14
1B42:  MOVWF  xBB
1B44:  CALL   06D8
....................    estadoalarma=read_eeprom(5); 
1B48:  MOVFF  FF2,A9
1B4C:  BCF    FF2.7
1B4E:  MOVLW  05
1B50:  MOVWF  FA9
1B52:  BCF    FA6.6
1B54:  BCF    FA6.7
1B56:  BSF    FA6.0
1B58:  MOVF   FA8,W
1B5A:  BTFSC  xA9.7
1B5C:  BSF    FF2.7
1B5E:  MOVWF  01
1B60:  BCF    18.4
1B62:  BTFSC  01.0
1B64:  BSF    18.4
....................    tempo_minutos=read_eeprom(20);tempo_segundos=read_eeprom(30); 
1B66:  MOVFF  FF2,A9
1B6A:  BCF    FF2.7
1B6C:  MOVLW  14
1B6E:  MOVWF  FA9
1B70:  BCF    FA6.6
1B72:  BCF    FA6.7
1B74:  BSF    FA6.0
1B76:  MOVF   FA8,W
1B78:  BTFSC  xA9.7
1B7A:  BSF    FF2.7
1B7C:  MOVWF  28
1B7E:  MOVFF  FF2,A9
1B82:  BCF    FF2.7
1B84:  MOVLW  1E
1B86:  MOVWF  FA9
1B88:  BCF    FA6.6
1B8A:  BCF    FA6.7
1B8C:  BSF    FA6.0
1B8E:  MOVF   FA8,W
1B90:  BTFSC  xA9.7
1B92:  BSF    FF2.7
1B94:  MOVWF  29
....................    segundos=read_eeprom(50);minutos=read_eeprom(51);horasL=read_eeprom(52);horasH=read_eeprom(53);  
1B96:  MOVFF  FF2,A9
1B9A:  BCF    FF2.7
1B9C:  MOVLW  32
1B9E:  MOVWF  FA9
1BA0:  BCF    FA6.6
1BA2:  BCF    FA6.7
1BA4:  BSF    FA6.0
1BA6:  MOVF   FA8,W
1BA8:  BTFSC  xA9.7
1BAA:  BSF    FF2.7
1BAC:  MOVWF  22
1BAE:  MOVFF  FF2,A9
1BB2:  BCF    FF2.7
1BB4:  MOVLW  33
1BB6:  MOVWF  FA9
1BB8:  BCF    FA6.6
1BBA:  BCF    FA6.7
1BBC:  BSF    FA6.0
1BBE:  MOVF   FA8,W
1BC0:  BTFSC  xA9.7
1BC2:  BSF    FF2.7
1BC4:  MOVWF  23
1BC6:  MOVFF  FF2,A9
1BCA:  BCF    FF2.7
1BCC:  MOVLW  34
1BCE:  MOVWF  FA9
1BD0:  BCF    FA6.6
1BD2:  BCF    FA6.7
1BD4:  BSF    FA6.0
1BD6:  MOVF   FA8,W
1BD8:  BTFSC  xA9.7
1BDA:  BSF    FF2.7
1BDC:  MOVWF  24
1BDE:  MOVFF  FF2,A9
1BE2:  BCF    FF2.7
1BE4:  MOVLW  35
1BE6:  MOVWF  FA9
1BE8:  BCF    FA6.6
1BEA:  BCF    FA6.7
1BEC:  BSF    FA6.0
1BEE:  MOVF   FA8,W
1BF0:  BTFSC  xA9.7
1BF2:  BSF    FF2.7
1BF4:  MOVWF  25
....................     
....................    G_l=read_eeprom(60); 
1BF6:  MOVFF  FF2,A9
1BFA:  BCF    FF2.7
1BFC:  MOVLW  3C
1BFE:  MOVWF  FA9
1C00:  BCF    FA6.6
1C02:  BCF    FA6.7
1C04:  BSF    FA6.0
1C06:  MOVF   FA8,W
1C08:  BTFSC  xA9.7
1C0A:  BSF    FF2.7
1C0C:  MOVWF  26
....................    G_h=read_eeprom(61); 
1C0E:  MOVFF  FF2,A9
1C12:  BCF    FF2.7
1C14:  MOVLW  3D
1C16:  MOVWF  FA9
1C18:  BCF    FA6.6
1C1A:  BCF    FA6.7
1C1C:  BSF    FA6.0
1C1E:  MOVF   FA8,W
1C20:  BTFSC  xA9.7
1C22:  BSF    FF2.7
1C24:  MOVWF  27
....................    G16=make16(G_h,G_l); 
1C26:  MOVFF  27,44
1C2A:  MOVFF  26,43
....................    G=G16; 
1C2E:  MOVFF  44,C2
1C32:  MOVFF  43,C1
1C36:  CALL   07EC
1C3A:  MOVFF  03,A8
1C3E:  MOVFF  02,A7
1C42:  MOVFF  01,A6
1C46:  MOVFF  00,A5
....................  
....................    Limita(); 
1C4A:  GOTO   0940
....................    horas=make16(horasH,horasL); 
1C4E:  MOVFF  25,42
1C52:  MOVFF  24,41
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
1C56:  MOVFF  28,2A
1C5A:  MOVFF  29,2B
....................    //segundos=read_eeprom(50);minutos=read_eeprom(51);horas=read_eeprom(52); 
....................    
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1C5E:  MOVF   19,F
1C60:  BTFSS  FD8.2
1C62:  BRA    2014
....................    lcd_gotoxy(1,1); 
1C64:  MOVLW  01
1C66:  MOVWF  xBB
1C68:  MOVWF  xBC
1C6A:  CALL   0874
....................    printf(lcd_putc,"     Ingrese        "); 
1C6E:  MOVLW  F0
1C70:  MOVWF  FF6
1C72:  MOVLW  01
1C74:  MOVWF  FF7
1C76:  CALL   0920
....................    lcd_gotoxy(1,2); 
1C7A:  MOVLW  01
1C7C:  MOVWF  xBB
1C7E:  MOVLW  02
1C80:  MOVWF  xBC
1C82:  CALL   0874
....................    printf(lcd_putc,"    Contraseña      "); 
1C86:  MOVLW  06
1C88:  MOVWF  FF6
1C8A:  MOVLW  02
1C8C:  MOVWF  FF7
1C8E:  CALL   0920
....................    lcd_gotoxy(1,3); 
1C92:  MOVLW  01
1C94:  MOVWF  xBB
1C96:  MOVLW  03
1C98:  MOVWF  xBC
1C9A:  CALL   0874
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1C9E:  MOVLW  1C
1CA0:  MOVWF  FF6
1CA2:  MOVLW  02
1CA4:  MOVWF  FF7
1CA6:  MOVLW  0A
1CA8:  MOVWF  xAD
1CAA:  CALL   0964
1CAE:  MOVFF  36,A9
1CB2:  MOVLW  1F
1CB4:  MOVWF  xAA
1CB6:  CALL   09AA
1CBA:  MOVFF  37,A9
1CBE:  MOVLW  1F
1CC0:  MOVWF  xAA
1CC2:  CALL   09AA
1CC6:  MOVFF  38,A9
1CCA:  MOVLW  1F
1CCC:  MOVWF  xAA
1CCE:  CALL   09AA
1CD2:  MOVFF  39,A9
1CD6:  MOVLW  1F
1CD8:  MOVWF  xAA
1CDA:  CALL   09AA
1CDE:  MOVLW  20
1CE0:  MOVWF  xBA
1CE2:  CALL   08D6
1CE6:  MOVLW  20
1CE8:  MOVWF  xBA
1CEA:  CALL   08D6
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
1CEE:  BSF    F92.5
1CF0:  BTFSS  F80.5
1CF2:  BRA    1D16
....................       {  if(Flanco == 0)  
1CF4:  BTFSC  17.3
1CF6:  BRA    1D14
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
1CF8:  MOVLW  0B
1CFA:  SUBWF  1C,W
1CFC:  CLRF   03
1CFE:  ADDLW  36
1D00:  MOVWF  FE9
1D02:  MOVLW  00
1D04:  ADDWFC 03,W
1D06:  MOVWF  FEA
1D08:  INCF   FEF,F
1D0A:  BSF    17.3
1D0C:  MOVLW  1E
1D0E:  MOVWF  xBB
1D10:  CALL   06D8
....................          else 
1D14:  BRA    1D18
....................             {Flanco = 0;} 
1D16:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1D18:  BSF    F96.0
1D1A:  BTFSS  F84.0
1D1C:  BRA    1D40
....................       {  if(Flanco2 == 0)  
1D1E:  BTFSC  17.5
1D20:  BRA    1D3E
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
1D22:  MOVLW  0B
1D24:  SUBWF  1C,W
1D26:  CLRF   03
1D28:  ADDLW  36
1D2A:  MOVWF  FE9
1D2C:  MOVLW  00
1D2E:  ADDWFC 03,W
1D30:  MOVWF  FEA
1D32:  DECF   FEF,F
1D34:  BSF    17.5
1D36:  MOVLW  1E
1D38:  MOVWF  xBB
1D3A:  CALL   06D8
....................          else 
1D3E:  BRA    1D42
....................             {Flanco2 = 0;} 
1D40:  BCF    17.5
....................     
....................       if(RIGHT)// Si Oprime Derecha 
1D42:  BSF    F96.1
1D44:  BTFSS  F84.1
1D46:  BRA    1D62
....................       {  if(Flanco1 == 0)  
1D48:  BTFSC  17.4
1D4A:  BRA    1D60
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
1D4C:  BSF    17.4
1D4E:  INCF   1C,F
1D50:  MOVLW  1E
1D52:  MOVWF  xBB
1D54:  CALL   06D8
1D58:  MOVLW  0C
1D5A:  MOVWF  xBA
1D5C:  CALL   08D6
....................          else 
1D60:  BRA    1D64
....................             {Flanco1 = 0;}    
1D62:  BCF    17.4
....................              
....................        if(IZQU)// Si Oprime izquierda 
1D64:  BSF    F96.2
1D66:  BTFSS  F84.2
1D68:  BRA    1D8C
....................        { 
....................          delay_ms(150); 
1D6A:  MOVLW  96
1D6C:  MOVWF  xBB
1D6E:  CALL   06D8
....................          if(Flanco3 == 0) 
1D72:  BTFSC  17.6
1D74:  BRA    1D8A
....................          { 
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f"); 
1D76:  BSF    17.6
1D78:  DECF   1C,F
1D7A:  MOVLW  1E
1D7C:  MOVWF  xBB
1D7E:  CALL   06D8
1D82:  MOVLW  0C
1D84:  MOVWF  xBA
1D86:  CALL   08D6
....................          } 
....................        } 
....................        else 
1D8A:  BRA    1D8E
....................        { 
....................          Flanco3 = 0; 
1D8C:  BCF    17.6
....................        } 
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1D8E:  MOVLW  0B
1D90:  SUBWF  1C,W
1D92:  CLRF   03
1D94:  ADDLW  36
1D96:  MOVWF  FE9
1D98:  MOVLW  00
1D9A:  ADDWFC 03,W
1D9C:  MOVWF  FEA
1D9E:  BTFSC  FEF.7
1DA0:  BRA    1DA4
1DA2:  BRA    1DB8
....................        {clave[unidad-11]=9;} 
1DA4:  MOVLW  0B
1DA6:  SUBWF  1C,W
1DA8:  CLRF   03
1DAA:  ADDLW  36
1DAC:  MOVWF  FE9
1DAE:  MOVLW  00
1DB0:  ADDWFC 03,W
1DB2:  MOVWF  FEA
1DB4:  MOVLW  09
1DB6:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1DB8:  MOVLW  0B
1DBA:  SUBWF  1C,W
1DBC:  CLRF   03
1DBE:  ADDLW  36
1DC0:  MOVWF  FE9
1DC2:  MOVLW  00
1DC4:  ADDWFC 03,W
1DC6:  MOVWF  FEA
1DC8:  BTFSC  FEF.7
1DCA:  BRA    1DE4
1DCC:  MOVF   FEF,W
1DCE:  SUBLW  09
1DD0:  BC    1DE4
....................        {clave[unidad-11]=0;} 
1DD2:  MOVLW  0B
1DD4:  SUBWF  1C,W
1DD6:  CLRF   03
1DD8:  ADDLW  36
1DDA:  MOVWF  FE9
1DDC:  MOVLW  00
1DDE:  ADDWFC 03,W
1DE0:  MOVWF  FEA
1DE2:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1DE4:  MOVF   1C,W
1DE6:  SUBLW  0A
1DE8:  BNC   1DEE
....................        {unidad=11;} 
1DEA:  MOVLW  0B
1DEC:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1DEE:  MOVFF  1C,BB
1DF2:  MOVLW  04
1DF4:  MOVWF  xBC
1DF6:  CALL   0874
....................        lcd_putc(t[2]); 
1DFA:  MOVFF  35,BA
1DFE:  CALL   08D6
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1E02:  MOVF   1C,W
1E04:  SUBLW  0E
1E06:  BTFSC  FD8.0
1E08:  BRA    1FF0
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1E0A:  MOVF   36,W
1E0C:  SUBLW  03
1E0E:  BNZ   1EEA
1E10:  MOVF   37,W
1E12:  SUBLW  08
1E14:  BNZ   1EEA
1E16:  MOVF   38,W
1E18:  SUBLW  09
1E1A:  BNZ   1EEA
1E1C:  MOVF   39,W
1E1E:  SUBLW  02
1E20:  BNZ   1EEA
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1E22:  CLRF   FA9
1E24:  CLRF   FA8
1E26:  BCF    FA6.6
1E28:  BCF    FA6.7
1E2A:  BSF    FA6.2
1E2C:  MOVF   FF2,W
1E2E:  MOVWF  00
1E30:  BCF    FF2.7
1E32:  MOVLB  F
1E34:  MOVLW  55
1E36:  MOVWF  FA7
1E38:  MOVLW  AA
1E3A:  MOVWF  FA7
1E3C:  BSF    FA6.1
1E3E:  BTFSC  FA6.1
1E40:  BRA    1E3E
1E42:  BCF    FA6.2
1E44:  MOVF   00,W
1E46:  IORWF  FF2,F
1E48:  MOVLW  14
1E4A:  MOVLB  0
1E4C:  MOVWF  xBB
1E4E:  CALL   06D8
1E52:  MOVLW  01
1E54:  MOVWF  FA9
1E56:  CLRF   FA8
1E58:  BCF    FA6.6
1E5A:  BCF    FA6.7
1E5C:  BSF    FA6.2
1E5E:  MOVF   FF2,W
1E60:  MOVWF  00
1E62:  BCF    FF2.7
1E64:  MOVLB  F
1E66:  MOVLW  55
1E68:  MOVWF  FA7
1E6A:  MOVLW  AA
1E6C:  MOVWF  FA7
1E6E:  BSF    FA6.1
1E70:  BTFSC  FA6.1
1E72:  BRA    1E70
1E74:  BCF    FA6.2
1E76:  MOVF   00,W
1E78:  IORWF  FF2,F
1E7A:  MOVLW  14
1E7C:  MOVLB  0
1E7E:  MOVWF  xBB
1E80:  CALL   06D8
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1E84:  MOVLW  02
1E86:  MOVWF  FA9
1E88:  CLRF   FA8
1E8A:  BCF    FA6.6
1E8C:  BCF    FA6.7
1E8E:  BSF    FA6.2
1E90:  MOVF   FF2,W
1E92:  MOVWF  00
1E94:  BCF    FF2.7
1E96:  MOVLB  F
1E98:  MOVLW  55
1E9A:  MOVWF  FA7
1E9C:  MOVLW  AA
1E9E:  MOVWF  FA7
1EA0:  BSF    FA6.1
1EA2:  BTFSC  FA6.1
1EA4:  BRA    1EA2
1EA6:  BCF    FA6.2
1EA8:  MOVF   00,W
1EAA:  IORWF  FF2,F
1EAC:  MOVLW  14
1EAE:  MOVLB  0
1EB0:  MOVWF  xBB
1EB2:  CALL   06D8
1EB6:  MOVLW  03
1EB8:  MOVWF  FA9
1EBA:  CLRF   FA8
1EBC:  BCF    FA6.6
1EBE:  BCF    FA6.7
1EC0:  BSF    FA6.2
1EC2:  MOVF   FF2,W
1EC4:  MOVWF  00
1EC6:  BCF    FF2.7
1EC8:  MOVLB  F
1ECA:  MOVLW  55
1ECC:  MOVWF  FA7
1ECE:  MOVLW  AA
1ED0:  MOVWF  FA7
1ED2:  BSF    FA6.1
1ED4:  BTFSC  FA6.1
1ED6:  BRA    1ED4
1ED8:  BCF    FA6.2
1EDA:  MOVF   00,W
1EDC:  IORWF  FF2,F
1EDE:  MOVLW  14
1EE0:  MOVLB  0
1EE2:  MOVWF  xBB
1EE4:  CALL   06D8
....................              reset_cpu();} 
1EE8:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
1EEA:  MOVF   3A,W
1EEC:  SUBWF  36,W
1EEE:  BNZ   1F82
1EF0:  MOVF   3B,W
1EF2:  SUBWF  37,W
1EF4:  BNZ   1F82
1EF6:  MOVF   3C,W
1EF8:  SUBWF  38,W
1EFA:  BNZ   1F82
1EFC:  MOVF   3D,W
1EFE:  SUBWF  39,W
1F00:  BNZ   1F82
....................             {lcd_gotoxy(1,1); 
1F02:  MOVLW  01
1F04:  MOVWF  xBB
1F06:  MOVWF  xBC
1F08:  CALL   0874
....................             printf(lcd_putc,"                   "); 
1F0C:  MOVLW  32
1F0E:  MOVWF  FF6
1F10:  MOVLW  02
1F12:  MOVWF  FF7
1F14:  CALL   0920
....................             lcd_gotoxy(1,2); 
1F18:  MOVLW  01
1F1A:  MOVWF  xBB
1F1C:  MOVLW  02
1F1E:  MOVWF  xBC
1F20:  CALL   0874
....................             printf(lcd_putc,"     Contraseña    "); 
1F24:  MOVLW  46
1F26:  MOVWF  FF6
1F28:  MOVLW  02
1F2A:  MOVWF  FF7
1F2C:  CALL   0920
....................             lcd_gotoxy(1,3); 
1F30:  MOVLW  01
1F32:  MOVWF  xBB
1F34:  MOVLW  03
1F36:  MOVWF  xBC
1F38:  CALL   0874
....................             printf(lcd_putc,"      Correcta     "); 
1F3C:  MOVLW  5A
1F3E:  MOVWF  FF6
1F40:  MOVLW  02
1F42:  MOVWF  FF7
1F44:  CALL   0920
....................             lcd_gotoxy(1,4); 
1F48:  MOVLW  01
1F4A:  MOVWF  xBB
1F4C:  MOVLW  04
1F4E:  MOVWF  xBC
1F50:  CALL   0874
....................             printf(lcd_putc,"                   "); 
1F54:  MOVLW  6E
1F56:  MOVWF  FF6
1F58:  MOVLW  02
1F5A:  MOVWF  FF7
1F5C:  CALL   0920
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");} 
1F60:  MOVLW  04
1F62:  MOVWF  xA9
1F64:  MOVLW  FA
1F66:  MOVWF  xBB
1F68:  CALL   06D8
1F6C:  DECFSZ xA9,F
1F6E:  BRA    1F64
1F70:  MOVLW  32
1F72:  MOVWF  19
1F74:  MOVLW  0B
1F76:  MOVWF  1C
1F78:  MOVLW  0C
1F7A:  MOVWF  xBA
1F7C:  CALL   08D6
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
1F80:  BRA    1FF0
....................          {lcd_gotoxy(1,1); 
1F82:  MOVLW  01
1F84:  MOVWF  xBB
1F86:  MOVWF  xBC
1F88:  CALL   0874
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
1F8C:  MOVLW  01
1F8E:  MOVWF  xBB
1F90:  MOVLW  02
1F92:  MOVWF  xBC
1F94:  CALL   0874
....................             printf(lcd_putc,"     Contraseña    "); 
1F98:  MOVLW  82
1F9A:  MOVWF  FF6
1F9C:  MOVLW  02
1F9E:  MOVWF  FF7
1FA0:  CALL   0920
....................             lcd_gotoxy(1,3); 
1FA4:  MOVLW  01
1FA6:  MOVWF  xBB
1FA8:  MOVLW  03
1FAA:  MOVWF  xBC
1FAC:  CALL   0874
....................             printf(lcd_putc,"     Incorrecta    "); 
1FB0:  MOVLW  96
1FB2:  MOVWF  FF6
1FB4:  MOVLW  02
1FB6:  MOVWF  FF7
1FB8:  CALL   0920
....................             lcd_gotoxy(1,4); 
1FBC:  MOVLW  01
1FBE:  MOVWF  xBB
1FC0:  MOVLW  04
1FC2:  MOVWF  xBC
1FC4:  CALL   0874
....................             printf(lcd_putc,"                   "); 
1FC8:  MOVLW  AA
1FCA:  MOVWF  FF6
1FCC:  MOVLW  02
1FCE:  MOVWF  FF7
1FD0:  CALL   0920
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");} 
1FD4:  MOVLW  04
1FD6:  MOVWF  xA9
1FD8:  MOVLW  FA
1FDA:  MOVWF  xBB
1FDC:  CALL   06D8
1FE0:  DECFSZ xA9,F
1FE2:  BRA    1FD8
1FE4:  MOVLW  0B
1FE6:  MOVWF  1C
1FE8:  MOVLW  0C
1FEA:  MOVWF  xBA
1FEC:  CALL   08D6
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
1FF0:  MOVF   1C,W
1FF2:  SUBLW  0B
1FF4:  BC    2014
1FF6:  MOVF   1C,W
1FF8:  SUBLW  0D
1FFA:  BNC   2014
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1FFC:  MOVLW  01
1FFE:  SUBWF  1C,W
2000:  MOVWF  xA9
2002:  MOVWF  xBB
2004:  MOVLW  04
2006:  MOVWF  xBC
2008:  CALL   0874
....................             lcd_putc(t[1]); 
200C:  MOVFF  34,BA
2010:  CALL   08D6
....................           } 
....................  
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2014:  DECFSZ 19,W
2016:  BRA    2208
....................    lcd_gotoxy(1,1); 
2018:  MOVLW  01
201A:  MOVWF  xBB
201C:  MOVWF  xBC
201E:  CALL   0874
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
2022:  MOVLW  BE
2024:  MOVWF  FF6
2026:  MOVLW  02
2028:  MOVWF  FF7
202A:  CALL   0920
....................       if(paso<0) 
202E:  BTFSC  32.7
2030:  BRA    2034
2032:  BRA    2036
....................         {paso=0;} 
2034:  CLRF   32
....................          
....................       if(UP)//Si oprime hacia arriba 
2036:  BSF    F92.5
2038:  BTFSS  F80.5
203A:  BRA    2056
....................       { 
....................          if(Flanco == 0) 
203C:  BTFSC  17.3
203E:  BRA    2054
....................          { 
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
2040:  DECF   1F,F
2042:  DECF   1D,F
2044:  MOVLW  01
2046:  ADDWF  1D,W
2048:  MOVWF  1E
204A:  BSF    17.3
204C:  MOVLW  1E
204E:  MOVWF  xBB
2050:  CALL   06D8
....................          } 
....................       } 
....................       else 
2054:  BRA    2058
....................       { 
....................          Flanco = 0; 
2056:  BCF    17.3
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2058:  BSF    F96.0
205A:  BTFSS  F84.0
205C:  BRA    2078
....................       { 
....................          if(Flanco2 == 0) 
205E:  BTFSC  17.5
2060:  BRA    2076
....................          { 
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
2062:  INCF   1F,F
2064:  INCF   1D,F
2066:  MOVLW  01
2068:  SUBWF  1D,W
206A:  MOVWF  1E
206C:  BSF    17.5
206E:  MOVLW  1E
2070:  MOVWF  xBB
2072:  CALL   06D8
....................          } 
....................       } 
....................       else 
2076:  BRA    207A
....................       { 
....................          Flanco2 = 0; 
2078:  BCF    17.5
....................       } 
....................     
....................          
....................         if(Flecha2>nMenuH) 
207A:  MOVF   1F,W
207C:  SUBWF  21,W
207E:  BC    2090
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
2080:  INCF   32,F
2082:  MOVFF  1F,21
2086:  MOVLW  02
2088:  SUBWF  21,W
208A:  MOVWF  20
208C:  MOVLW  04
208E:  MOVWF  1D
....................          
....................         if(Flecha2<nMenuL) 
2090:  MOVF   20,W
2092:  SUBWF  1F,W
2094:  BC    20A6
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
2096:  DECF   32,F
2098:  MOVFF  1F,20
209C:  MOVLW  02
209E:  ADDWF  20,W
20A0:  MOVWF  21
20A2:  MOVLW  02
20A4:  MOVWF  1D
....................          
....................         if(Flecha2>n_opcionH) 
20A6:  MOVF   1F,W
20A8:  SUBWF  1A,W
20AA:  BC    20BE
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
20AC:  MOVFF  1B,1F
20B0:  MOVLW  02
20B2:  MOVWF  1D
20B4:  CLRF   32
20B6:  MOVFF  1F,20
20BA:  ADDWF  20,W
20BC:  MOVWF  21
....................          
....................         if(Flecha2<n_opcionL) 
20BE:  MOVF   1B,W
20C0:  SUBWF  1F,W
20C2:  BC    20DA
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}                
20C4:  MOVFF  1A,1F
20C8:  MOVLW  04
20CA:  MOVWF  1D
20CC:  SUBWF  1A,W
20CE:  MOVWF  32
20D0:  MOVFF  1F,21
20D4:  MOVLW  02
20D6:  SUBWF  21,W
20D8:  MOVWF  20
....................          
....................         mensajes(1+paso,2); 
20DA:  MOVLW  01
20DC:  ADDWF  32,W
20DE:  MOVWF  xA9
20E0:  MOVWF  xAA
20E2:  MOVLW  02
20E4:  MOVWF  xAB
20E6:  CALL   0A72
....................         mensajes(2+paso,3); 
20EA:  MOVLW  02
20EC:  ADDWF  32,W
20EE:  MOVWF  xA9
20F0:  MOVWF  xAA
20F2:  MOVLW  03
20F4:  MOVWF  xAB
20F6:  CALL   0A72
....................         mensajes(3+paso,4); 
20FA:  MOVLW  03
20FC:  ADDWF  32,W
20FE:  MOVWF  xA9
2100:  MOVWF  xAA
2102:  MOVLW  04
2104:  MOVWF  xAB
2106:  CALL   0A72
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
210A:  MOVLW  01
210C:  MOVWF  xBB
210E:  MOVFF  1D,BC
2112:  CALL   0874
....................         lcd_putc(t[0]); 
2116:  MOVFF  33,BA
211A:  CALL   08D6
....................  
....................         if(Flecha==2) 
211E:  MOVF   1D,W
2120:  SUBLW  02
2122:  BNZ   214C
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2124:  MOVLW  01
2126:  MOVWF  xBB
2128:  MOVLW  04
212A:  MOVWF  xBC
212C:  CALL   0874
....................             lcd_putc(t[1]); 
2130:  MOVFF  34,BA
2134:  CALL   08D6
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2138:  MOVLW  01
213A:  MOVWF  xBB
213C:  MOVLW  03
213E:  MOVWF  xBC
2140:  CALL   0874
....................             lcd_putc(t[1]); 
2144:  MOVFF  34,BA
2148:  CALL   08D6
....................           } 
....................          
....................         if(Flecha==4) 
214C:  MOVF   1D,W
214E:  SUBLW  04
2150:  BNZ   217A
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2152:  MOVLW  01
2154:  MOVWF  xBB
2156:  MOVLW  02
2158:  MOVWF  xBC
215A:  CALL   0874
....................             lcd_putc(t[1]); 
215E:  MOVFF  34,BA
2162:  CALL   08D6
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2166:  MOVLW  01
2168:  MOVWF  xBB
216A:  MOVLW  03
216C:  MOVWF  xBC
216E:  CALL   0874
....................             lcd_putc(t[1]); 
2172:  MOVFF  34,BA
2176:  CALL   08D6
....................           } 
....................          
....................         if(Flecha==3) 
217A:  MOVF   1D,W
217C:  SUBLW  03
217E:  BNZ   21A8
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2180:  MOVLW  01
2182:  MOVWF  xBB
2184:  MOVLW  04
2186:  MOVWF  xBC
2188:  CALL   0874
....................             lcd_putc(t[1]); 
218C:  MOVFF  34,BA
2190:  CALL   08D6
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2194:  MOVLW  01
2196:  MOVWF  xBB
2198:  MOVLW  02
219A:  MOVWF  xBC
219C:  CALL   0874
....................             lcd_putc(t[1]); 
21A0:  MOVFF  34,BA
21A4:  CALL   08D6
....................           } 
....................  
....................        if(RIGHT)// Si oprime derecha 
21A8:  BSF    F96.1
21AA:  BTFSS  F84.1
21AC:  BRA    21E4
....................        { 
....................          if(Flanco1 == 0) 
21AE:  BTFSC  17.4
21B0:  BRA    21E2
....................          { 
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
21B2:  BSF    17.4
21B4:  MOVFF  1F,19
21B8:  MOVLW  03
21BA:  MOVWF  1D
21BC:  MOVLW  02
21BE:  MOVWF  xA9
21C0:  MOVLW  96
21C2:  MOVWF  xBB
21C4:  CALL   06D8
21C8:  DECFSZ xA9,F
21CA:  BRA    21C0
21CC:  MOVLW  0C
21CE:  MOVWF  xBA
21D0:  CALL   08D6
....................             if(Menu==6) 
21D4:  MOVF   19,W
21D6:  SUBLW  06
21D8:  BNZ   21E2
....................             { 
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
21DA:  CLRF   36
21DC:  CLRF   37
21DE:  CLRF   38
21E0:  CLRF   39
....................             } 
....................          } 
....................        } 
....................        else 
21E2:  BRA    21E6
....................        { 
....................          Flanco1 = 0; 
21E4:  BCF    17.4
....................        } 
....................              
....................        if(IZQU) 
21E6:  BSF    F96.2
21E8:  BTFSS  F84.2
21EA:  BRA    2208
....................        { 
....................          delay_ms(500);Menu=50;printf(lcd_putc,"\f"); 
21EC:  MOVLW  02
21EE:  MOVWF  xA9
21F0:  MOVLW  FA
21F2:  MOVWF  xBB
21F4:  CALL   06D8
21F8:  DECFSZ xA9,F
21FA:  BRA    21F0
21FC:  MOVLW  32
21FE:  MOVWF  19
2200:  MOVLW  0C
2202:  MOVWF  xBA
2204:  CALL   08D6
....................        } 
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
2208:  MOVF   19,W
220A:  SUBLW  02
220C:  BTFSS  FD8.2
220E:  BRA    2452
....................     
....................    lcd_gotoxy(1,1); 
2210:  MOVLW  01
2212:  MOVWF  xBB
2214:  MOVWF  xBC
2216:  CALL   0874
....................    printf(lcd_putc,"    Temporizador     "); 
221A:  MOVLW  D4
221C:  MOVWF  FF6
221E:  MOVLW  02
2220:  MOVWF  FF7
2222:  CALL   0920
....................    lcd_gotoxy(1,2); 
2226:  MOVLW  01
2228:  MOVWF  xBB
222A:  MOVLW  02
222C:  MOVWF  xBC
222E:  CALL   0874
....................    printf(lcd_putc,"       Luz UV        "); 
2232:  MOVLW  EA
2234:  MOVWF  FF6
2236:  MOVLW  02
2238:  MOVWF  FF7
223A:  CALL   0920
....................    lcd_gotoxy(6,3); 
223E:  MOVLW  06
2240:  MOVWF  xBB
2242:  MOVLW  03
2244:  MOVWF  xBC
2246:  CALL   0874
....................    printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
224A:  MOVFF  2A,A9
224E:  MOVLW  03
2250:  MOVWF  xAA
2252:  CALL   0B10
2256:  MOVLW  3A
2258:  MOVWF  xBA
225A:  CALL   08D6
225E:  MOVFF  2B,A9
2262:  MOVLW  01
2264:  MOVWF  xAA
2266:  CALL   0B10
226A:  MOVLW  09
226C:  MOVWF  FF6
226E:  MOVLW  03
2270:  MOVWF  FF7
2272:  MOVLW  08
2274:  MOVWF  xAD
2276:  CALL   0964
....................     
....................    lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
227A:  MOVLW  06
227C:  ADDWF  2F,W
227E:  MOVWF  xA9
2280:  MOVWF  xBB
2282:  MOVLW  04
2284:  MOVWF  xBC
2286:  CALL   0874
....................    lcd_putc(t[2]); 
228A:  MOVFF  35,BA
228E:  CALL   08D6
....................     
....................    if(UP) 
2292:  BSF    F92.5
2294:  BTFSS  F80.5
2296:  BRA    22D4
....................    { 
....................       if(unidad2==1) 
2298:  DECFSZ 2F,W
229A:  BRA    22B6
....................       { 
....................          if(tempo_minutos_pro<240) 
229C:  MOVF   2A,W
229E:  SUBLW  EF
22A0:  BNC   22B6
....................          { 
....................             tempo_minutos_pro+=5;delay_ms(300); 
22A2:  MOVLW  05
22A4:  ADDWF  2A,F
22A6:  MOVLW  02
22A8:  MOVWF  xA9
22AA:  MOVLW  96
22AC:  MOVWF  xBB
22AE:  CALL   06D8
22B2:  DECFSZ xA9,F
22B4:  BRA    22AA
....................          } 
....................       } 
....................        
....................       if(unidad2==4) 
22B6:  MOVF   2F,W
22B8:  SUBLW  04
22BA:  BNZ   22D4
....................       { 
....................          if(tempo_segundos_pro<60) 
22BC:  MOVF   2B,W
22BE:  SUBLW  3B
22C0:  BNC   22D4
....................          { 
....................             tempo_segundos_pro++;delay_ms(300); 
22C2:  INCF   2B,F
22C4:  MOVLW  02
22C6:  MOVWF  xA9
22C8:  MOVLW  96
22CA:  MOVWF  xBB
22CC:  CALL   06D8
22D0:  DECFSZ xA9,F
22D2:  BRA    22C8
....................          } 
....................       } 
....................    } 
....................     
....................    if(DOWN) 
22D4:  BSF    F96.0
22D6:  BTFSS  F84.0
22D8:  BRA    2346
....................    { 
....................       if(unidad2==1) 
22DA:  DECFSZ 2F,W
22DC:  BRA    2310
....................       { 
....................          if(tempo_minutos_pro>0) 
22DE:  MOVF   2A,F
22E0:  BZ    22F6
....................          { 
....................             tempo_minutos_pro-=5;delay_ms(300); 
22E2:  MOVLW  05
22E4:  SUBWF  2A,F
22E6:  MOVLW  02
22E8:  MOVWF  xA9
22EA:  MOVLW  96
22EC:  MOVWF  xBB
22EE:  CALL   06D8
22F2:  DECFSZ xA9,F
22F4:  BRA    22EA
....................          } 
....................           
....................          if(tempo_minutos_pro>240) 
22F6:  MOVF   2A,W
22F8:  SUBLW  F0
22FA:  BC    2310
....................          { 
....................             tempo_minutos_pro=240;delay_ms(300); 
22FC:  MOVLW  F0
22FE:  MOVWF  2A
2300:  MOVLW  02
2302:  MOVWF  xA9
2304:  MOVLW  96
2306:  MOVWF  xBB
2308:  CALL   06D8
230C:  DECFSZ xA9,F
230E:  BRA    2304
....................          } 
....................       } 
....................        
....................       if(unidad2==4) 
2310:  MOVF   2F,W
2312:  SUBLW  04
2314:  BNZ   2346
....................       { 
....................          if(tempo_segundos_pro>0) 
2316:  MOVF   2B,F
2318:  BZ    232C
....................          { 
....................             tempo_segundos_pro--;delay_ms(300); 
231A:  DECF   2B,F
231C:  MOVLW  02
231E:  MOVWF  xA9
2320:  MOVLW  96
2322:  MOVWF  xBB
2324:  CALL   06D8
2328:  DECFSZ xA9,F
232A:  BRA    2320
....................          } 
....................           
....................          if(tempo_segundos_pro>59) 
232C:  MOVF   2B,W
232E:  SUBLW  3B
2330:  BC    2346
....................          { 
....................             tempo_segundos_pro=59;delay_ms(300); 
2332:  MOVLW  3B
2334:  MOVWF  2B
2336:  MOVLW  02
2338:  MOVWF  xA9
233A:  MOVLW  96
233C:  MOVWF  xBB
233E:  CALL   06D8
2342:  DECFSZ xA9,F
2344:  BRA    233A
....................          } 
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
2346:  BSF    F96.1
2348:  BTFSS  F84.1
234A:  BRA    2378
....................    { 
....................       if(unidad2==1) 
234C:  DECFSZ 2F,W
234E:  BRA    2356
....................       { 
....................          unidad2=4; 
2350:  MOVLW  04
2352:  MOVWF  2F
....................       } 
....................       else 
2354:  BRA    2360
....................       { 
....................          if(unidad2==4) 
2356:  MOVF   2F,W
2358:  SUBLW  04
235A:  BNZ   2360
....................          { 
....................             unidad2=1; 
235C:  MOVLW  01
235E:  MOVWF  2F
....................          } 
....................       } 
....................       delay_ms(500); 
2360:  MOVLW  02
2362:  MOVWF  xA9
2364:  MOVLW  FA
2366:  MOVWF  xBB
2368:  CALL   06D8
236C:  DECFSZ xA9,F
236E:  BRA    2364
....................       printf(lcd_putc,"\f"); 
2370:  MOVLW  0C
2372:  MOVWF  xBA
2374:  CALL   08D6
....................    } 
....................     
....................    if(IZQU) 
2378:  BSF    F96.2
237A:  BTFSS  F84.2
237C:  BRA    2452
....................    { 
....................       delay_ms(200); 
237E:  MOVLW  C8
2380:  MOVWF  xBB
2382:  CALL   06D8
....................       printf(lcd_putc,"\f"); 
2386:  MOVLW  0C
2388:  MOVWF  xBA
238A:  CALL   08D6
....................       lcd_gotoxy(1,2); 
238E:  MOVLW  01
2390:  MOVWF  xBB
2392:  MOVLW  02
2394:  MOVWF  xBC
2396:  CALL   0874
....................       printf(lcd_putc,"Tiempo Almacenado"); 
239A:  MOVLW  12
239C:  MOVWF  FF6
239E:  MOVLW  03
23A0:  MOVWF  FF7
23A2:  CALL   0920
....................       lcd_gotoxy(1,3); 
23A6:  MOVLW  01
23A8:  MOVWF  xBB
23AA:  MOVLW  03
23AC:  MOVWF  xBC
23AE:  CALL   0874
....................       printf(lcd_putc,"  Correctamente  "); 
23B2:  MOVLW  24
23B4:  MOVWF  FF6
23B6:  MOVLW  03
23B8:  MOVWF  FF7
23BA:  CALL   0920
....................       write_eeprom(20,tempo_minutos_pro); 
23BE:  MOVLW  14
23C0:  MOVWF  FA9
23C2:  MOVFF  2A,FA8
23C6:  BCF    FA6.6
23C8:  BCF    FA6.7
23CA:  BSF    FA6.2
23CC:  MOVF   FF2,W
23CE:  MOVWF  00
23D0:  BCF    FF2.7
23D2:  MOVLB  F
23D4:  MOVLW  55
23D6:  MOVWF  FA7
23D8:  MOVLW  AA
23DA:  MOVWF  FA7
23DC:  BSF    FA6.1
23DE:  BTFSC  FA6.1
23E0:  BRA    23DE
23E2:  BCF    FA6.2
23E4:  MOVF   00,W
23E6:  IORWF  FF2,F
....................       delay_ms(30); 
23E8:  MOVLW  1E
23EA:  MOVLB  0
23EC:  MOVWF  xBB
23EE:  CALL   06D8
....................       write_eeprom(30,tempo_segundos_pro); 
23F2:  MOVLW  1E
23F4:  MOVWF  FA9
23F6:  MOVFF  2B,FA8
23FA:  BCF    FA6.6
23FC:  BCF    FA6.7
23FE:  BSF    FA6.2
2400:  MOVF   FF2,W
2402:  MOVWF  00
2404:  BCF    FF2.7
2406:  MOVLB  F
2408:  MOVLW  55
240A:  MOVWF  FA7
240C:  MOVLW  AA
240E:  MOVWF  FA7
2410:  BSF    FA6.1
2412:  BTFSC  FA6.1
2414:  BRA    2412
2416:  BCF    FA6.2
2418:  MOVF   00,W
241A:  IORWF  FF2,F
....................       tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
241C:  MOVFF  2A,28
2420:  MOVFF  2B,29
....................       delay_ms(700); 
2424:  MOVLW  04
2426:  MOVLB  0
2428:  MOVWF  xA9
242A:  MOVLW  AF
242C:  MOVWF  xBB
242E:  CALL   06D8
2432:  DECFSZ xA9,F
2434:  BRA    242A
....................       delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2436:  MOVLW  1E
2438:  MOVWF  xBB
243A:  CALL   06D8
243E:  MOVLW  01
2440:  MOVWF  19
2442:  CLRF   32
2444:  MOVLW  02
2446:  MOVWF  1D
2448:  MOVWF  1F
244A:  MOVLW  0C
244C:  MOVWF  xBA
244E:  CALL   08D6
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
2452:  MOVF   19,W
2454:  SUBLW  03
2456:  BTFSS  FD8.2
2458:  BRA    2752
....................    lcd_gotoxy(1,1); 
245A:  MOVLW  01
245C:  MOVWF  xBB
245E:  MOVWF  xBC
2460:  CALL   0874
....................    printf(lcd_putc,"      Ingrese       "); 
2464:  MOVLW  36
2466:  MOVWF  FF6
2468:  MOVLW  03
246A:  MOVWF  FF7
246C:  CALL   0920
....................    lcd_gotoxy(1,2); 
2470:  MOVLW  01
2472:  MOVWF  xBB
2474:  MOVLW  02
2476:  MOVWF  xBC
2478:  CALL   0874
....................    printf(lcd_putc," Contraseña Actual  "); 
247C:  MOVLW  4C
247E:  MOVWF  FF6
2480:  MOVLW  03
2482:  MOVWF  FF7
2484:  CALL   0920
....................    lcd_gotoxy(1,3); 
2488:  MOVLW  01
248A:  MOVWF  xBB
248C:  MOVLW  03
248E:  MOVWF  xBC
2490:  CALL   0874
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2494:  MOVLW  62
2496:  MOVWF  FF6
2498:  MOVLW  03
249A:  MOVWF  FF7
249C:  MOVLW  0A
249E:  MOVWF  xAD
24A0:  CALL   0964
24A4:  MOVFF  36,A9
24A8:  MOVLW  1F
24AA:  MOVWF  xAA
24AC:  CALL   09AA
24B0:  MOVFF  37,A9
24B4:  MOVLW  1F
24B6:  MOVWF  xAA
24B8:  CALL   09AA
24BC:  MOVFF  38,A9
24C0:  MOVLW  1F
24C2:  MOVWF  xAA
24C4:  CALL   09AA
24C8:  MOVFF  39,A9
24CC:  MOVLW  1F
24CE:  MOVWF  xAA
24D0:  CALL   09AA
24D4:  MOVLW  20
24D6:  MOVWF  xBA
24D8:  CALL   08D6
24DC:  MOVLW  20
24DE:  MOVWF  xBA
24E0:  CALL   08D6
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
24E4:  BSF    F92.5
24E6:  BTFSS  F80.5
24E8:  BRA    250C
....................       {  if(Flanco == 0)  
24EA:  BTFSC  17.3
24EC:  BRA    250A
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
24EE:  MOVLW  0B
24F0:  SUBWF  1C,W
24F2:  CLRF   03
24F4:  ADDLW  36
24F6:  MOVWF  FE9
24F8:  MOVLW  00
24FA:  ADDWFC 03,W
24FC:  MOVWF  FEA
24FE:  INCF   FEF,F
2500:  BSF    17.3
2502:  MOVLW  1E
2504:  MOVWF  xBB
2506:  CALL   06D8
....................          else 
250A:  BRA    250E
....................             {Flanco = 0;} 
250C:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
250E:  BSF    F96.0
2510:  BTFSS  F84.0
2512:  BRA    2536
....................       {  if(Flanco2 == 0)  
2514:  BTFSC  17.5
2516:  BRA    2534
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2518:  MOVLW  0B
251A:  SUBWF  1C,W
251C:  CLRF   03
251E:  ADDLW  36
2520:  MOVWF  FE9
2522:  MOVLW  00
2524:  ADDWFC 03,W
2526:  MOVWF  FEA
2528:  DECF   FEF,F
252A:  BSF    17.5
252C:  MOVLW  1E
252E:  MOVWF  xBB
2530:  CALL   06D8
....................          else 
2534:  BRA    2538
....................             {Flanco2 = 0;} 
2536:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime derecha 
2538:  BSF    F96.1
253A:  BTFSS  F84.1
253C:  BRA    2558
....................       {  if(Flanco1 == 0)  
253E:  BTFSC  17.4
2540:  BRA    2556
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
2542:  BSF    17.4
2544:  INCF   1C,F
2546:  MOVLW  1E
2548:  MOVWF  xBB
254A:  CALL   06D8
254E:  MOVLW  0C
2550:  MOVWF  xBA
2552:  CALL   08D6
....................          else 
2556:  BRA    255A
....................             {Flanco1 = 0;}    
2558:  BCF    17.4
....................              
....................        if(IZQU)// Si oprime Izquierda 
255A:  BSF    F96.2
255C:  BTFSS  F84.2
255E:  BRA    257A
....................       {  if(Flanco3 == 0)  
2560:  BTFSC  17.6
2562:  BRA    2578
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
2564:  BSF    17.6
2566:  DECF   1C,F
2568:  MOVLW  1E
256A:  MOVWF  xBB
256C:  CALL   06D8
2570:  MOVLW  0C
2572:  MOVWF  xBA
2574:  CALL   08D6
....................          else 
2578:  BRA    257C
....................             {Flanco3 = 0;}     
257A:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
257C:  MOVLW  0B
257E:  SUBWF  1C,W
2580:  CLRF   03
2582:  ADDLW  36
2584:  MOVWF  FE9
2586:  MOVLW  00
2588:  ADDWFC 03,W
258A:  MOVWF  FEA
258C:  BTFSC  FEF.7
258E:  BRA    2592
2590:  BRA    25A6
....................        {clave[unidad-11]=9;} 
2592:  MOVLW  0B
2594:  SUBWF  1C,W
2596:  CLRF   03
2598:  ADDLW  36
259A:  MOVWF  FE9
259C:  MOVLW  00
259E:  ADDWFC 03,W
25A0:  MOVWF  FEA
25A2:  MOVLW  09
25A4:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
25A6:  MOVLW  0B
25A8:  SUBWF  1C,W
25AA:  CLRF   03
25AC:  ADDLW  36
25AE:  MOVWF  FE9
25B0:  MOVLW  00
25B2:  ADDWFC 03,W
25B4:  MOVWF  FEA
25B6:  BTFSC  FEF.7
25B8:  BRA    25D2
25BA:  MOVF   FEF,W
25BC:  SUBLW  09
25BE:  BC    25D2
....................        {clave[unidad-11]=0;} 
25C0:  MOVLW  0B
25C2:  SUBWF  1C,W
25C4:  CLRF   03
25C6:  ADDLW  36
25C8:  MOVWF  FE9
25CA:  MOVLW  00
25CC:  ADDWFC 03,W
25CE:  MOVWF  FEA
25D0:  CLRF   FEF
....................        if(unidad<11) 
25D2:  MOVF   1C,W
25D4:  SUBLW  0A
25D6:  BNC   25F8
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);} 
25D8:  MOVLW  01
25DA:  MOVWF  19
25DC:  CLRF   32
25DE:  MOVLW  02
25E0:  MOVWF  1D
25E2:  MOVWF  1F
25E4:  MOVLW  0B
25E6:  MOVWF  1C
25E8:  MOVLW  02
25EA:  MOVWF  xA9
25EC:  MOVLW  FA
25EE:  MOVWF  xBB
25F0:  CALL   06D8
25F4:  DECFSZ xA9,F
25F6:  BRA    25EC
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
25F8:  MOVFF  1C,BB
25FC:  MOVLW  04
25FE:  MOVWF  xBC
2600:  CALL   0874
....................        lcd_putc(t[2]); 
2604:  MOVFF  35,BA
2608:  CALL   08D6
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
260C:  MOVF   1C,W
260E:  SUBLW  0E
2610:  BTFSC  FD8.0
2612:  BRA    272E
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
2614:  MOVF   3A,W
2616:  SUBWF  36,W
2618:  BNZ   26B4
261A:  MOVF   3B,W
261C:  SUBWF  37,W
261E:  BNZ   26B4
2620:  MOVF   3C,W
2622:  SUBWF  38,W
2624:  BNZ   26B4
2626:  MOVF   3D,W
2628:  SUBWF  39,W
262A:  BNZ   26B4
....................             {lcd_gotoxy(1,1); 
262C:  MOVLW  01
262E:  MOVWF  xBB
2630:  MOVWF  xBC
2632:  CALL   0874
....................             printf(lcd_putc,"                    "); 
2636:  MOVLW  78
2638:  MOVWF  FF6
263A:  MOVLW  03
263C:  MOVWF  FF7
263E:  CALL   0920
....................             lcd_gotoxy(1,2); 
2642:  MOVLW  01
2644:  MOVWF  xBB
2646:  MOVLW  02
2648:  MOVWF  xBC
264A:  CALL   0874
....................             printf(lcd_putc,"     Contraseña     "); 
264E:  MOVLW  8E
2650:  MOVWF  FF6
2652:  MOVLW  03
2654:  MOVWF  FF7
2656:  CALL   0920
....................             lcd_gotoxy(1,3); 
265A:  MOVLW  01
265C:  MOVWF  xBB
265E:  MOVLW  03
2660:  MOVWF  xBC
2662:  CALL   0874
....................             printf(lcd_putc,"      Correcta      "); 
2666:  MOVLW  A4
2668:  MOVWF  FF6
266A:  MOVLW  03
266C:  MOVWF  FF7
266E:  CALL   0920
....................             lcd_gotoxy(1,4); 
2672:  MOVLW  01
2674:  MOVWF  xBB
2676:  MOVLW  04
2678:  MOVWF  xBC
267A:  CALL   0874
....................             printf(lcd_putc,"                    "); 
267E:  MOVLW  BA
2680:  MOVWF  FF6
2682:  MOVLW  03
2684:  MOVWF  FF7
2686:  CALL   0920
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
268A:  MOVLW  02
268C:  MOVWF  xA9
268E:  MOVLW  FA
2690:  MOVWF  xBB
2692:  CALL   06D8
2696:  DECFSZ xA9,F
2698:  BRA    268E
269A:  MOVLW  3D
269C:  MOVWF  19
269E:  MOVLW  0B
26A0:  MOVWF  1C
26A2:  MOVLW  0C
26A4:  MOVWF  xBA
26A6:  CALL   08D6
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
26AA:  CLRF   36
26AC:  CLRF   37
26AE:  CLRF   38
26B0:  CLRF   39
....................          else 
26B2:  BRA    272E
....................          {lcd_gotoxy(1,1); 
26B4:  MOVLW  01
26B6:  MOVWF  xBB
26B8:  MOVWF  xBC
26BA:  CALL   0874
....................             printf(lcd_putc,"                    "); 
26BE:  MOVLW  D0
26C0:  MOVWF  FF6
26C2:  MOVLW  03
26C4:  MOVWF  FF7
26C6:  CALL   0920
....................             lcd_gotoxy(1,2); 
26CA:  MOVLW  01
26CC:  MOVWF  xBB
26CE:  MOVLW  02
26D0:  MOVWF  xBC
26D2:  CALL   0874
....................             printf(lcd_putc,"     Contraseña     "); 
26D6:  MOVLW  E6
26D8:  MOVWF  FF6
26DA:  MOVLW  03
26DC:  MOVWF  FF7
26DE:  CALL   0920
....................             lcd_gotoxy(1,3); 
26E2:  MOVLW  01
26E4:  MOVWF  xBB
26E6:  MOVLW  03
26E8:  MOVWF  xBC
26EA:  CALL   0874
....................             printf(lcd_putc,"     Incorrecta     "); 
26EE:  MOVLW  FC
26F0:  MOVWF  FF6
26F2:  MOVLW  03
26F4:  MOVWF  FF7
26F6:  CALL   0920
....................             lcd_gotoxy(1,4); 
26FA:  MOVLW  01
26FC:  MOVWF  xBB
26FE:  MOVLW  04
2700:  MOVWF  xBC
2702:  CALL   0874
....................             printf(lcd_putc,"                    "); 
2706:  MOVLW  12
2708:  MOVWF  FF6
270A:  MOVLW  04
270C:  MOVWF  FF7
270E:  CALL   0920
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
2712:  MOVLW  02
2714:  MOVWF  xA9
2716:  MOVLW  FA
2718:  MOVWF  xBB
271A:  CALL   06D8
271E:  DECFSZ xA9,F
2720:  BRA    2716
2722:  MOVLW  0B
2724:  MOVWF  1C
2726:  MOVLW  0C
2728:  MOVWF  xBA
272A:  CALL   08D6
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
272E:  MOVF   1C,W
2730:  SUBLW  0B
2732:  BC    2752
2734:  MOVF   1C,W
2736:  SUBLW  0D
2738:  BNC   2752
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
273A:  MOVLW  01
273C:  SUBWF  1C,W
273E:  MOVWF  xA9
2740:  MOVWF  xBB
2742:  MOVLW  04
2744:  MOVWF  xBC
2746:  CALL   0874
....................             lcd_putc(t[1]); 
274A:  MOVFF  34,BA
274E:  CALL   08D6
....................           } 
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2752:  MOVF   19,W
2754:  SUBLW  3D
2756:  BTFSS  FD8.2
2758:  BRA    2A68
....................    lcd_gotoxy(1,1); 
275A:  MOVLW  01
275C:  MOVWF  xBB
275E:  MOVWF  xBC
2760:  CALL   0874
....................    printf(lcd_putc,"     Ingrese        "); 
2764:  MOVLW  28
2766:  MOVWF  FF6
2768:  MOVLW  04
276A:  MOVWF  FF7
276C:  CALL   0920
....................    lcd_gotoxy(1,2); 
2770:  MOVLW  01
2772:  MOVWF  xBB
2774:  MOVLW  02
2776:  MOVWF  xBC
2778:  CALL   0874
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
277C:  MOVLW  3E
277E:  MOVWF  FF6
2780:  MOVLW  04
2782:  MOVWF  FF7
2784:  CALL   0920
....................    lcd_gotoxy(1,3); 
2788:  MOVLW  01
278A:  MOVWF  xBB
278C:  MOVLW  03
278E:  MOVWF  xBC
2790:  CALL   0874
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2794:  MOVLW  54
2796:  MOVWF  FF6
2798:  MOVLW  04
279A:  MOVWF  FF7
279C:  MOVLW  0A
279E:  MOVWF  xAD
27A0:  CALL   0964
27A4:  MOVFF  36,A9
27A8:  MOVLW  1F
27AA:  MOVWF  xAA
27AC:  CALL   09AA
27B0:  MOVFF  37,A9
27B4:  MOVLW  1F
27B6:  MOVWF  xAA
27B8:  CALL   09AA
27BC:  MOVFF  38,A9
27C0:  MOVLW  1F
27C2:  MOVWF  xAA
27C4:  CALL   09AA
27C8:  MOVFF  39,A9
27CC:  MOVLW  1F
27CE:  MOVWF  xAA
27D0:  CALL   09AA
27D4:  MOVLW  20
27D6:  MOVWF  xBA
27D8:  CALL   08D6
27DC:  MOVLW  20
27DE:  MOVWF  xBA
27E0:  CALL   08D6
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
27E4:  BSF    F92.5
27E6:  BTFSS  F80.5
27E8:  BRA    280C
....................       {  if(Flanco == 0)  
27EA:  BTFSC  17.3
27EC:  BRA    280A
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
27EE:  MOVLW  0B
27F0:  SUBWF  1C,W
27F2:  CLRF   03
27F4:  ADDLW  36
27F6:  MOVWF  FE9
27F8:  MOVLW  00
27FA:  ADDWFC 03,W
27FC:  MOVWF  FEA
27FE:  INCF   FEF,F
2800:  BSF    17.3
2802:  MOVLW  1E
2804:  MOVWF  xBB
2806:  CALL   06D8
....................          else 
280A:  BRA    280E
....................             {Flanco = 0;} 
280C:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
280E:  BSF    F96.0
2810:  BTFSS  F84.0
2812:  BRA    2836
....................       {  if(Flanco2 == 0)  
2814:  BTFSC  17.5
2816:  BRA    2834
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2818:  MOVLW  0B
281A:  SUBWF  1C,W
281C:  CLRF   03
281E:  ADDLW  36
2820:  MOVWF  FE9
2822:  MOVLW  00
2824:  ADDWFC 03,W
2826:  MOVWF  FEA
2828:  DECF   FEF,F
282A:  BSF    17.5
282C:  MOVLW  1E
282E:  MOVWF  xBB
2830:  CALL   06D8
....................          else 
2834:  BRA    2838
....................             {Flanco2 = 0;} 
2836:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime Derecha 
2838:  BSF    F96.1
283A:  BTFSS  F84.1
283C:  BRA    2858
....................       {  if(Flanco1 == 0)  
283E:  BTFSC  17.4
2840:  BRA    2856
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
2842:  BSF    17.4
2844:  INCF   1C,F
2846:  MOVLW  1E
2848:  MOVWF  xBB
284A:  CALL   06D8
284E:  MOVLW  0C
2850:  MOVWF  xBA
2852:  CALL   08D6
....................          else 
2856:  BRA    285A
....................             {Flanco1 = 0;}    
2858:  BCF    17.4
....................              
....................        if(IZQU)// Si oprime Izquierda 
285A:  BSF    F96.2
285C:  BTFSS  F84.2
285E:  BRA    287A
....................       {  if(Flanco3 == 0)  
2860:  BTFSC  17.6
2862:  BRA    2878
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
2864:  BSF    17.6
2866:  DECF   1C,F
2868:  MOVLW  1E
286A:  MOVWF  xBB
286C:  CALL   06D8
2870:  MOVLW  0C
2872:  MOVWF  xBA
2874:  CALL   08D6
....................          else 
2878:  BRA    287C
....................             {Flanco3 = 0;}     
287A:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
287C:  MOVLW  0B
287E:  SUBWF  1C,W
2880:  CLRF   03
2882:  ADDLW  36
2884:  MOVWF  FE9
2886:  MOVLW  00
2888:  ADDWFC 03,W
288A:  MOVWF  FEA
288C:  BTFSC  FEF.7
288E:  BRA    2892
2890:  BRA    28A6
....................        {clave[unidad-11]=9;} 
2892:  MOVLW  0B
2894:  SUBWF  1C,W
2896:  CLRF   03
2898:  ADDLW  36
289A:  MOVWF  FE9
289C:  MOVLW  00
289E:  ADDWFC 03,W
28A0:  MOVWF  FEA
28A2:  MOVLW  09
28A4:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
28A6:  MOVLW  0B
28A8:  SUBWF  1C,W
28AA:  CLRF   03
28AC:  ADDLW  36
28AE:  MOVWF  FE9
28B0:  MOVLW  00
28B2:  ADDWFC 03,W
28B4:  MOVWF  FEA
28B6:  BTFSC  FEF.7
28B8:  BRA    28D2
28BA:  MOVF   FEF,W
28BC:  SUBLW  09
28BE:  BC    28D2
....................        {clave[unidad-11]=0;} 
28C0:  MOVLW  0B
28C2:  SUBWF  1C,W
28C4:  CLRF   03
28C6:  ADDLW  36
28C8:  MOVWF  FE9
28CA:  MOVLW  00
28CC:  ADDWFC 03,W
28CE:  MOVWF  FEA
28D0:  CLRF   FEF
....................        if(unidad<11) 
28D2:  MOVF   1C,W
28D4:  SUBLW  0A
28D6:  BNC   28E0
....................        {Menu=5;unidad=11;} 
28D8:  MOVLW  05
28DA:  MOVWF  19
28DC:  MOVLW  0B
28DE:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
28E0:  MOVFF  1C,BB
28E4:  MOVLW  04
28E6:  MOVWF  xBC
28E8:  CALL   0874
....................        lcd_putc(t[2]); 
28EC:  MOVFF  35,BA
28F0:  CALL   08D6
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
28F4:  MOVF   1C,W
28F6:  SUBLW  0E
28F8:  BTFSC  FD8.0
28FA:  BRA    2A44
....................        { 
....................             lcd_gotoxy(1,1); 
28FC:  MOVLW  01
28FE:  MOVWF  xBB
2900:  MOVWF  xBC
2902:  CALL   0874
....................             printf(lcd_putc,"                    "); 
2906:  MOVLW  6A
2908:  MOVWF  FF6
290A:  MOVLW  04
290C:  MOVWF  FF7
290E:  CALL   0920
....................             lcd_gotoxy(1,2); 
2912:  MOVLW  01
2914:  MOVWF  xBB
2916:  MOVLW  02
2918:  MOVWF  xBC
291A:  CALL   0874
....................             printf(lcd_putc,"     Contraseña     "); 
291E:  MOVLW  80
2920:  MOVWF  FF6
2922:  MOVLW  04
2924:  MOVWF  FF7
2926:  CALL   0920
....................             lcd_gotoxy(1,3); 
292A:  MOVLW  01
292C:  MOVWF  xBB
292E:  MOVLW  03
2930:  MOVWF  xBC
2932:  CALL   0874
....................             printf(lcd_putc,"     Almacenada     "); 
2936:  MOVLW  96
2938:  MOVWF  FF6
293A:  MOVLW  04
293C:  MOVWF  FF7
293E:  CALL   0920
....................             lcd_gotoxy(1,4); 
2942:  MOVLW  01
2944:  MOVWF  xBB
2946:  MOVLW  04
2948:  MOVWF  xBC
294A:  CALL   0874
....................             printf(lcd_putc,"                    "); 
294E:  MOVLW  AC
2950:  MOVWF  FF6
2952:  MOVLW  04
2954:  MOVWF  FF7
2956:  CALL   0920
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
295A:  CLRF   FA9
295C:  MOVFF  36,FA8
2960:  BCF    FA6.6
2962:  BCF    FA6.7
2964:  BSF    FA6.2
2966:  MOVF   FF2,W
2968:  MOVWF  00
296A:  BCF    FF2.7
296C:  MOVLB  F
296E:  MOVLW  55
2970:  MOVWF  FA7
2972:  MOVLW  AA
2974:  MOVWF  FA7
2976:  BSF    FA6.1
2978:  BTFSC  FA6.1
297A:  BRA    2978
297C:  BCF    FA6.2
297E:  MOVF   00,W
2980:  IORWF  FF2,F
2982:  MOVLW  14
2984:  MOVLB  0
2986:  MOVWF  xBB
2988:  CALL   06D8
298C:  MOVLW  01
298E:  MOVWF  FA9
2990:  MOVFF  37,FA8
2994:  BCF    FA6.6
2996:  BCF    FA6.7
2998:  BSF    FA6.2
299A:  MOVF   FF2,W
299C:  MOVWF  00
299E:  BCF    FF2.7
29A0:  MOVLB  F
29A2:  MOVLW  55
29A4:  MOVWF  FA7
29A6:  MOVLW  AA
29A8:  MOVWF  FA7
29AA:  BSF    FA6.1
29AC:  BTFSC  FA6.1
29AE:  BRA    29AC
29B0:  BCF    FA6.2
29B2:  MOVF   00,W
29B4:  IORWF  FF2,F
29B6:  MOVLW  14
29B8:  MOVLB  0
29BA:  MOVWF  xBB
29BC:  CALL   06D8
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
29C0:  MOVLW  02
29C2:  MOVWF  FA9
29C4:  MOVFF  38,FA8
29C8:  BCF    FA6.6
29CA:  BCF    FA6.7
29CC:  BSF    FA6.2
29CE:  MOVF   FF2,W
29D0:  MOVWF  00
29D2:  BCF    FF2.7
29D4:  MOVLB  F
29D6:  MOVLW  55
29D8:  MOVWF  FA7
29DA:  MOVLW  AA
29DC:  MOVWF  FA7
29DE:  BSF    FA6.1
29E0:  BTFSC  FA6.1
29E2:  BRA    29E0
29E4:  BCF    FA6.2
29E6:  MOVF   00,W
29E8:  IORWF  FF2,F
29EA:  MOVLW  14
29EC:  MOVLB  0
29EE:  MOVWF  xBB
29F0:  CALL   06D8
29F4:  MOVLW  03
29F6:  MOVWF  FA9
29F8:  MOVFF  39,FA8
29FC:  BCF    FA6.6
29FE:  BCF    FA6.7
2A00:  BSF    FA6.2
2A02:  MOVF   FF2,W
2A04:  MOVWF  00
2A06:  BCF    FF2.7
2A08:  MOVLB  F
2A0A:  MOVLW  55
2A0C:  MOVWF  FA7
2A0E:  MOVLW  AA
2A10:  MOVWF  FA7
2A12:  BSF    FA6.1
2A14:  BTFSC  FA6.1
2A16:  BRA    2A14
2A18:  BCF    FA6.2
2A1A:  MOVF   00,W
2A1C:  IORWF  FF2,F
2A1E:  MOVLW  14
2A20:  MOVLB  0
2A22:  MOVWF  xBB
2A24:  CALL   06D8
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2A28:  MOVLW  02
2A2A:  MOVWF  xA9
2A2C:  MOVLW  FA
2A2E:  MOVWF  xBB
2A30:  CALL   06D8
2A34:  DECFSZ xA9,F
2A36:  BRA    2A2C
2A38:  MOVLW  01
2A3A:  MOVWF  19
2A3C:  CLRF   32
2A3E:  MOVLW  02
2A40:  MOVWF  1D
2A42:  MOVWF  1F
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
2A44:  MOVF   1C,W
2A46:  SUBLW  0B
2A48:  BC    2A68
2A4A:  MOVF   1C,W
2A4C:  SUBLW  0D
2A4E:  BNC   2A68
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2A50:  MOVLW  01
2A52:  SUBWF  1C,W
2A54:  MOVWF  xA9
2A56:  MOVWF  xBB
2A58:  MOVLW  04
2A5A:  MOVWF  xBC
2A5C:  CALL   0874
....................             lcd_putc(t[1]); 
2A60:  MOVFF  34,BA
2A64:  CALL   08D6
....................           } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
2A68:  MOVF   19,W
2A6A:  SUBLW  04
2A6C:  BTFSS  FD8.2
2A6E:  BRA    2C0C
....................    lcd_gotoxy(1,1); 
2A70:  MOVLW  01
2A72:  MOVWF  xBB
2A74:  MOVWF  xBC
2A76:  CALL   0874
....................    printf(lcd_putc,"  Duracion Actual   "); 
2A7A:  MOVLW  C2
2A7C:  MOVWF  FF6
2A7E:  MOVLW  04
2A80:  MOVWF  FF7
2A82:  CALL   0920
....................    lcd_gotoxy(1,2); 
2A86:  MOVLW  01
2A88:  MOVWF  xBB
2A8A:  MOVLW  02
2A8C:  MOVWF  xBC
2A8E:  CALL   0874
....................    printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2A92:  MOVLW  D8
2A94:  MOVWF  FF6
2A96:  MOVLW  04
2A98:  MOVWF  FF7
2A9A:  MOVLW  0B
2A9C:  MOVWF  xAD
2A9E:  CALL   0964
2AA2:  MOVLW  08
2AA4:  MOVWF  FE9
2AA6:  MOVFF  42,AA
2AAA:  MOVFF  41,A9
2AAE:  GOTO   0B76
2AB2:  MOVLW  20
2AB4:  MOVWF  xBA
2AB6:  CALL   08D6
2ABA:  MOVLW  20
2ABC:  MOVWF  xBA
2ABE:  CALL   08D6
2AC2:  MOVLW  20
2AC4:  MOVWF  xBA
2AC6:  CALL   08D6
....................    lcd_gotoxy(1,4); 
2ACA:  MOVLW  01
2ACC:  MOVWF  xBB
2ACE:  MOVLW  04
2AD0:  MOVWF  xBC
2AD2:  CALL   0874
....................    printf(lcd_putc," RESET= Oprima ^ y > "); 
2AD6:  MOVLW  EC
2AD8:  MOVWF  FF6
2ADA:  MOVLW  04
2ADC:  MOVWF  FF7
2ADE:  CALL   0920
....................     
....................       if(UP && RIGHT)//Si oprime hacia arriba 
2AE2:  BSF    F92.5
2AE4:  BTFSS  F80.5
2AE6:  BRA    2BD8
2AE8:  BSF    F96.1
2AEA:  BTFSS  F84.1
2AEC:  BRA    2BD8
....................       {   
....................          delay_ms(200); 
2AEE:  MOVLW  C8
2AF0:  MOVWF  xBB
2AF2:  CALL   06D8
....................          printf(lcd_putc,"\f"); 
2AF6:  MOVLW  0C
2AF8:  MOVWF  xBA
2AFA:  CALL   08D6
....................          lcd_gotoxy(1,2); 
2AFE:  MOVLW  01
2B00:  MOVWF  xBB
2B02:  MOVLW  02
2B04:  MOVWF  xBC
2B06:  CALL   0874
....................          printf(lcd_putc," Reset de tiempo "); 
2B0A:  MOVLW  02
2B0C:  MOVWF  FF6
2B0E:  MOVLW  05
2B10:  MOVWF  FF7
2B12:  CALL   0920
....................          lcd_gotoxy(1,3); 
2B16:  MOVLW  01
2B18:  MOVWF  xBB
2B1A:  MOVLW  03
2B1C:  MOVWF  xBC
2B1E:  CALL   0874
....................          printf(lcd_putc,"     Exitoso     "); 
2B22:  MOVLW  14
2B24:  MOVWF  FF6
2B26:  MOVLW  05
2B28:  MOVWF  FF7
2B2A:  CALL   0920
....................          write_eeprom(50,0);write_eeprom(51,0);write_eeprom(52,0); 
2B2E:  MOVLW  32
2B30:  MOVWF  FA9
2B32:  CLRF   FA8
2B34:  BCF    FA6.6
2B36:  BCF    FA6.7
2B38:  BSF    FA6.2
2B3A:  MOVF   FF2,W
2B3C:  MOVWF  00
2B3E:  BCF    FF2.7
2B40:  MOVLB  F
2B42:  MOVLW  55
2B44:  MOVWF  FA7
2B46:  MOVLW  AA
2B48:  MOVWF  FA7
2B4A:  BSF    FA6.1
2B4C:  BTFSC  FA6.1
2B4E:  BRA    2B4C
2B50:  BCF    FA6.2
2B52:  MOVF   00,W
2B54:  IORWF  FF2,F
2B56:  MOVLW  33
2B58:  MOVWF  FA9
2B5A:  CLRF   FA8
2B5C:  BCF    FA6.6
2B5E:  BCF    FA6.7
2B60:  BSF    FA6.2
2B62:  MOVF   FF2,W
2B64:  MOVWF  00
2B66:  BCF    FF2.7
2B68:  MOVLW  55
2B6A:  MOVWF  FA7
2B6C:  MOVLW  AA
2B6E:  MOVWF  FA7
2B70:  BSF    FA6.1
2B72:  BTFSC  FA6.1
2B74:  BRA    2B72
2B76:  BCF    FA6.2
2B78:  MOVF   00,W
2B7A:  IORWF  FF2,F
2B7C:  MOVLW  34
2B7E:  MOVWF  FA9
2B80:  CLRF   FA8
2B82:  BCF    FA6.6
2B84:  BCF    FA6.7
2B86:  BSF    FA6.2
2B88:  MOVF   FF2,W
2B8A:  MOVWF  00
2B8C:  BCF    FF2.7
2B8E:  MOVLW  55
2B90:  MOVWF  FA7
2B92:  MOVLW  AA
2B94:  MOVWF  FA7
2B96:  BSF    FA6.1
2B98:  BTFSC  FA6.1
2B9A:  BRA    2B98
2B9C:  BCF    FA6.2
2B9E:  MOVF   00,W
2BA0:  IORWF  FF2,F
....................          delay_ms(700); 
2BA2:  MOVLW  04
2BA4:  MOVLB  0
2BA6:  MOVWF  xA9
2BA8:  MOVLW  AF
2BAA:  MOVWF  xBB
2BAC:  CALL   06D8
2BB0:  DECFSZ xA9,F
2BB2:  BRA    2BA8
....................          segundos=0;minutos=0;horas=0; 
2BB4:  CLRF   22
2BB6:  CLRF   23
2BB8:  CLRF   42
2BBA:  CLRF   41
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2BBC:  MOVLW  1E
2BBE:  MOVWF  xBB
2BC0:  CALL   06D8
2BC4:  MOVLW  01
2BC6:  MOVWF  19
2BC8:  CLRF   32
2BCA:  MOVLW  02
2BCC:  MOVWF  1D
2BCE:  MOVWF  1F
2BD0:  MOVLW  0C
2BD2:  MOVWF  xBA
2BD4:  CALL   08D6
....................       } 
....................              
....................       if(IZQU)// Si oprime Izquierda 
2BD8:  BSF    F96.2
2BDA:  BTFSS  F84.2
2BDC:  BRA    2C0A
....................       { 
....................          if(Flanco3 == 0) 
2BDE:  BTFSC  17.6
2BE0:  BRA    2C08
....................          { 
....................             Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2BE2:  BSF    17.6
2BE4:  MOVLW  02
2BE6:  MOVWF  xA9
2BE8:  MOVLW  FA
2BEA:  MOVWF  xBB
2BEC:  CALL   06D8
2BF0:  DECFSZ xA9,F
2BF2:  BRA    2BE8
2BF4:  MOVLW  01
2BF6:  MOVWF  19
2BF8:  CLRF   32
2BFA:  MOVLW  02
2BFC:  MOVWF  1D
2BFE:  MOVWF  1F
2C00:  MOVLW  0C
2C02:  MOVWF  xBA
2C04:  CALL   08D6
....................          } 
....................       } 
....................       else 
2C08:  BRA    2C0C
....................       { 
....................          Flanco3 = 0; 
2C0A:  BCF    17.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
2C0C:  MOVF   19,W
2C0E:  SUBLW  05
2C10:  BTFSS  FD8.2
2C12:  BRA    2E2E
....................       lcd_gotoxy(1,1); 
2C14:  MOVLW  01
2C16:  MOVWF  xBB
2C18:  MOVWF  xBC
2C1A:  CALL   0874
....................       printf(lcd_putc,"  Zero Point Config "); 
2C1E:  MOVLW  26
2C20:  MOVWF  FF6
2C22:  MOVLW  05
2C24:  MOVWF  FF7
2C26:  CALL   0920
....................       lcd_gotoxy(1,2); 
2C2A:  MOVLW  01
2C2C:  MOVWF  xBB
2C2E:  MOVLW  02
2C30:  MOVWF  xBC
2C32:  CALL   0874
....................       printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
2C36:  MOVLW  05
2C38:  MOVWF  xA9
2C3A:  CALL   1064
2C3E:  MOVFF  00,A9
2C42:  MOVFF  01,AA
2C46:  MOVFF  02,AB
2C4A:  MOVFF  03,AC
2C4E:  MOVFF  03,C0
2C52:  MOVFF  02,BF
2C56:  MOVFF  01,BE
2C5A:  MOVFF  00,BD
2C5E:  MOVLW  D7
2C60:  MOVWF  xC4
2C62:  MOVLW  A3
2C64:  MOVWF  xC3
2C66:  CLRF   xC2
2C68:  MOVLW  81
2C6A:  MOVWF  xC1
2C6C:  CALL   11FA
2C70:  MOVFF  00,A9
2C74:  MOVFF  01,AA
2C78:  MOVFF  02,AB
2C7C:  MOVFF  03,AC
2C80:  MOVLW  3C
2C82:  MOVWF  FF6
2C84:  MOVLW  05
2C86:  MOVWF  FF7
2C88:  MOVLW  09
2C8A:  MOVWF  xAD
2C8C:  CALL   0964
2C90:  MOVLW  02
2C92:  MOVWF  FE9
2C94:  MOVFF  AC,B0
2C98:  MOVFF  AB,AF
2C9C:  MOVFF  AA,AE
2CA0:  MOVFF  A9,AD
2CA4:  MOVWF  xB1
2CA6:  CALL   13A6
2CAA:  MOVLW  4A
2CAC:  MOVWF  FF6
2CAE:  MOVLW  05
2CB0:  MOVWF  FF7
2CB2:  MOVLW  07
2CB4:  MOVWF  xAD
2CB6:  CALL   0964
....................       lcd_gotoxy(1,3); 
2CBA:  MOVLW  01
2CBC:  MOVWF  xBB
2CBE:  MOVLW  03
2CC0:  MOVWF  xBC
2CC2:  CALL   0874
....................       printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
2CC6:  CLRF   xAE
2CC8:  CALL   0822
2CCC:  MOVFF  00,A9
2CD0:  MOVFF  01,AA
2CD4:  MOVFF  02,AB
2CD8:  MOVFF  03,AC
2CDC:  MOVLW  52
2CDE:  MOVWF  FF6
2CE0:  MOVLW  05
2CE2:  MOVWF  FF7
2CE4:  MOVLW  08
2CE6:  MOVWF  xAD
2CE8:  CALL   0964
2CEC:  MOVLW  01
2CEE:  MOVWF  FE9
2CF0:  MOVFF  AC,B0
2CF4:  MOVFF  AB,AF
2CF8:  MOVFF  AA,AE
2CFC:  MOVFF  A9,AD
2D00:  CLRF   xB1
2D02:  CALL   13A6
....................       lcd_gotoxy(1,4); 
2D06:  MOVLW  01
2D08:  MOVWF  xBB
2D0A:  MOVLW  04
2D0C:  MOVWF  xBC
2D0E:  CALL   0874
....................       printf(lcd_putc,"    ZF=%2.0f",G); 
2D12:  MOVLW  60
2D14:  MOVWF  FF6
2D16:  MOVLW  05
2D18:  MOVWF  FF7
2D1A:  MOVLW  07
2D1C:  MOVWF  xAD
2D1E:  CALL   0964
2D22:  MOVLW  01
2D24:  MOVWF  FE9
2D26:  MOVFF  A8,B0
2D2A:  MOVFF  A7,AF
2D2E:  MOVFF  A6,AE
2D32:  MOVFF  A5,AD
2D36:  CLRF   xB1
2D38:  CALL   13A6
....................      
....................       if(RIGHT)// Si oprime derecha 
2D3C:  BSF    F96.1
2D3E:  BTFSS  F84.1
2D40:  BRA    2DFE
....................       {  if(Flanco1 == 0)  
2D42:  BTFSC  17.4
2D44:  BRA    2DFC
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2D46:  MOVLW  01
2D48:  MOVWF  19
2D4A:  CLRF   32
2D4C:  MOVLW  02
2D4E:  MOVWF  1D
2D50:  MOVWF  1F
2D52:  MOVLW  0B
2D54:  MOVWF  1C
2D56:  MOVLW  02
2D58:  MOVWF  xA9
2D5A:  MOVLW  FA
2D5C:  MOVWF  xBB
2D5E:  CALL   06D8
2D62:  DECFSZ xA9,F
2D64:  BRA    2D5A
2D66:  MOVLW  0C
2D68:  MOVWF  xBA
2D6A:  CALL   08D6
....................             G=sensores(0); 
2D6E:  CLRF   xAE
2D70:  CALL   0822
2D74:  MOVFF  03,A8
2D78:  MOVFF  02,A7
2D7C:  MOVFF  01,A6
2D80:  MOVFF  00,A5
....................             G16=(int16)G; 
2D84:  MOVFF  A8,C0
2D88:  MOVFF  A7,BF
2D8C:  MOVFF  A6,BE
2D90:  MOVFF  A5,BD
2D94:  CALL   152C
2D98:  MOVFF  02,44
2D9C:  MOVFF  01,43
....................             G_l=G16; G_h=(G16>>8); 
2DA0:  MOVFF  43,26
2DA4:  MOVFF  44,27
....................              
....................             write_eeprom(60,G_l);write_eeprom(61,G_h);//Guardar valor de Setpoint en eeprom 
2DA8:  MOVLW  3C
2DAA:  MOVWF  FA9
2DAC:  MOVFF  26,FA8
2DB0:  BCF    FA6.6
2DB2:  BCF    FA6.7
2DB4:  BSF    FA6.2
2DB6:  MOVF   FF2,W
2DB8:  MOVWF  00
2DBA:  BCF    FF2.7
2DBC:  MOVLB  F
2DBE:  MOVLW  55
2DC0:  MOVWF  FA7
2DC2:  MOVLW  AA
2DC4:  MOVWF  FA7
2DC6:  BSF    FA6.1
2DC8:  BTFSC  FA6.1
2DCA:  BRA    2DC8
2DCC:  BCF    FA6.2
2DCE:  MOVF   00,W
2DD0:  IORWF  FF2,F
2DD2:  MOVLW  3D
2DD4:  MOVWF  FA9
2DD6:  MOVFF  27,FA8
2DDA:  BCF    FA6.6
2DDC:  BCF    FA6.7
2DDE:  BSF    FA6.2
2DE0:  MOVF   FF2,W
2DE2:  MOVWF  00
2DE4:  BCF    FF2.7
2DE6:  MOVLW  55
2DE8:  MOVWF  FA7
2DEA:  MOVLW  AA
2DEC:  MOVWF  FA7
2DEE:  BSF    FA6.1
2DF0:  BTFSC  FA6.1
2DF2:  BRA    2DF0
2DF4:  BCF    FA6.2
2DF6:  MOVF   00,W
2DF8:  IORWF  FF2,F
2DFA:  MOVLB  0
....................             }} 
....................          else 
2DFC:  BRA    2E00
....................             {Flanco1 = 0;}    
2DFE:  BCF    17.4
....................              
....................        if(IZQU)// Si oprime Izquierda 
2E00:  BSF    F96.2
2E02:  BTFSS  F84.2
2E04:  BRA    2E2C
....................       {  if(Flanco3 == 0)  
2E06:  BTFSC  17.6
2E08:  BRA    2E2A
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
2E0A:  MOVLW  01
2E0C:  MOVWF  19
2E0E:  CLRF   32
2E10:  MOVLW  02
2E12:  MOVWF  1D
2E14:  MOVWF  1F
2E16:  MOVLW  0B
2E18:  MOVWF  1C
2E1A:  MOVLW  1E
2E1C:  MOVWF  xBB
2E1E:  CALL   06D8
2E22:  MOVLW  0C
2E24:  MOVWF  xBA
2E26:  CALL   08D6
....................          else 
2E2A:  BRA    2E2E
....................             {Flanco3 = 0;}   
2E2C:  BCF    17.6
....................       } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
2E2E:  MOVF   19,W
2E30:  SUBLW  06
2E32:  BTFSS  FD8.2
2E34:  BRA    2F5A
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
2E36:  BTG    18.4
2E38:  BSF    17.4
2E3A:  MOVLW  01
2E3C:  MOVWF  19
2E3E:  CLRF   32
....................                        
....................             if(estadoalarma==1) 
2E40:  BTFSS  18.4
2E42:  BRA    2EA4
....................             {estadoalarma=1; 
2E44:  BSF    18.4
....................                lcd_gotoxy(1,1); 
2E46:  MOVLW  01
2E48:  MOVWF  xBB
2E4A:  MOVWF  xBC
2E4C:  CALL   0874
....................                printf(lcd_putc,"                    "); 
2E50:  MOVLW  6E
2E52:  MOVWF  FF6
2E54:  MOVLW  05
2E56:  MOVWF  FF7
2E58:  CALL   0920
....................                lcd_gotoxy(1,2); 
2E5C:  MOVLW  01
2E5E:  MOVWF  xBB
2E60:  MOVLW  02
2E62:  MOVWF  xBC
2E64:  CALL   0874
....................                printf(lcd_putc,"        Activo      "); 
2E68:  MOVLW  84
2E6A:  MOVWF  FF6
2E6C:  MOVLW  05
2E6E:  MOVWF  FF7
2E70:  CALL   0920
....................                lcd_gotoxy(1,3); 
2E74:  MOVLW  01
2E76:  MOVWF  xBB
2E78:  MOVLW  03
2E7A:  MOVWF  xBC
2E7C:  CALL   0874
....................                printf(lcd_putc,"        Alarma      "); 
2E80:  MOVLW  9A
2E82:  MOVWF  FF6
2E84:  MOVLW  05
2E86:  MOVWF  FF7
2E88:  CALL   0920
....................                lcd_gotoxy(1,4); 
2E8C:  MOVLW  01
2E8E:  MOVWF  xBB
2E90:  MOVLW  04
2E92:  MOVWF  xBC
2E94:  CALL   0874
....................                printf(lcd_putc,"                    ");} 
2E98:  MOVLW  B0
2E9A:  MOVWF  FF6
2E9C:  MOVLW  05
2E9E:  MOVWF  FF7
2EA0:  CALL   0920
....................                 
....................             if(estadoalarma==0) 
2EA4:  BTFSC  18.4
2EA6:  BRA    2F08
....................             {estadoalarma=0; 
2EA8:  BCF    18.4
....................                lcd_gotoxy(1,1); 
2EAA:  MOVLW  01
2EAC:  MOVWF  xBB
2EAE:  MOVWF  xBC
2EB0:  CALL   0874
....................                printf(lcd_putc,"                    "); 
2EB4:  MOVLW  C6
2EB6:  MOVWF  FF6
2EB8:  MOVLW  05
2EBA:  MOVWF  FF7
2EBC:  CALL   0920
....................                lcd_gotoxy(1,2); 
2EC0:  MOVLW  01
2EC2:  MOVWF  xBB
2EC4:  MOVLW  02
2EC6:  MOVWF  xBC
2EC8:  CALL   0874
....................                printf(lcd_putc,"      Desactivo     "); 
2ECC:  MOVLW  DC
2ECE:  MOVWF  FF6
2ED0:  MOVLW  05
2ED2:  MOVWF  FF7
2ED4:  CALL   0920
....................                lcd_gotoxy(1,3); 
2ED8:  MOVLW  01
2EDA:  MOVWF  xBB
2EDC:  MOVLW  03
2EDE:  MOVWF  xBC
2EE0:  CALL   0874
....................                printf(lcd_putc,"       Alarma       "); 
2EE4:  MOVLW  F2
2EE6:  MOVWF  FF6
2EE8:  MOVLW  05
2EEA:  MOVWF  FF7
2EEC:  CALL   0920
....................                lcd_gotoxy(1,4); 
2EF0:  MOVLW  01
2EF2:  MOVWF  xBB
2EF4:  MOVLW  04
2EF6:  MOVWF  xBC
2EF8:  CALL   0874
....................                printf(lcd_putc,"                    ");} 
2EFC:  MOVLW  08
2EFE:  MOVWF  FF6
2F00:  MOVLW  06
2F02:  MOVWF  FF7
2F04:  CALL   0920
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2F08:  MOVLW  00
2F0A:  BTFSC  18.4
2F0C:  MOVLW  01
2F0E:  MOVWF  xA9
2F10:  MOVLW  05
2F12:  MOVWF  FA9
2F14:  MOVFF  A9,FA8
2F18:  BCF    FA6.6
2F1A:  BCF    FA6.7
2F1C:  BSF    FA6.2
2F1E:  MOVF   FF2,W
2F20:  MOVWF  00
2F22:  BCF    FF2.7
2F24:  MOVLB  F
2F26:  MOVLW  55
2F28:  MOVWF  FA7
2F2A:  MOVLW  AA
2F2C:  MOVWF  FA7
2F2E:  BSF    FA6.1
2F30:  BTFSC  FA6.1
2F32:  BRA    2F30
2F34:  BCF    FA6.2
2F36:  MOVF   00,W
2F38:  IORWF  FF2,F
2F3A:  MOVLW  04
2F3C:  MOVLB  0
2F3E:  MOVWF  xA9
2F40:  MOVLW  FA
2F42:  MOVWF  xBB
2F44:  CALL   06D8
2F48:  DECFSZ xA9,F
2F4A:  BRA    2F40
2F4C:  MOVLW  02
2F4E:  MOVWF  1D
2F50:  MOVWF  1F
2F52:  MOVLW  0C
2F54:  MOVWF  xBA
2F56:  CALL   08D6
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV 
2F5A:  MOVF   19,W
2F5C:  SUBLW  32
2F5E:  BTFSS  FD8.2
2F60:  BRA    3428
....................  
....................    if(Lectura==1) 
2F62:  BTFSS  18.0
2F64:  BRA    2F80
....................    { 
....................       Lectura=0; 
2F66:  BCF    18.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
2F68:  MOVLW  05
2F6A:  MOVWF  xA9
2F6C:  CALL   1064
2F70:  MOVFF  03,A4
2F74:  MOVFF  02,A3
2F78:  MOVFF  01,A2
2F7C:  MOVFF  00,A1
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
2F80:  BTFSS  17.7
2F82:  BRA    301C
....................    { 
....................       if(estadoalarma==1) 
2F84:  BTFSS  18.4
2F86:  BRA    3012
....................       { 
....................          printf(lcd_putc,"\f"); 
2F88:  MOVLW  0C
2F8A:  MOVWF  xBA
2F8C:  CALL   08D6
....................          lcd_gotoxy(1,2); 
2F90:  MOVLW  01
2F92:  MOVWF  xBB
2F94:  MOVLW  02
2F96:  MOVWF  xBC
2F98:  CALL   0874
....................          printf(lcd_putc,"  Temporizador  de  "); 
2F9C:  MOVLW  1E
2F9E:  MOVWF  FF6
2FA0:  MOVLW  06
2FA2:  MOVWF  FF7
2FA4:  CALL   0920
....................          lcd_gotoxy(1,3); 
2FA8:  MOVLW  01
2FAA:  MOVWF  xBB
2FAC:  MOVLW  03
2FAE:  MOVWF  xBC
2FB0:  CALL   0874
....................          printf(lcd_putc," Luz UV  Finalizado "); 
2FB4:  MOVLW  34
2FB6:  MOVWF  FF6
2FB8:  MOVLW  06
2FBA:  MOVWF  FF7
2FBC:  CALL   0920
....................          lcd_gotoxy(1,4); 
2FC0:  MOVLW  01
2FC2:  MOVWF  xBB
2FC4:  MOVLW  04
2FC6:  MOVWF  xBC
2FC8:  CALL   0874
....................          printf(lcd_putc,"                    "); 
2FCC:  MOVLW  4A
2FCE:  MOVWF  FF6
2FD0:  MOVLW  06
2FD2:  MOVWF  FF7
2FD4:  CALL   0920
....................          lcd_gotoxy(1,1); 
2FD8:  MOVLW  01
2FDA:  MOVWF  xBB
2FDC:  MOVWF  xBC
2FDE:  CALL   0874
....................          printf(lcd_putc,"                    "); 
2FE2:  MOVLW  60
2FE4:  MOVWF  FF6
2FE6:  MOVLW  06
2FE8:  MOVWF  FF7
2FEA:  CALL   0920
....................          for(i=0;i<5;i++) 
2FEE:  CLRF   2E
2FF0:  MOVF   2E,W
2FF2:  SUBLW  04
2FF4:  BNC   3012
....................          { 
....................             Buzzer_on; 
2FF6:  BSF    F8C.0
2FF8:  BCF    F95.0
....................             delay_ms(200); 
2FFA:  MOVLW  C8
2FFC:  MOVWF  xBB
2FFE:  CALL   06D8
....................             Buzzer_off; 
3002:  BCF    F8C.0
3004:  BCF    F95.0
....................             delay_ms(200); 
3006:  MOVLW  C8
3008:  MOVWF  xBB
300A:  CALL   06D8
....................          } 
300E:  INCF   2E,F
3010:  BRA    2FF0
....................       } 
....................       tiempo_cumplido=0; 
3012:  BCF    17.7
....................       printf(lcd_putc,"\f"); 
3014:  MOVLW  0C
3016:  MOVWF  xBA
3018:  CALL   08D6
....................    } 
....................     
....................    if(CaidaPresion>=0.37) 
301C:  MOVLW  A4
301E:  MOVWF  xC0
3020:  MOVLW  70
3022:  MOVWF  xBF
3024:  MOVLW  3D
3026:  MOVWF  xBE
3028:  MOVLW  7D
302A:  MOVWF  xBD
302C:  MOVFF  A4,C4
3030:  MOVFF  A3,C3
3034:  MOVFF  A2,C2
3038:  MOVFF  A1,C1
303C:  CALL   0FEE
3040:  BC    3044
3042:  BNZ   304A
....................    {  
....................       ActivaBuzzer=1; 
3044:  MOVLW  01
3046:  MOVWF  3E
....................    } 
....................    else 
3048:  BRA    3050
....................    { 
....................       ActivaBuzzer=0; 
304A:  CLRF   3E
....................       Buzzer_off; 
304C:  BCF    F8C.0
304E:  BCF    F95.0
....................    } 
....................     
....................    if(!VIDRIO) 
3050:  BSF    F92.2
3052:  BTFSS  F80.2
3054:  BRA    305A
....................    { 
....................       estadouv=0; 
3056:  BCF    17.0
....................    } 
....................    else 
3058:  BRA    305E
....................    { 
....................       estadofl=0; 
305A:  BCF    17.1
....................       estadomv=0; 
305C:  BCF    17.2
....................    } 
....................     
....................    lcd_gotoxy(1,1); 
305E:  MOVLW  01
3060:  MOVWF  xBB
3062:  MOVWF  xBC
3064:  CALL   0874
....................    printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02)); 
3068:  MOVFF  A4,C0
306C:  MOVFF  A3,BF
3070:  MOVFF  A2,BE
3074:  MOVFF  A1,BD
3078:  MOVLW  D7
307A:  MOVWF  xC4
307C:  MOVLW  A3
307E:  MOVWF  xC3
3080:  CLRF   xC2
3082:  MOVLW  81
3084:  MOVWF  xC1
3086:  CALL   11FA
308A:  MOVFF  00,A9
308E:  MOVFF  01,AA
3092:  MOVFF  02,AB
3096:  MOVFF  03,AC
309A:  MOVLW  76
309C:  MOVWF  FF6
309E:  MOVLW  06
30A0:  MOVWF  FF7
30A2:  MOVLW  08
30A4:  MOVWF  xAD
30A6:  CALL   0964
30AA:  MOVLW  02
30AC:  MOVWF  FE9
30AE:  MOVFF  AC,B0
30B2:  MOVFF  AB,AF
30B6:  MOVFF  AA,AE
30BA:  MOVFF  A9,AD
30BE:  MOVWF  xB1
30C0:  CALL   13A6
30C4:  MOVLW  83
30C6:  MOVWF  FF6
30C8:  MOVLW  06
30CA:  MOVWF  FF7
30CC:  MOVLW  07
30CE:  MOVWF  xAD
30D0:  CALL   0964
....................    lcd_gotoxy(1,2); 
30D4:  MOVLW  01
30D6:  MOVWF  xBB
30D8:  MOVLW  02
30DA:  MOVWF  xBC
30DC:  CALL   0874
....................    printf(lcd_putc,"Filtro:"); 
30E0:  MOVLW  8C
30E2:  MOVWF  FF6
30E4:  MOVLW  06
30E6:  MOVWF  FF7
30E8:  CALL   0920
....................     
....................    Saturacion=(CaidaPresion/0.37)*11; 
30EC:  MOVFF  A4,C0
30F0:  MOVFF  A3,BF
30F4:  MOVFF  A2,BE
30F8:  MOVFF  A1,BD
30FC:  MOVLW  A4
30FE:  MOVWF  xC4
3100:  MOVLW  70
3102:  MOVWF  xC3
3104:  MOVLW  3D
3106:  MOVWF  xC2
3108:  MOVLW  7D
310A:  MOVWF  xC1
310C:  CALL   0C2A
3110:  MOVFF  00,A9
3114:  MOVFF  01,AA
3118:  MOVFF  02,AB
311C:  MOVFF  03,AC
3120:  MOVFF  03,C0
3124:  MOVFF  02,BF
3128:  MOVFF  01,BE
312C:  MOVFF  00,BD
3130:  CLRF   xC4
3132:  CLRF   xC3
3134:  MOVLW  30
3136:  MOVWF  xC2
3138:  MOVLW  82
313A:  MOVWF  xC1
313C:  CALL   11FA
3140:  MOVFF  03,A0
3144:  MOVFF  02,9F
3148:  MOVFF  01,9E
314C:  MOVFF  00,9D
....................    if(Saturacion>11) 
3150:  CLRF   xC0
3152:  CLRF   xBF
3154:  MOVLW  30
3156:  MOVWF  xBE
3158:  MOVLW  82
315A:  MOVWF  xBD
315C:  MOVFF  A0,C4
3160:  MOVFF  9F,C3
3164:  MOVFF  9E,C2
3168:  MOVFF  9D,C1
316C:  CALL   0FEE
3170:  BNC   317E
....................    { 
....................       Saturacion=11; 
3172:  CLRF   xA0
3174:  CLRF   x9F
3176:  MOVLW  30
3178:  MOVWF  x9E
317A:  MOVLW  82
317C:  MOVWF  x9D
....................    } 
....................     
....................    for(i=0;i<floor(Saturacion);i++) 
317E:  CLRF   2E
3180:  MOVFF  A0,AC
3184:  MOVFF  9F,AB
3188:  MOVFF  9E,AA
318C:  MOVFF  9D,A9
3190:  CALL   1896
3194:  MOVFF  00,A9
3198:  MOVFF  01,AA
319C:  MOVFF  02,AB
31A0:  MOVFF  03,AC
31A4:  CLRF   xC2
31A6:  MOVFF  2E,C1
31AA:  CALL   07EC
31AE:  MOVFF  03,C0
31B2:  MOVFF  02,BF
31B6:  MOVFF  01,BE
31BA:  MOVFF  00,BD
31BE:  MOVFF  AC,C4
31C2:  MOVFF  AB,C3
31C6:  MOVFF  AA,C2
31CA:  MOVFF  A9,C1
31CE:  CALL   0FEE
31D2:  BNC   31F0
....................    { 
....................       lcd_gotoxy(i+8,2); 
31D4:  MOVLW  08
31D6:  ADDWF  2E,W
31D8:  MOVWF  xA9
31DA:  MOVWF  xBB
31DC:  MOVLW  02
31DE:  MOVWF  xBC
31E0:  CALL   0874
....................       printf(lcd_putc,"Ñ"); 
31E4:  MOVLW  D1
31E6:  MOVWF  xBA
31E8:  CALL   08D6
....................    } 
31EC:  INCF   2E,F
31EE:  BRA    3180
....................     
....................    for(i=floor(Saturacion);i<11;i++) 
31F0:  MOVFF  A0,AC
31F4:  MOVFF  9F,AB
31F8:  MOVFF  9E,AA
31FC:  MOVFF  9D,A9
3200:  CALL   1896
3204:  MOVFF  03,C0
3208:  MOVFF  02,BF
320C:  MOVFF  01,BE
3210:  MOVFF  00,BD
3214:  CALL   152C
3218:  MOVFF  01,2E
321C:  MOVF   2E,W
321E:  SUBLW  0A
3220:  BNC   323E
....................    { 
....................       lcd_gotoxy(i+8,2); 
3222:  MOVLW  08
3224:  ADDWF  2E,W
3226:  MOVWF  xA9
3228:  MOVWF  xBB
322A:  MOVLW  02
322C:  MOVWF  xBC
322E:  CALL   0874
....................       printf(lcd_putc," "); 
3232:  MOVLW  20
3234:  MOVWF  xBA
3236:  CALL   08D6
....................    } 
323A:  INCF   2E,F
323C:  BRA    321C
....................     
....................    lcd_gotoxy(9,3); 
323E:  MOVLW  09
3240:  MOVWF  xBB
3242:  MOVLW  03
3244:  MOVWF  xBC
3246:  CALL   0874
....................    printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
324A:  MOVLW  94
324C:  MOVWF  FF6
324E:  MOVLW  06
3250:  MOVWF  FF7
3252:  MOVLW  06
3254:  MOVWF  xAD
3256:  CALL   0964
325A:  MOVFF  28,A9
325E:  MOVLW  03
3260:  MOVWF  xAA
3262:  CALL   0B10
3266:  MOVLW  3A
3268:  MOVWF  xBA
326A:  CALL   08D6
326E:  MOVFF  29,A9
3272:  MOVLW  01
3274:  MOVWF  xAA
3276:  CALL   0B10
....................     
....................    if(estadomv==1) 
327A:  BTFSS  17.2
327C:  BRA    32A0
....................    { 
....................       lcd_gotoxy(1,4); 
327E:  MOVLW  01
3280:  MOVWF  xBB
3282:  MOVLW  04
3284:  MOVWF  xBC
3286:  CALL   0874
....................       printf(lcd_putc,"Motor:ON "); 
328A:  MOVLW  A4
328C:  MOVWF  FF6
328E:  MOVLW  06
3290:  MOVWF  FF7
3292:  CALL   0920
....................       velocidades(1); 
3296:  MOVLW  01
3298:  MOVWF  xA9
329A:  CALL   18AC
....................    } 
....................    else 
329E:  BRA    32BE
....................    { 
....................       lcd_gotoxy(1,4); 
32A0:  MOVLW  01
32A2:  MOVWF  xBB
32A4:  MOVLW  04
32A6:  MOVWF  xBC
32A8:  CALL   0874
....................       printf(lcd_putc,"Motor:OFF"); 
32AC:  MOVLW  AE
32AE:  MOVWF  FF6
32B0:  MOVLW  06
32B2:  MOVWF  FF7
32B4:  CALL   0920
....................       velocidades(0);  
32B8:  CLRF   xA9
32BA:  CALL   18AC
....................    } 
....................     
....................    if(estadouv==1) 
32BE:  BTFSS  17.0
32C0:  BRA    3306
....................    { 
....................       lcd_gotoxy(13,4); 
32C2:  MOVLW  0D
32C4:  MOVWF  xBB
32C6:  MOVLW  04
32C8:  MOVWF  xBC
32CA:  CALL   0874
....................       printf(lcd_putc,"UV:ON "); 
32CE:  MOVLW  B8
32D0:  MOVWF  FF6
32D2:  MOVLW  06
32D4:  MOVWF  FF7
32D6:  CALL   0920
....................       estadomv=0; 
32DA:  BCF    17.2
....................       velocidades(0); 
32DC:  CLRF   xA9
32DE:  CALL   18AC
....................       estadofl=0; 
32E2:  BCF    17.1
....................       Luz_Blanca_off; 
32E4:  BCF    F8C.2
32E6:  BCF    F95.2
....................       Luz_UV_on; 
32E8:  BSF    F8C.1
32EA:  BCF    F95.1
....................       tiempo_cumplido=0; 
32EC:  BCF    17.7
....................       if(flaguv==0) 
32EE:  BTFSC  18.1
32F0:  BRA    3304
....................       { 
....................          delay_ms(50);lcd_init();flaguv=1;guardaruv=1; 
32F2:  MOVLW  32
32F4:  MOVWF  xBB
32F6:  CALL   06D8
32FA:  CALL   0796
32FE:  BSF    18.1
3300:  MOVLW  01
3302:  MOVWF  31
....................       } 
....................    } 
....................    else 
3304:  BRA    333A
....................    { 
....................       estadouv=0; 
3306:  BCF    17.0
....................       lcd_gotoxy(13,4); 
3308:  MOVLW  0D
330A:  MOVWF  xBB
330C:  MOVLW  04
330E:  MOVWF  xBC
3310:  CALL   0874
....................       printf(lcd_putc,"UV:OFF"); 
3314:  MOVLW  C0
3316:  MOVWF  FF6
3318:  MOVLW  06
331A:  MOVWF  FF7
331C:  CALL   0920
....................       Luz_UV_off; 
3320:  BCF    F8C.1
3322:  BCF    F95.1
....................       if(flaguv==1) 
3324:  BTFSS  18.1
3326:  BRA    333A
....................       { 
....................          delay_ms(50);lcd_init();flaguv=0;guardaruv=1; 
3328:  MOVLW  32
332A:  MOVWF  xBB
332C:  CALL   06D8
3330:  CALL   0796
3334:  BCF    18.1
3336:  MOVLW  01
3338:  MOVWF  31
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
333A:  BTFSS  17.1
333C:  BRA    336E
....................    { 
....................       lcd_gotoxy(1,3); 
333E:  MOVLW  01
3340:  MOVWF  xBB
3342:  MOVLW  03
3344:  MOVWF  xBC
3346:  CALL   0874
....................       printf(lcd_putc,"Luz:ON "); 
334A:  MOVLW  C8
334C:  MOVWF  FF6
334E:  MOVLW  06
3350:  MOVWF  FF7
3352:  CALL   0920
....................       Luz_Blanca_on; 
3356:  BSF    F8C.2
3358:  BCF    F95.2
....................       if(flagfl==0) 
335A:  BTFSC  18.2
335C:  BRA    336C
....................       { 
....................          delay_ms(50);lcd_init();flagfl=1; 
335E:  MOVLW  32
3360:  MOVWF  xBB
3362:  CALL   06D8
3366:  CALL   0796
336A:  BSF    18.2
....................       } 
....................    } 
....................    else 
336C:  BRA    339C
....................    { 
....................       lcd_gotoxy(1,3); 
336E:  MOVLW  01
3370:  MOVWF  xBB
3372:  MOVLW  03
3374:  MOVWF  xBC
3376:  CALL   0874
....................       printf(lcd_putc,"Luz:OFF"); 
337A:  MOVLW  D0
337C:  MOVWF  FF6
337E:  MOVLW  06
3380:  MOVWF  FF7
3382:  CALL   0920
....................       Luz_Blanca_off; 
3386:  BCF    F8C.2
3388:  BCF    F95.2
....................       if(flagfl==1) 
338A:  BTFSS  18.2
338C:  BRA    339C
....................       { 
....................          delay_ms(50);lcd_init();flagfl=0; 
338E:  MOVLW  32
3390:  MOVWF  xBB
3392:  CALL   06D8
3396:  CALL   0796
339A:  BCF    18.2
....................       } 
....................    } 
....................     
....................   if(DOWN)//Si oprime hacia arriba 
339C:  BSF    F96.0
339E:  BTFSS  F84.0
33A0:  BRA    33BC
....................    { 
....................       if(Flanco == 0) 
33A2:  BTFSC  17.3
33A4:  BRA    33BA
....................       { 
....................          estadofl=!estadofl;Flanco = 1;delay_ms(300); 
33A6:  BTG    17.1
33A8:  BSF    17.3
33AA:  MOVLW  02
33AC:  MOVWF  xA9
33AE:  MOVLW  96
33B0:  MOVWF  xBB
33B2:  CALL   06D8
33B6:  DECFSZ xA9,F
33B8:  BRA    33AE
....................       } 
....................    } 
....................    else 
33BA:  BRA    33BE
....................    { 
....................       Flanco = 0; 
33BC:  BCF    17.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
33BE:  BSF    F96.1
33C0:  BTFSS  F84.1
33C2:  BRA    33DE
....................    { 
....................       if(Flanco1 == 0) 
33C4:  BTFSC  17.4
33C6:  BRA    33DC
....................       { 
....................          estadomv=!estadomv;Flanco1 = 1;delay_ms(300); 
33C8:  BTG    17.2
33CA:  BSF    17.4
33CC:  MOVLW  02
33CE:  MOVWF  xA9
33D0:  MOVLW  96
33D2:  MOVWF  xBB
33D4:  CALL   06D8
33D8:  DECFSZ xA9,F
33DA:  BRA    33D0
....................       } 
....................    } 
....................    else 
33DC:  BRA    33E0
....................    { 
....................       Flanco1 = 0; 
33DE:  BCF    17.4
....................    } 
....................     
....................    if(IZQU)//Si oprime hacia izquierda 
33E0:  BSF    F96.2
33E2:  BTFSS  F84.2
33E4:  BRA    33F6
....................    { 
....................       delay_ms(150); 
33E6:  MOVLW  96
33E8:  MOVWF  xBB
33EA:  CALL   06D8
....................       if(VIDRIO) 
33EE:  BSF    F92.2
33F0:  BTFSC  F80.2
33F2:  BRA    33F6
....................       {   
....................          estadouv=!estadouv; 
33F4:  BTG    17.0
....................       } 
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
33F6:  BSF    F92.5
33F8:  BTFSS  F80.5
33FA:  BRA    3428
....................    { 
....................       delay_ms(200); 
33FC:  MOVLW  C8
33FE:  MOVWF  xBB
3400:  CALL   06D8
....................       printf(lcd_putc,"\f"); 
3404:  MOVLW  0C
3406:  MOVWF  xBA
3408:  CALL   08D6
....................       delay_ms(300); 
340C:  MOVLW  02
340E:  MOVWF  xA9
3410:  MOVLW  96
3412:  MOVWF  xBB
3414:  CALL   06D8
3418:  DECFSZ xA9,F
341A:  BRA    3410
....................       Menu=1;  
341C:  MOVLW  01
341E:  MOVWF  19
....................       paso=0; 
3420:  CLRF   32
....................       Flecha=2; 
3422:  MOVLW  02
3424:  MOVWF  1D
....................       Flecha2=2; 
3426:  MOVWF  1F
....................    } 
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------    
....................    if(guardaruv==1) 
3428:  DECFSZ 31,W
342A:  BRA    34DA
....................    { 
....................       write_eeprom(50,segundos);write_eeprom(51,minutos); 
342C:  MOVLW  32
342E:  MOVWF  FA9
3430:  MOVFF  22,FA8
3434:  BCF    FA6.6
3436:  BCF    FA6.7
3438:  BSF    FA6.2
343A:  MOVF   FF2,W
343C:  MOVWF  00
343E:  BCF    FF2.7
3440:  MOVLB  F
3442:  MOVLW  55
3444:  MOVWF  FA7
3446:  MOVLW  AA
3448:  MOVWF  FA7
344A:  BSF    FA6.1
344C:  BTFSC  FA6.1
344E:  BRA    344C
3450:  BCF    FA6.2
3452:  MOVF   00,W
3454:  IORWF  FF2,F
3456:  MOVLW  33
3458:  MOVWF  FA9
345A:  MOVFF  23,FA8
345E:  BCF    FA6.6
3460:  BCF    FA6.7
3462:  BSF    FA6.2
3464:  MOVF   FF2,W
3466:  MOVWF  00
3468:  BCF    FF2.7
346A:  MOVLW  55
346C:  MOVWF  FA7
346E:  MOVLW  AA
3470:  MOVWF  FA7
3472:  BSF    FA6.1
3474:  BTFSC  FA6.1
3476:  BRA    3474
3478:  BCF    FA6.2
347A:  MOVF   00,W
347C:  IORWF  FF2,F
....................       horasL=(int8)horas; 
347E:  MOVFF  41,24
....................       horasH=(int8)(horas>>8); 
3482:  MOVF   42,W
3484:  MOVWF  25
....................       write_eeprom(52,horasL); 
3486:  MOVLW  34
3488:  MOVWF  FA9
348A:  MOVFF  24,FA8
348E:  BCF    FA6.6
3490:  BCF    FA6.7
3492:  BSF    FA6.2
3494:  MOVFF  FF2,00
3498:  BCF    FF2.7
349A:  MOVLW  55
349C:  MOVWF  FA7
349E:  MOVLW  AA
34A0:  MOVWF  FA7
34A2:  BSF    FA6.1
34A4:  BTFSC  FA6.1
34A6:  BRA    34A4
34A8:  BCF    FA6.2
34AA:  MOVF   00,W
34AC:  IORWF  FF2,F
....................       write_eeprom(53,horasH); 
34AE:  MOVLW  35
34B0:  MOVWF  FA9
34B2:  MOVFF  25,FA8
34B6:  BCF    FA6.6
34B8:  BCF    FA6.7
34BA:  BSF    FA6.2
34BC:  MOVFF  FF2,00
34C0:  BCF    FF2.7
34C2:  MOVLW  55
34C4:  MOVWF  FA7
34C6:  MOVLW  AA
34C8:  MOVWF  FA7
34CA:  BSF    FA6.1
34CC:  BTFSC  FA6.1
34CE:  BRA    34CC
34D0:  BCF    FA6.2
34D2:  MOVF   00,W
34D4:  IORWF  FF2,F
....................       guardaruv=0; 
34D6:  CLRF   31
34D8:  MOVLB  0
....................    } 
....................    
....................    if(tiemporeset>=20) 
34DA:  MOVF   30,W
34DC:  SUBLW  13
34DE:  BC    34E6
....................    { 
....................       lcd_init(); 
34E0:  CALL   0796
....................       tiemporeset=0; 
34E4:  CLRF   30
....................    }    
....................     
....................    if(segundos>=60) 
34E6:  MOVF   22,W
34E8:  SUBLW  3B
34EA:  BC    34F0
....................    { 
....................       segundos=0;minutos++; 
34EC:  CLRF   22
34EE:  INCF   23,F
....................    } 
....................    if(minutos==60) 
34F0:  MOVF   23,W
34F2:  SUBLW  3C
34F4:  BNZ   34FE
....................    { 
....................       minutos=0;horas++; 
34F6:  CLRF   23
34F8:  INCF   41,F
34FA:  BTFSC  FD8.2
34FC:  INCF   42,F
....................    } 
....................     
....................    } 
34FE:  GOTO   1C5E
.................... } 
....................  
3502:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1F   BROWNOUT NOWDT BORV20 NOPUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
