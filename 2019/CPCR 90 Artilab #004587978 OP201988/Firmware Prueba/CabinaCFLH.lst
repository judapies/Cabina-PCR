CCS PCH C Compiler, Version 4.104, 5967               24-jul.-19 06:25

               Filename: H:\JP\JP\Laboratorio\Cabina de PCR\2019\CPCR 90 Artilab #004587978 OP201988\Firmware Prueba\CabinaCFLH.lst

               ROM used: 15086 bytes (46%)
                         Largest free fragment is 17680
               RAM used: 179 (9%) at main() level
                         216 (11%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1DEE
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   0184
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR,NOPUT// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
06E2:  CLRF   FEA
06E4:  MOVLW  C6
06E6:  MOVWF  FE9
06E8:  MOVF   FEF,W
06EA:  BZ    0708
06EC:  MOVLW  0F
06EE:  MOVWF  01
06F0:  CLRF   00
06F2:  DECFSZ 00,F
06F4:  BRA    06F2
06F6:  DECFSZ 01,F
06F8:  BRA    06F0
06FA:  MOVLW  8F
06FC:  MOVWF  00
06FE:  DECFSZ 00,F
0700:  BRA    06FE
0702:  NOP   
0704:  DECFSZ FEF,F
0706:  BRA    06EC
0708:  RETLW  00
.................... //#use delay(clock=20000000) 
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
1A8E:  BCF    xC2.0
....................    y = x; 
1A90:  MOVFF  B6,BB
1A94:  MOVFF  B5,BA
1A98:  MOVFF  B4,B9
1A9C:  MOVFF  B3,B8
....................  
....................    if (x < 0) 
1AA0:  MOVFF  B6,C6
1AA4:  MOVFF  B5,C5
1AA8:  MOVFF  B4,C4
1AAC:  MOVFF  B3,C3
1AB0:  CLRF   xCA
1AB2:  CLRF   xC9
1AB4:  CLRF   xC8
1AB6:  CLRF   xC7
1AB8:  CALL   0B36
1ABC:  BNC   1AC6
....................    { 
....................       s = 1; 
1ABE:  BSF    xC2.0
....................       y = -y; 
1AC0:  MOVF   xB9,W
1AC2:  XORLW  80
1AC4:  MOVWF  xB9
....................    } 
....................  
....................    if (y <= 32768.0) 
1AC6:  MOVFF  BB,C6
1ACA:  MOVFF  BA,C5
1ACE:  MOVFF  B9,C4
1AD2:  MOVFF  B8,C3
1AD6:  CLRF   xCA
1AD8:  CLRF   xC9
1ADA:  CLRF   xC8
1ADC:  MOVLW  8E
1ADE:  MOVWF  xC7
1AE0:  CALL   0B36
1AE4:  BC    1AE8
1AE6:  BNZ   1B18
....................   res = (float32)(unsigned int16)y; 
1AE8:  MOVFF  BB,C6
1AEC:  MOVFF  BA,C5
1AF0:  MOVFF  B9,C4
1AF4:  MOVFF  B8,C3
1AF8:  RCALL  1A56
1AFA:  MOVFF  02,C8
1AFE:  MOVFF  01,C7
1B02:  CALL   0940
1B06:  MOVFF  03,BF
1B0A:  MOVFF  02,BE
1B0E:  MOVFF  01,BD
1B12:  MOVFF  00,BC
....................  
....................  else if (y < 10000000.0) 
1B16:  BRA    1CA2
1B18:  MOVFF  BB,C6
1B1C:  MOVFF  BA,C5
1B20:  MOVFF  B9,C4
1B24:  MOVFF  B8,C3
1B28:  MOVLW  80
1B2A:  MOVWF  xCA
1B2C:  MOVLW  96
1B2E:  MOVWF  xC9
1B30:  MOVLW  18
1B32:  MOVWF  xC8
1B34:  MOVLW  96
1B36:  MOVWF  xC7
1B38:  CALL   0B36
1B3C:  BTFSS  FD8.0
1B3E:  BRA    1C92
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1B40:  MOVFF  BB,C6
1B44:  MOVFF  BA,C5
1B48:  MOVFF  B9,C4
1B4C:  MOVFF  B8,C3
1B50:  CLRF   xCA
1B52:  CLRF   xC9
1B54:  CLRF   xC8
1B56:  MOVLW  8E
1B58:  MOVWF  xC7
1B5A:  CALL   11CA
1B5E:  MOVFF  03,C6
1B62:  MOVFF  02,C5
1B66:  MOVFF  01,C4
1B6A:  MOVFF  00,C3
1B6E:  RCALL  1A56
1B70:  MOVFF  02,C1
1B74:  MOVFF  01,C0
....................       y = 32768.0*(y/32768.0 - (float32)l); 
1B78:  MOVFF  BB,C6
1B7C:  MOVFF  BA,C5
1B80:  MOVFF  B9,C4
1B84:  MOVFF  B8,C3
1B88:  CLRF   xCA
1B8A:  CLRF   xC9
1B8C:  CLRF   xC8
1B8E:  MOVLW  8E
1B90:  MOVWF  xC7
1B92:  CALL   11CA
1B96:  MOVFF  00,C3
1B9A:  MOVFF  01,C4
1B9E:  MOVFF  02,C5
1BA2:  MOVFF  03,C6
1BA6:  MOVFF  C1,C8
1BAA:  MOVFF  C0,C7
1BAE:  CALL   0940
1BB2:  BSF    FD8.1
1BB4:  MOVFF  C6,CA
1BB8:  MOVFF  C5,C9
1BBC:  MOVFF  C4,C8
1BC0:  MOVFF  C3,C7
1BC4:  MOVFF  03,CE
1BC8:  MOVFF  02,CD
1BCC:  MOVFF  01,CC
1BD0:  MOVFF  00,CB
1BD4:  CALL   1324
1BD8:  CLRF   xC6
1BDA:  CLRF   xC5
1BDC:  CLRF   xC4
1BDE:  MOVLW  8E
1BE0:  MOVWF  xC3
1BE2:  MOVFF  03,CA
1BE6:  MOVFF  02,C9
1BEA:  MOVFF  01,C8
1BEE:  MOVFF  00,C7
1BF2:  RCALL  1724
1BF4:  MOVFF  03,BB
1BF8:  MOVFF  02,BA
1BFC:  MOVFF  01,B9
1C00:  MOVFF  00,B8
....................   res = 32768.0*(float32)l; 
1C04:  MOVFF  C1,C8
1C08:  MOVFF  C0,C7
1C0C:  CALL   0940
1C10:  CLRF   xC6
1C12:  CLRF   xC5
1C14:  CLRF   xC4
1C16:  MOVLW  8E
1C18:  MOVWF  xC3
1C1A:  MOVFF  03,CA
1C1E:  MOVFF  02,C9
1C22:  MOVFF  01,C8
1C26:  MOVFF  00,C7
1C2A:  RCALL  1724
1C2C:  MOVFF  03,BF
1C30:  MOVFF  02,BE
1C34:  MOVFF  01,BD
1C38:  MOVFF  00,BC
....................   res += (float32)(unsigned int16)y; 
1C3C:  MOVFF  BB,C6
1C40:  MOVFF  BA,C5
1C44:  MOVFF  B9,C4
1C48:  MOVFF  B8,C3
1C4C:  RCALL  1A56
1C4E:  MOVFF  02,C8
1C52:  MOVFF  01,C7
1C56:  CALL   0940
1C5A:  BCF    FD8.1
1C5C:  MOVFF  BF,CA
1C60:  MOVFF  BE,C9
1C64:  MOVFF  BD,C8
1C68:  MOVFF  BC,C7
1C6C:  MOVFF  03,CE
1C70:  MOVFF  02,CD
1C74:  MOVFF  01,CC
1C78:  MOVFF  00,CB
1C7C:  CALL   1324
1C80:  MOVFF  03,BF
1C84:  MOVFF  02,BE
1C88:  MOVFF  01,BD
1C8C:  MOVFF  00,BC
....................  } 
....................  
....................  else 
1C90:  BRA    1CA2
....................   res = y; 
1C92:  MOVFF  BB,BF
1C96:  MOVFF  BA,BE
1C9A:  MOVFF  B9,BD
1C9E:  MOVFF  B8,BC
....................  
....................  y = y - (float32)(unsigned int16)y; 
1CA2:  MOVFF  BB,C6
1CA6:  MOVFF  BA,C5
1CAA:  MOVFF  B9,C4
1CAE:  MOVFF  B8,C3
1CB2:  RCALL  1A56
1CB4:  MOVFF  02,C8
1CB8:  MOVFF  01,C7
1CBC:  CALL   0940
1CC0:  BSF    FD8.1
1CC2:  MOVFF  BB,CA
1CC6:  MOVFF  BA,C9
1CCA:  MOVFF  B9,C8
1CCE:  MOVFF  B8,C7
1CD2:  MOVFF  03,CE
1CD6:  MOVFF  02,CD
1CDA:  MOVFF  01,CC
1CDE:  MOVFF  00,CB
1CE2:  CALL   1324
1CE6:  MOVFF  03,BB
1CEA:  MOVFF  02,BA
1CEE:  MOVFF  01,B9
1CF2:  MOVFF  00,B8
....................  
....................  if (s) 
1CF6:  BTFSS  xC2.0
1CF8:  BRA    1D00
....................   res = -res; 
1CFA:  MOVF   xBD,W
1CFC:  XORLW  80
1CFE:  MOVWF  xBD
....................  
....................  if (y != 0) 
1D00:  MOVFF  BB,C6
1D04:  MOVFF  BA,C5
1D08:  MOVFF  B9,C4
1D0C:  MOVFF  B8,C3
1D10:  CLRF   xCA
1D12:  CLRF   xC9
1D14:  CLRF   xC8
1D16:  CLRF   xC7
1D18:  CALL   0B36
1D1C:  BZ    1D8E
....................  { 
....................   if (s == 1 && n == 0) 
1D1E:  BTFSS  xC2.0
1D20:  BRA    1D56
1D22:  MOVF   xB7,F
1D24:  BNZ   1D56
....................    res -= 1.0; 
1D26:  BSF    FD8.1
1D28:  MOVFF  BF,CA
1D2C:  MOVFF  BE,C9
1D30:  MOVFF  BD,C8
1D34:  MOVFF  BC,C7
1D38:  CLRF   xCE
1D3A:  CLRF   xCD
1D3C:  CLRF   xCC
1D3E:  MOVLW  7F
1D40:  MOVWF  xCB
1D42:  CALL   1324
1D46:  MOVFF  03,BF
1D4A:  MOVFF  02,BE
1D4E:  MOVFF  01,BD
1D52:  MOVFF  00,BC
....................  
....................   if (s == 0 && n == 1) 
1D56:  BTFSC  xC2.0
1D58:  BRA    1D8E
1D5A:  DECFSZ xB7,W
1D5C:  BRA    1D8E
....................    res += 1.0; 
1D5E:  BCF    FD8.1
1D60:  MOVFF  BF,CA
1D64:  MOVFF  BE,C9
1D68:  MOVFF  BD,C8
1D6C:  MOVFF  BC,C7
1D70:  CLRF   xCE
1D72:  CLRF   xCD
1D74:  CLRF   xCC
1D76:  MOVLW  7F
1D78:  MOVWF  xCB
1D7A:  CALL   1324
1D7E:  MOVFF  03,BF
1D82:  MOVFF  02,BE
1D86:  MOVFF  01,BD
1D8A:  MOVFF  00,BC
....................  } 
....................  if (x == 0) 
1D8E:  MOVFF  B6,C6
1D92:  MOVFF  B5,C5
1D96:  MOVFF  B4,C4
1D9A:  MOVFF  B3,C3
1D9E:  CLRF   xCA
1DA0:  CLRF   xC9
1DA2:  CLRF   xC8
1DA4:  CLRF   xC7
1DA6:  CALL   0B36
1DAA:  BNZ   1DB4
....................     res = 0; 
1DAC:  CLRF   xBF
1DAE:  CLRF   xBE
1DB0:  CLRF   xBD
1DB2:  CLRF   xBC
....................  
....................  return (res); 
1DB4:  MOVFF  BC,00
1DB8:  MOVFF  BD,01
1DBC:  MOVFF  BE,02
1DC0:  MOVFF  BF,03
.................... } 
1DC4:  GOTO   1DDC (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
1DC8:  MOVFF  B2,B6
1DCC:  MOVFF  B1,B5
1DD0:  MOVFF  B0,B4
1DD4:  MOVFF  AF,B3
1DD8:  CLRF   xB7
1DDA:  BRA    1A8E
.................... } 
1DDC:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   IZQU          input(PIN_E2) 
.................... #define   VIDRIO        input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_D1,1) 
.................... #define   Luz_UV_off        output_bit(PIN_D1,0) 
.................... #define   Luz_Blanca_on     output_bit(PIN_D2,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D2,0) 
.................... #define   Motor_L1_on       output_bit(PIN_D3,1) 
.................... #define   Motor_L1_off      output_bit(PIN_D3,0) 
.................... #define   Buzzer_on         output_bit(PIN_D0,1) 
.................... #define   Buzzer_off        output_bit(PIN_D0,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0; 
.................... int8 Menu=0, n_opcionH=6,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0; 
.................... int16 tiempos,horas=0,G16=0,tiempobloqueo=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0,Ruido=OFF,Bloqueo=OFF; 
.................... char dato[3]; 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
070A:  SWAPF  xC7,W
070C:  ANDLW  F0
070E:  MOVWF  00
0710:  MOVLW  0F
0712:  ANDWF  F81,W
0714:  IORWF  00,W
0716:  MOVWF  F81
....................       delay_cycles(30);//30 
0718:  MOVLW  09
071A:  MOVWF  00
071C:  DECFSZ 00,F
071E:  BRA    071C
0720:  BRA    0722
....................       lcd.enable = 1; 
0722:  BSF    F81.3
....................       delay_us(55);//55 
0724:  MOVLW  DB
0726:  MOVWF  00
0728:  DECFSZ 00,F
072A:  BRA    0728
072C:  BRA    072E
....................       lcd.enable = 0; 
072E:  BCF    F81.3
.................... } 
0730:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0732:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0734:  MOVLW  01
0736:  MOVWF  xC6
0738:  RCALL  06E2
....................       lcd.rs = address; 
073A:  BTFSS  xC4.0
073C:  BCF    F81.1
073E:  BTFSC  xC4.0
0740:  BSF    F81.1
....................       delay_cycles(30);//30 
0742:  MOVLW  09
0744:  MOVWF  00
0746:  DECFSZ 00,F
0748:  BRA    0746
074A:  BRA    074C
....................       lcd.rw = 0; 
074C:  BCF    F81.2
....................       delay_cycles(30);//30 
074E:  MOVLW  09
0750:  MOVWF  00
0752:  DECFSZ 00,F
0754:  BRA    0752
0756:  BRA    0758
....................       lcd.enable = 0; 
0758:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
075A:  SWAPF  xC5,W
075C:  MOVWF  xC6
075E:  MOVLW  0F
0760:  ANDWF  xC6,F
0762:  MOVFF  C6,C7
0766:  RCALL  070A
....................       lcd_send_nibble(n & 0xf); 
0768:  MOVF   xC5,W
076A:  ANDLW  0F
076C:  MOVWF  xC6
076E:  MOVWF  xC7
0770:  RCALL  070A
.................... } 
0772:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
0774:  MOVLW  00
0776:  MOVWF  F93
....................     lcd.rs = 0; 
0778:  BCF    F81.1
....................     lcd.rw = 0; 
077A:  BCF    F81.2
....................     lcd.enable = 0; 
077C:  BCF    F81.3
....................     delay_ms(15); 
077E:  MOVLW  0F
0780:  MOVWF  xC6
0782:  RCALL  06E2
....................     for(i=1;i<=3;++i) { 
0784:  MOVLW  01
0786:  MOVWF  xAF
0788:  MOVF   xAF,W
078A:  SUBLW  03
078C:  BNC   079E
....................        lcd_send_nibble(3); 
078E:  MOVLW  03
0790:  MOVWF  xC7
0792:  RCALL  070A
....................        delay_ms(5); 
0794:  MOVLW  05
0796:  MOVWF  xC6
0798:  RCALL  06E2
....................     } 
079A:  INCF   xAF,F
079C:  BRA    0788
....................     lcd_send_nibble(2); 
079E:  MOVLW  02
07A0:  MOVWF  xC7
07A2:  RCALL  070A
....................     for(i=0;i<=3;++i) 
07A4:  CLRF   xAF
07A6:  MOVF   xAF,W
07A8:  SUBLW  03
07AA:  BNC   07C8
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
07AC:  CLRF   03
07AE:  MOVF   xAF,W
07B0:  MOVFF  FF2,B0
07B4:  BCF    FF2.7
07B6:  RCALL  0096
07B8:  BTFSC  xB0.7
07BA:  BSF    FF2.7
07BC:  MOVWF  xB0
07BE:  CLRF   xC4
07C0:  MOVWF  xC5
07C2:  RCALL  0732
07C4:  INCF   xAF,F
07C6:  BRA    07A6
.................... } 
07C8:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
07FA:  MOVLW  01
07FC:  SUBWF  xC2,W
07FE:  ADDLW  FC
0800:  BC    0820
0802:  ADDLW  04
0804:  GOTO   0830
....................      case 1 : address=0x80;break; 
0808:  MOVLW  80
080A:  MOVWF  xC3
080C:  BRA    0820
....................      case 2 : address=0xc0;break; 
080E:  MOVLW  C0
0810:  MOVWF  xC3
0812:  BRA    0820
....................      case 3 : address=0x94;break; 
0814:  MOVLW  94
0816:  MOVWF  xC3
0818:  BRA    0820
....................      case 4 : address=0xd4;break; 
081A:  MOVLW  D4
081C:  MOVWF  xC3
081E:  BRA    0820
....................    } 
....................    address+=x-1; 
0820:  MOVLW  01
0822:  SUBWF  xC1,W
0824:  ADDWF  xC3,F
....................    lcd_send_byte(0,address); 
0826:  CLRF   xC4
0828:  MOVFF  C3,C5
082C:  RCALL  0732
.................... } 
082E:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
085C:  MOVF   xC0,W
085E:  SUBLW  F1
0860:  BNZ   0866
....................    { 
....................       c=238; 
0862:  MOVLW  EE
0864:  MOVWF  xC0
....................    } 
....................    if(c=='Ñ') 
0866:  MOVF   xC0,W
0868:  SUBLW  D1
086A:  BNZ   0870
....................    { 
....................       c=255; 
086C:  MOVLW  FF
086E:  MOVWF  xC0
....................    } 
....................     
....................    switch (c) { 
0870:  MOVF   xC0,W
0872:  XORLW  0C
0874:  BZ    0880
0876:  XORLW  06
0878:  BZ    0894
087A:  XORLW  02
087C:  BZ    08A2
087E:  BRA    08AC
....................      case '\f'   : lcd_send_byte(0,1); 
0880:  CLRF   xC4
0882:  MOVLW  01
0884:  MOVWF  xC5
0886:  RCALL  0732
....................                    lcdline=1; 
0888:  MOVLW  01
088A:  MOVWF  xAE
....................                    delay_ms(2); 
088C:  MOVLW  02
088E:  MOVWF  xC6
0890:  RCALL  06E2
....................                                            break; 
0892:  BRA    08B8
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0894:  INCF   xAE,F
0896:  MOVLW  01
0898:  MOVWF  xC1
089A:  MOVFF  AE,C2
089E:  RCALL  07FA
08A0:  BRA    08B8
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
08A2:  CLRF   xC4
08A4:  MOVLW  10
08A6:  MOVWF  xC5
08A8:  RCALL  0732
08AA:  BRA    08B8
....................      default     : lcd_send_byte(1,c);     break; 
08AC:  MOVLW  01
08AE:  MOVWF  xC4
08B0:  MOVFF  C0,C5
08B4:  RCALL  0732
08B6:  BRA    08B8
....................    } 
.................... } 
08B8:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <Funciones.h> 
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
0FAE:  DECFSZ xB0,W
0FB0:  BRA    0FC6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
0FB2:  MOVLW  02
0FB4:  MOVWF  xC1
0FB6:  MOVFF  B1,C2
0FBA:  RCALL  07FA
0FBC:  MOVLW  B4
0FBE:  MOVWF  FF6
0FC0:  MOVLW  00
0FC2:  MOVWF  FF7
0FC4:  RCALL  08BA
....................    if(x==2) 
0FC6:  MOVF   xB0,W
0FC8:  SUBLW  02
0FCA:  BNZ   0FE0
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0FCC:  MOVLW  02
0FCE:  MOVWF  xC1
0FD0:  MOVFF  B1,C2
0FD4:  RCALL  07FA
0FD6:  MOVLW  C8
0FD8:  MOVWF  FF6
0FDA:  MOVLW  00
0FDC:  MOVWF  FF7
0FDE:  RCALL  08BA
....................    if(x==3) 
0FE0:  MOVF   xB0,W
0FE2:  SUBLW  03
0FE4:  BNZ   0FFA
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
0FE6:  MOVLW  02
0FE8:  MOVWF  xC1
0FEA:  MOVFF  B1,C2
0FEE:  RCALL  07FA
0FF0:  MOVLW  DC
0FF2:  MOVWF  FF6
0FF4:  MOVLW  00
0FF6:  MOVWF  FF7
0FF8:  RCALL  08BA
....................    if(x==4) 
0FFA:  MOVF   xB0,W
0FFC:  SUBLW  04
0FFE:  BNZ   1016
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
1000:  MOVLW  02
1002:  MOVWF  xC1
1004:  MOVFF  B1,C2
1008:  CALL   07FA
100C:  MOVLW  F0
100E:  MOVWF  FF6
1010:  MOVLW  00
1012:  MOVWF  FF7
1014:  RCALL  08BA
....................     
....................    if(x==5) 
1016:  MOVF   xB0,W
1018:  SUBLW  05
101A:  BNZ   1050
....................    {if(estadoalarma==0) 
101C:  BTFSC  17.4
101E:  BRA    1036
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1020:  MOVLW  02
1022:  MOVWF  xC1
1024:  MOVFF  B1,C2
1028:  CALL   07FA
102C:  MOVLW  04
102E:  MOVWF  FF6
1030:  MOVLW  01
1032:  MOVWF  FF7
1034:  RCALL  08BA
....................    if(estadoalarma==1) 
1036:  BTFSS  17.4
1038:  BRA    1050
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
103A:  MOVLW  02
103C:  MOVWF  xC1
103E:  MOVFF  B1,C2
1042:  CALL   07FA
1046:  MOVLW  18
1048:  MOVWF  FF6
104A:  MOVLW  01
104C:  MOVWF  FF7
104E:  RCALL  08BA
....................    } 
.................... } 
1050:  RETLW  00
....................  
.................... void velocidades(int8 x)// Funcion para imprimir mensajes de Menu Principal. 
.................... {  if(x==0) 
*
1DDE:  MOVF   xAF,F
1DE0:  BNZ   1DE8
....................    { 
....................       Motor_L1_off; 
1DE2:  BCF    F8C.3
1DE4:  BCF    F95.3
....................    } 
....................    else 
1DE6:  BRA    1DEC
....................    { 
....................       Motor_L1_on; 
1DE8:  BSF    F8C.3
1DEA:  BCF    F95.3
....................    } 
.................... } 
1DEC:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1174:  RLCF   xB4,W
1176:  MOVWF  00
1178:  RLCF   00,F
117A:  MOVLW  FC
117C:  ANDWF  00,F
117E:  MOVFF  00,01
1182:  MOVF   FC2,W
1184:  ANDLW  C3
1186:  IORWF  00,W
1188:  MOVWF  FC2
118A:  MOVLW  0A
118C:  MOVWF  xC6
118E:  CALL   06E2
1192:  BSF    FC2.1
1194:  BTFSC  FC2.1
1196:  BRA    1194
1198:  MOVFF  FC4,03
119C:  MOVFF  FC3,C7
11A0:  MOVFF  FC4,C8
11A4:  CALL   0940
11A8:  MOVFF  03,B8
11AC:  MOVFF  02,B7
11B0:  MOVFF  01,B6
11B4:  MOVFF  00,B5
11B8:  MOVFF  B5,00
11BC:  MOVFF  B6,01
11C0:  MOVFF  B7,02
11C4:  MOVFF  B8,03
.................... } 
11C8:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
158E:  CLRF   xB3
1590:  CLRF   xB2
1592:  CLRF   xB1
1594:  CLRF   xB0
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
1596:  CLRF   xB4
1598:  RCALL  1174
159A:  MOVFF  03,99
159E:  MOVFF  02,98
15A2:  MOVFF  01,97
15A6:  MOVFF  00,96
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
15AA:  MOVFF  99,C6
15AE:  MOVFF  98,C5
15B2:  MOVFF  97,C4
15B6:  MOVFF  96,C3
15BA:  MOVFF  A9,CA
15BE:  MOVFF  A8,C9
15C2:  MOVFF  A7,C8
15C6:  MOVFF  A6,C7
15CA:  RCALL  11CA
15CC:  MOVFF  00,B4
15D0:  MOVFF  01,B5
15D4:  MOVFF  02,B6
15D8:  MOVFF  03,B7
15DC:  BSF    FD8.1
15DE:  MOVFF  03,CA
15E2:  MOVFF  02,C9
15E6:  MOVFF  01,C8
15EA:  MOVFF  00,C7
15EE:  CLRF   xCE
15F0:  CLRF   xCD
15F2:  CLRF   xCC
15F4:  MOVLW  7F
15F6:  MOVWF  xCB
15F8:  RCALL  1324
15FA:  MOVFF  03,9D
15FE:  MOVFF  02,9C
1602:  MOVFF  01,9B
1606:  MOVFF  00,9A
....................     
....................    if(Presion<0.0) 
160A:  MOVFF  9D,C6
160E:  MOVFF  9C,C5
1612:  MOVFF  9B,C4
1616:  MOVFF  9A,C3
161A:  CLRF   xCA
161C:  CLRF   xC9
161E:  CLRF   xC8
1620:  CLRF   xC7
1622:  CALL   0B36
1626:  BNC   1630
....................    { 
....................       Presion=0.0; 
1628:  CLRF   x9D
162A:  CLRF   x9C
162C:  CLRF   x9B
162E:  CLRF   x9A
....................    } 
....................  
....................    if(r>media-1) 
1630:  MOVLW  01
1632:  SUBWF  xAF,W
1634:  SUBWF  2B,W
1636:  BZ    163C
1638:  BNC   163C
....................    {r=0;} 
163A:  CLRF   2B
....................    PromPresion[r]=Presion;r++; 
163C:  MOVF   2B,W
163E:  MULLW  04
1640:  MOVF   FF3,W
1642:  CLRF   03
1644:  ADDLW  46
1646:  MOVWF  FE9
1648:  MOVLW  00
164A:  ADDWFC 03,W
164C:  MOVWF  FEA
164E:  MOVFF  9A,FEF
1652:  MOVFF  9B,FEC
1656:  MOVFF  9C,FEC
165A:  MOVFF  9D,FEC
165E:  INCF   2B,F
....................           
....................    for(q=0;q<=(media-1);q++) 
1660:  CLRF   2C
1662:  MOVLW  01
1664:  SUBWF  xAF,W
1666:  SUBWF  2C,W
1668:  BZ    166C
166A:  BC    16D6
....................    { 
....................       promediopresion+=PromPresion[q]; 
166C:  MOVF   2C,W
166E:  MULLW  04
1670:  MOVF   FF3,W
1672:  CLRF   03
1674:  ADDLW  46
1676:  MOVWF  FE9
1678:  MOVLW  00
167A:  ADDWFC 03,W
167C:  MOVWF  FEA
167E:  MOVFF  FEF,00
1682:  MOVFF  FEC,01
1686:  MOVFF  FEC,02
168A:  MOVFF  FEC,03
168E:  MOVFF  FEA,B5
1692:  MOVFF  FE9,B4
1696:  BCF    FD8.1
1698:  MOVFF  B3,CA
169C:  MOVFF  B2,C9
16A0:  MOVFF  B1,C8
16A4:  MOVFF  B0,C7
16A8:  MOVFF  03,CE
16AC:  MOVFF  02,CD
16B0:  MOVFF  01,CC
16B4:  MOVFF  00,CB
16B8:  RCALL  1324
16BA:  MOVFF  B5,FEA
16BE:  MOVFF  B4,FE9
16C2:  MOVFF  03,B3
16C6:  MOVFF  02,B2
16CA:  MOVFF  01,B1
16CE:  MOVFF  00,B0
....................    }  
16D2:  INCF   2C,F
16D4:  BRA    1662
....................    promediopresion=promediopresion/media;    
16D6:  CLRF   xC8
16D8:  MOVFF  AF,C7
16DC:  CALL   0940
16E0:  MOVFF  B3,C6
16E4:  MOVFF  B2,C5
16E8:  MOVFF  B1,C4
16EC:  MOVFF  B0,C3
16F0:  MOVFF  03,CA
16F4:  MOVFF  02,C9
16F8:  MOVFF  01,C8
16FC:  MOVFF  00,C7
1700:  RCALL  11CA
1702:  MOVFF  03,B3
1706:  MOVFF  02,B2
170A:  MOVFF  01,B1
170E:  MOVFF  00,B0
....................     
....................    return promediopresion; 
1712:  MOVFF  B0,00
1716:  MOVFF  B1,01
171A:  MOVFF  B2,02
171E:  MOVFF  B3,03
.................... } 
1722:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    lcd_init(); 
*
07CA:  RCALL  0774
....................    set_tris_a(0XFF); 
07CC:  MOVLW  FF
07CE:  MOVWF  F92
....................    set_tris_e(0XFF); 
07D0:  MOVWF  F96
....................    set_tris_d(0X00); 
07D2:  MOVLW  00
07D4:  MOVWF  F95
....................    output_d(0); 
07D6:  CLRF   F95
07D8:  CLRF   F8C
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
07DA:  MOVLW  85
07DC:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
07DE:  BSF    F9D.0
....................    setup_adc_ports(AN0); 
07E0:  MOVF   FC1,W
07E2:  ANDLW  C0
07E4:  IORLW  0E
07E6:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
07E8:  BCF    FC0.0
07EA:  BSF    FC0.1
07EC:  BCF    FC0.2
07EE:  BSF    FC0.7
07F0:  BSF    FC2.0
....................    enable_interrupts(global); 
07F2:  MOVLW  C0
07F4:  IORWF  FF2,F
.................... } 
07F6:  GOTO   1F62 (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
08DA:  MOVLW  01
08DC:  MOVWF  xC1
08DE:  MOVWF  xC2
08E0:  RCALL  07FA
....................    printf(lcd_putc,"       CABINA       "); 
08E2:  MOVLW  2C
08E4:  MOVWF  FF6
08E6:  MOVLW  01
08E8:  MOVWF  FF7
08EA:  RCALL  08BA
....................    lcd_gotoxy(1,2); 
08EC:  MOVLW  01
08EE:  MOVWF  xC1
08F0:  MOVLW  02
08F2:  MOVWF  xC2
08F4:  RCALL  07FA
....................    printf(lcd_putc,"         PCR        "); 
08F6:  MOVLW  42
08F8:  MOVWF  FF6
08FA:  MOVLW  01
08FC:  MOVWF  FF7
08FE:  RCALL  08BA
....................    lcd_gotoxy(1,3); 
0900:  MOVLW  01
0902:  MOVWF  xC1
0904:  MOVLW  03
0906:  MOVWF  xC2
0908:  RCALL  07FA
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
090A:  MOVLW  58
090C:  MOVWF  FF6
090E:  MOVLW  01
0910:  MOVWF  FF7
0912:  RCALL  08BA
....................    lcd_gotoxy(1,4); 
0914:  MOVLW  01
0916:  MOVWF  xC1
0918:  MOVLW  04
091A:  MOVWF  xC2
091C:  RCALL  07FA
....................    printf(lcd_putc,"   REF:JPCV36-PCR   "); 
091E:  MOVLW  6E
0920:  MOVWF  FF6
0922:  MOVLW  01
0924:  MOVWF  FF7
0926:  RCALL  08BA
....................    delay_ms(2000); 
0928:  MOVLW  08
092A:  MOVWF  xAF
092C:  MOVLW  FA
092E:  MOVWF  xC6
0930:  RCALL  06E2
0932:  DECFSZ xAF,F
0934:  BRA    092C
....................    printf(lcd_putc,"\f"); 
0936:  MOVLW  0C
0938:  MOVWF  xC0
093A:  RCALL  085C
.................... } 
093C:  GOTO   1F66 (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0976:  MOVFF  FF2,AF
097A:  BCF    FF2.7
097C:  CLRF   FA9
097E:  BCF    FA6.6
0980:  BCF    FA6.7
0982:  BSF    FA6.0
0984:  MOVF   FA8,W
0986:  BTFSC  xAF.7
0988:  BSF    FF2.7
098A:  MOVWF  39
....................    delay_ms(20);  
098C:  MOVLW  14
098E:  MOVWF  xC6
0990:  RCALL  06E2
....................    contrasena[1]=read_eeprom(1); 
0992:  MOVFF  FF2,AF
0996:  BCF    FF2.7
0998:  MOVLW  01
099A:  MOVWF  FA9
099C:  BCF    FA6.6
099E:  BCF    FA6.7
09A0:  BSF    FA6.0
09A2:  MOVF   FA8,W
09A4:  BTFSC  xAF.7
09A6:  BSF    FF2.7
09A8:  MOVWF  3A
....................    delay_ms(20); 
09AA:  MOVLW  14
09AC:  MOVWF  xC6
09AE:  RCALL  06E2
....................    contrasena[2]=read_eeprom(2); 
09B0:  MOVFF  FF2,AF
09B4:  BCF    FF2.7
09B6:  MOVLW  02
09B8:  MOVWF  FA9
09BA:  BCF    FA6.6
09BC:  BCF    FA6.7
09BE:  BSF    FA6.0
09C0:  MOVF   FA8,W
09C2:  BTFSC  xAF.7
09C4:  BSF    FF2.7
09C6:  MOVWF  3B
....................    delay_ms(20);  
09C8:  MOVLW  14
09CA:  MOVWF  xC6
09CC:  RCALL  06E2
....................    contrasena[3]=read_eeprom(3); 
09CE:  MOVFF  FF2,AF
09D2:  BCF    FF2.7
09D4:  MOVLW  03
09D6:  MOVWF  FA9
09D8:  BCF    FA6.6
09DA:  BCF    FA6.7
09DC:  BSF    FA6.0
09DE:  MOVF   FA8,W
09E0:  BTFSC  xAF.7
09E2:  BSF    FF2.7
09E4:  MOVWF  3C
....................    delay_ms(20); 
09E6:  MOVLW  14
09E8:  MOVWF  xC6
09EA:  RCALL  06E2
....................    estadoalarma=read_eeprom(4); 
09EC:  MOVFF  FF2,AF
09F0:  BCF    FF2.7
09F2:  MOVLW  04
09F4:  MOVWF  FA9
09F6:  BCF    FA6.6
09F8:  BCF    FA6.7
09FA:  BSF    FA6.0
09FC:  MOVF   FA8,W
09FE:  BTFSC  xAF.7
0A00:  BSF    FF2.7
0A02:  MOVWF  01
0A04:  BCF    17.4
0A06:  BTFSC  01.0
0A08:  BSF    17.4
....................    delay_ms(20); 
0A0A:  MOVLW  14
0A0C:  MOVWF  xC6
0A0E:  RCALL  06E2
....................    tempo_minutos=read_eeprom(5); 
0A10:  MOVFF  FF2,AF
0A14:  BCF    FF2.7
0A16:  MOVLW  05
0A18:  MOVWF  FA9
0A1A:  BCF    FA6.6
0A1C:  BCF    FA6.7
0A1E:  BSF    FA6.0
0A20:  MOVF   FA8,W
0A22:  BTFSC  xAF.7
0A24:  BSF    FF2.7
0A26:  MOVWF  27
....................    delay_ms(20); 
0A28:  MOVLW  14
0A2A:  MOVWF  xC6
0A2C:  RCALL  06E2
....................    tempo_segundos=read_eeprom(6); 
0A2E:  MOVFF  FF2,AF
0A32:  BCF    FF2.7
0A34:  MOVLW  06
0A36:  MOVWF  FA9
0A38:  BCF    FA6.6
0A3A:  BCF    FA6.7
0A3C:  BSF    FA6.0
0A3E:  MOVF   FA8,W
0A40:  BTFSC  xAF.7
0A42:  BSF    FF2.7
0A44:  MOVWF  28
....................    delay_ms(20); 
0A46:  MOVLW  14
0A48:  MOVWF  xC6
0A4A:  RCALL  06E2
....................    segundos=read_eeprom(7); 
0A4C:  MOVFF  FF2,AF
0A50:  BCF    FF2.7
0A52:  MOVLW  07
0A54:  MOVWF  FA9
0A56:  BCF    FA6.6
0A58:  BCF    FA6.7
0A5A:  BSF    FA6.0
0A5C:  MOVF   FA8,W
0A5E:  BTFSC  xAF.7
0A60:  BSF    FF2.7
0A62:  MOVWF  21
....................    delay_ms(20); 
0A64:  MOVLW  14
0A66:  MOVWF  xC6
0A68:  RCALL  06E2
....................    minutos=read_eeprom(8); 
0A6A:  MOVFF  FF2,AF
0A6E:  BCF    FF2.7
0A70:  MOVLW  08
0A72:  MOVWF  FA9
0A74:  BCF    FA6.6
0A76:  BCF    FA6.7
0A78:  BSF    FA6.0
0A7A:  MOVF   FA8,W
0A7C:  BTFSC  xAF.7
0A7E:  BSF    FF2.7
0A80:  MOVWF  22
....................    delay_ms(20); 
0A82:  MOVLW  14
0A84:  MOVWF  xC6
0A86:  RCALL  06E2
....................    horasL=read_eeprom(9); 
0A88:  MOVFF  FF2,AF
0A8C:  BCF    FF2.7
0A8E:  MOVLW  09
0A90:  MOVWF  FA9
0A92:  BCF    FA6.6
0A94:  BCF    FA6.7
0A96:  BSF    FA6.0
0A98:  MOVF   FA8,W
0A9A:  BTFSC  xAF.7
0A9C:  BSF    FF2.7
0A9E:  MOVWF  23
....................    delay_ms(20); 
0AA0:  MOVLW  14
0AA2:  MOVWF  xC6
0AA4:  RCALL  06E2
....................    horasH=read_eeprom(10); 
0AA6:  MOVFF  FF2,AF
0AAA:  BCF    FF2.7
0AAC:  MOVLW  0A
0AAE:  MOVWF  FA9
0AB0:  BCF    FA6.6
0AB2:  BCF    FA6.7
0AB4:  BSF    FA6.0
0AB6:  MOVF   FA8,W
0AB8:  BTFSC  xAF.7
0ABA:  BSF    FF2.7
0ABC:  MOVWF  24
....................    delay_ms(20); 
0ABE:  MOVLW  14
0AC0:  MOVWF  xC6
0AC2:  RCALL  06E2
....................    G_l=read_eeprom(11); 
0AC4:  MOVFF  FF2,AF
0AC8:  BCF    FF2.7
0ACA:  MOVLW  0B
0ACC:  MOVWF  FA9
0ACE:  BCF    FA6.6
0AD0:  BCF    FA6.7
0AD2:  BSF    FA6.0
0AD4:  MOVF   FA8,W
0AD6:  BTFSC  xAF.7
0AD8:  BSF    FF2.7
0ADA:  MOVWF  25
....................    delay_ms(20); 
0ADC:  MOVLW  14
0ADE:  MOVWF  xC6
0AE0:  RCALL  06E2
....................    G_h=read_eeprom(12); 
0AE2:  MOVFF  FF2,AF
0AE6:  BCF    FF2.7
0AE8:  MOVLW  0C
0AEA:  MOVWF  FA9
0AEC:  BCF    FA6.6
0AEE:  BCF    FA6.7
0AF0:  BSF    FA6.0
0AF2:  MOVF   FA8,W
0AF4:  BTFSC  xAF.7
0AF6:  BSF    FF2.7
0AF8:  MOVWF  26
....................    delay_ms(20); 
0AFA:  MOVLW  14
0AFC:  MOVWF  xC6
0AFE:  RCALL  06E2
....................    G16=make16(G_h,G_l); 
0B00:  MOVFF  26,43
0B04:  MOVFF  25,42
....................    G=G16; 
0B08:  MOVFF  43,C8
0B0C:  MOVFF  42,C7
0B10:  RCALL  0940
0B12:  MOVFF  03,A9
0B16:  MOVFF  02,A8
0B1A:  MOVFF  01,A7
0B1E:  MOVFF  00,A6
....................    horas=make16(horasH,horasL); 
0B22:  MOVFF  24,41
0B26:  MOVFF  23,40
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
0B2A:  MOVFF  27,29
0B2E:  MOVFF  28,2A
.................... } 
0B32:  GOTO   1F6A (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
0BAC:  BTFSC  39.7
0BAE:  BRA    0BB6
0BB0:  MOVF   39,W
0BB2:  SUBLW  09
0BB4:  BNC   0BBC
0BB6:  BTFSC  39.7
0BB8:  BRA    0BBC
0BBA:  BRA    0BEC
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
0BBC:  CLRF   39
0BBE:  CLRF   FA9
0BC0:  CLRF   FA8
0BC2:  BCF    FA6.6
0BC4:  BCF    FA6.7
0BC6:  BSF    FA6.2
0BC8:  MOVF   FF2,W
0BCA:  MOVWF  00
0BCC:  BCF    FF2.7
0BCE:  MOVLB  F
0BD0:  MOVLW  55
0BD2:  MOVWF  FA7
0BD4:  MOVLW  AA
0BD6:  MOVWF  FA7
0BD8:  BSF    FA6.1
0BDA:  BTFSC  FA6.1
0BDC:  BRA    0BDA
0BDE:  BCF    FA6.2
0BE0:  MOVF   00,W
0BE2:  IORWF  FF2,F
0BE4:  MOVLW  14
0BE6:  MOVLB  0
0BE8:  MOVWF  xC6
0BEA:  RCALL  06E2
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
0BEC:  BTFSC  3A.7
0BEE:  BRA    0BF6
0BF0:  MOVF   3A,W
0BF2:  SUBLW  09
0BF4:  BNC   0BFC
0BF6:  BTFSC  3A.7
0BF8:  BRA    0BFC
0BFA:  BRA    0C2E
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
0BFC:  CLRF   3A
0BFE:  MOVLW  01
0C00:  MOVWF  FA9
0C02:  CLRF   FA8
0C04:  BCF    FA6.6
0C06:  BCF    FA6.7
0C08:  BSF    FA6.2
0C0A:  MOVF   FF2,W
0C0C:  MOVWF  00
0C0E:  BCF    FF2.7
0C10:  MOVLB  F
0C12:  MOVLW  55
0C14:  MOVWF  FA7
0C16:  MOVLW  AA
0C18:  MOVWF  FA7
0C1A:  BSF    FA6.1
0C1C:  BTFSC  FA6.1
0C1E:  BRA    0C1C
0C20:  BCF    FA6.2
0C22:  MOVF   00,W
0C24:  IORWF  FF2,F
0C26:  MOVLW  14
0C28:  MOVLB  0
0C2A:  MOVWF  xC6
0C2C:  RCALL  06E2
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
0C2E:  BTFSC  3B.7
0C30:  BRA    0C38
0C32:  MOVF   3B,W
0C34:  SUBLW  09
0C36:  BNC   0C3E
0C38:  BTFSC  3B.7
0C3A:  BRA    0C3E
0C3C:  BRA    0C70
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
0C3E:  CLRF   3B
0C40:  MOVLW  02
0C42:  MOVWF  FA9
0C44:  CLRF   FA8
0C46:  BCF    FA6.6
0C48:  BCF    FA6.7
0C4A:  BSF    FA6.2
0C4C:  MOVF   FF2,W
0C4E:  MOVWF  00
0C50:  BCF    FF2.7
0C52:  MOVLB  F
0C54:  MOVLW  55
0C56:  MOVWF  FA7
0C58:  MOVLW  AA
0C5A:  MOVWF  FA7
0C5C:  BSF    FA6.1
0C5E:  BTFSC  FA6.1
0C60:  BRA    0C5E
0C62:  BCF    FA6.2
0C64:  MOVF   00,W
0C66:  IORWF  FF2,F
0C68:  MOVLW  14
0C6A:  MOVLB  0
0C6C:  MOVWF  xC6
0C6E:  RCALL  06E2
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
0C70:  BTFSC  3C.7
0C72:  BRA    0C7A
0C74:  MOVF   3C,W
0C76:  SUBLW  09
0C78:  BNC   0C80
0C7A:  BTFSC  3C.7
0C7C:  BRA    0C80
0C7E:  BRA    0CB2
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
0C80:  CLRF   3C
0C82:  MOVLW  03
0C84:  MOVWF  FA9
0C86:  CLRF   FA8
0C88:  BCF    FA6.6
0C8A:  BCF    FA6.7
0C8C:  BSF    FA6.2
0C8E:  MOVF   FF2,W
0C90:  MOVWF  00
0C92:  BCF    FF2.7
0C94:  MOVLB  F
0C96:  MOVLW  55
0C98:  MOVWF  FA7
0C9A:  MOVLW  AA
0C9C:  MOVWF  FA7
0C9E:  BSF    FA6.1
0CA0:  BTFSC  FA6.1
0CA2:  BRA    0CA0
0CA4:  BCF    FA6.2
0CA6:  MOVF   00,W
0CA8:  IORWF  FF2,F
0CAA:  MOVLW  14
0CAC:  MOVLB  0
0CAE:  MOVWF  xC6
0CB0:  RCALL  06E2
....................    } 
....................    if(estadoalarma>1){ 
0CB2:  MOVLW  00
0CB4:  BTFSC  17.4
0CB6:  MOVLW  01
0CB8:  SUBLW  01
0CBA:  BC    0CF0
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
0CBC:  BSF    17.4
0CBE:  MOVLW  04
0CC0:  MOVWF  FA9
0CC2:  MOVLW  01
0CC4:  MOVWF  FA8
0CC6:  BCF    FA6.6
0CC8:  BCF    FA6.7
0CCA:  BSF    FA6.2
0CCC:  MOVF   FF2,W
0CCE:  MOVWF  00
0CD0:  BCF    FF2.7
0CD2:  MOVLB  F
0CD4:  MOVLW  55
0CD6:  MOVWF  FA7
0CD8:  MOVLW  AA
0CDA:  MOVWF  FA7
0CDC:  BSF    FA6.1
0CDE:  BTFSC  FA6.1
0CE0:  BRA    0CDE
0CE2:  BCF    FA6.2
0CE4:  MOVF   00,W
0CE6:  IORWF  FF2,F
0CE8:  MOVLW  14
0CEA:  MOVLB  0
0CEC:  MOVWF  xC6
0CEE:  RCALL  06E2
....................    } 
....................    /*if(tempo_minutos>200){ 
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
....................    }*/ 
....................    if(tempo_segundos>59){ 
0CF0:  MOVF   28,W
0CF2:  SUBLW  3B
0CF4:  BC    0D28
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
0CF6:  CLRF   28
0CF8:  MOVLW  06
0CFA:  MOVWF  FA9
0CFC:  CLRF   FA8
0CFE:  BCF    FA6.6
0D00:  BCF    FA6.7
0D02:  BSF    FA6.2
0D04:  MOVF   FF2,W
0D06:  MOVWF  00
0D08:  BCF    FF2.7
0D0A:  MOVLB  F
0D0C:  MOVLW  55
0D0E:  MOVWF  FA7
0D10:  MOVLW  AA
0D12:  MOVWF  FA7
0D14:  BSF    FA6.1
0D16:  BTFSC  FA6.1
0D18:  BRA    0D16
0D1A:  BCF    FA6.2
0D1C:  MOVF   00,W
0D1E:  IORWF  FF2,F
0D20:  MOVLW  14
0D22:  MOVLB  0
0D24:  MOVWF  xC6
0D26:  RCALL  06E2
....................    } 
....................    if(segundos>60){ 
0D28:  MOVF   21,W
0D2A:  SUBLW  3C
0D2C:  BC    0D60
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
0D2E:  CLRF   21
0D30:  MOVLW  07
0D32:  MOVWF  FA9
0D34:  CLRF   FA8
0D36:  BCF    FA6.6
0D38:  BCF    FA6.7
0D3A:  BSF    FA6.2
0D3C:  MOVF   FF2,W
0D3E:  MOVWF  00
0D40:  BCF    FF2.7
0D42:  MOVLB  F
0D44:  MOVLW  55
0D46:  MOVWF  FA7
0D48:  MOVLW  AA
0D4A:  MOVWF  FA7
0D4C:  BSF    FA6.1
0D4E:  BTFSC  FA6.1
0D50:  BRA    0D4E
0D52:  BCF    FA6.2
0D54:  MOVF   00,W
0D56:  IORWF  FF2,F
0D58:  MOVLW  14
0D5A:  MOVLB  0
0D5C:  MOVWF  xC6
0D5E:  RCALL  06E2
....................    } 
....................    if(minutos>60){ 
0D60:  MOVF   22,W
0D62:  SUBLW  3C
0D64:  BC    0D98
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
0D66:  CLRF   22
0D68:  MOVLW  08
0D6A:  MOVWF  FA9
0D6C:  CLRF   FA8
0D6E:  BCF    FA6.6
0D70:  BCF    FA6.7
0D72:  BSF    FA6.2
0D74:  MOVF   FF2,W
0D76:  MOVWF  00
0D78:  BCF    FF2.7
0D7A:  MOVLB  F
0D7C:  MOVLW  55
0D7E:  MOVWF  FA7
0D80:  MOVLW  AA
0D82:  MOVWF  FA7
0D84:  BSF    FA6.1
0D86:  BTFSC  FA6.1
0D88:  BRA    0D86
0D8A:  BCF    FA6.2
0D8C:  MOVF   00,W
0D8E:  IORWF  FF2,F
0D90:  MOVLW  14
0D92:  MOVLB  0
0D94:  MOVWF  xC6
0D96:  RCALL  06E2
....................    } 
....................    if(horas>10000){ 
0D98:  MOVF   41,W
0D9A:  SUBLW  26
0D9C:  BC    0E0E
0D9E:  XORLW  FF
0DA0:  BNZ   0DA8
0DA2:  MOVF   40,W
0DA4:  SUBLW  10
0DA6:  BC    0E0E
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
0DA8:  CLRF   41
0DAA:  CLRF   40
0DAC:  MOVLW  09
0DAE:  MOVWF  FA9
0DB0:  MOVLW  0A
0DB2:  MOVWF  FA8
0DB4:  BCF    FA6.6
0DB6:  BCF    FA6.7
0DB8:  BSF    FA6.2
0DBA:  MOVF   FF2,W
0DBC:  MOVWF  00
0DBE:  BCF    FF2.7
0DC0:  MOVLB  F
0DC2:  MOVLW  55
0DC4:  MOVWF  FA7
0DC6:  MOVLW  AA
0DC8:  MOVWF  FA7
0DCA:  BSF    FA6.1
0DCC:  BTFSC  FA6.1
0DCE:  BRA    0DCC
0DD0:  BCF    FA6.2
0DD2:  MOVF   00,W
0DD4:  IORWF  FF2,F
0DD6:  MOVLW  14
0DD8:  MOVLB  0
0DDA:  MOVWF  xC6
0DDC:  RCALL  06E2
0DDE:  MOVLW  0A
0DE0:  MOVWF  FA9
0DE2:  CLRF   FA8
0DE4:  BCF    FA6.6
0DE6:  BCF    FA6.7
0DE8:  BSF    FA6.2
0DEA:  MOVF   FF2,W
0DEC:  MOVWF  00
0DEE:  BCF    FF2.7
0DF0:  MOVLB  F
0DF2:  MOVLW  55
0DF4:  MOVWF  FA7
0DF6:  MOVLW  AA
0DF8:  MOVWF  FA7
0DFA:  BSF    FA6.1
0DFC:  BTFSC  FA6.1
0DFE:  BRA    0DFC
0E00:  BCF    FA6.2
0E02:  MOVF   00,W
0E04:  IORWF  FF2,F
0E06:  MOVLW  14
0E08:  MOVLB  0
0E0A:  MOVWF  xC6
0E0C:  RCALL  06E2
....................    } 
....................    if(G>300){ 
0E0E:  CLRF   xC6
0E10:  CLRF   xC5
0E12:  MOVLW  16
0E14:  MOVWF  xC4
0E16:  MOVLW  87
0E18:  MOVWF  xC3
0E1A:  MOVFF  A9,CA
0E1E:  MOVFF  A8,C9
0E22:  MOVFF  A7,C8
0E26:  MOVFF  A6,C7
0E2A:  RCALL  0B36
0E2C:  BNC   0E9C
....................       G=240;write_eeprom(11,240);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
0E2E:  CLRF   xA9
0E30:  CLRF   xA8
0E32:  MOVLW  70
0E34:  MOVWF  xA7
0E36:  MOVLW  86
0E38:  MOVWF  xA6
0E3A:  MOVLW  0B
0E3C:  MOVWF  FA9
0E3E:  MOVLW  F0
0E40:  MOVWF  FA8
0E42:  BCF    FA6.6
0E44:  BCF    FA6.7
0E46:  BSF    FA6.2
0E48:  MOVF   FF2,W
0E4A:  MOVWF  00
0E4C:  BCF    FF2.7
0E4E:  MOVLB  F
0E50:  MOVLW  55
0E52:  MOVWF  FA7
0E54:  MOVLW  AA
0E56:  MOVWF  FA7
0E58:  BSF    FA6.1
0E5A:  BTFSC  FA6.1
0E5C:  BRA    0E5A
0E5E:  BCF    FA6.2
0E60:  MOVF   00,W
0E62:  IORWF  FF2,F
0E64:  MOVLW  14
0E66:  MOVLB  0
0E68:  MOVWF  xC6
0E6A:  RCALL  06E2
0E6C:  MOVLW  0C
0E6E:  MOVWF  FA9
0E70:  CLRF   FA8
0E72:  BCF    FA6.6
0E74:  BCF    FA6.7
0E76:  BSF    FA6.2
0E78:  MOVF   FF2,W
0E7A:  MOVWF  00
0E7C:  BCF    FF2.7
0E7E:  MOVLB  F
0E80:  MOVLW  55
0E82:  MOVWF  FA7
0E84:  MOVLW  AA
0E86:  MOVWF  FA7
0E88:  BSF    FA6.1
0E8A:  BTFSC  FA6.1
0E8C:  BRA    0E8A
0E8E:  BCF    FA6.2
0E90:  MOVF   00,W
0E92:  IORWF  FF2,F
0E94:  MOVLW  14
0E96:  MOVLB  0
0E98:  MOVWF  xC6
0E9A:  RCALL  06E2
....................    } 
....................     
.................... } 
0E9C:  GOTO   1F6E (RETURN)
....................  
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
0184:  MOVLW  15
0186:  MOVWF  FCF
0188:  MOVLW  A0
018A:  MOVWF  FCE
....................    //set_timer1(45536);  // 5 ms 
....................    tiempos++; 
018C:  INCF   3E,F
018E:  BTFSC  FD8.2
0190:  INCF   3F,F
....................     
....................    if(Bloqueo){ 
0192:  BTFSS  xAA.0
0194:  BRA    019C
....................       tiempobloqueo++; 
0196:  INCF   44,F
0198:  BTFSC  FD8.2
019A:  INCF   45,F
....................    } 
....................     
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
019C:  MOVF   3F,F
019E:  BNZ   01A6
01A0:  MOVF   3E,W
01A2:  SUBLW  C7
01A4:  BC    01F4
....................    {tiempos=0;tiemporeset++;Lectura=1; 
01A6:  CLRF   3F
01A8:  CLRF   3E
01AA:  INCF   2F,F
01AC:  BSF    17.0
....................     
....................    if(ActivaBuzzer==1){ 
01AE:  DECFSZ 3D,W
01B0:  BRA    01C6
....................       if(estadobuzzer==0){ 
01B2:  BTFSC  17.3
01B4:  BRA    01BC
....................          Buzzer_off; 
01B6:  BCF    F8C.0
01B8:  BCF    F95.0
....................       }else{ 
01BA:  BRA    01C4
....................          if(estadoalarma==1) 
01BC:  BTFSS  17.4
01BE:  BRA    01C4
....................             Buzzer_on; 
01C0:  BSF    F8C.0
01C2:  BCF    F95.0
....................       } 
....................       estadobuzzer=!estadobuzzer; 
01C4:  BTG    17.3
....................    } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadouv==1){ 
01C6:  BTFSS  16.0
01C8:  BRA    01F4
....................       segundos++; 
01CA:  INCF   21,F
....................       if(tiempo_cumplido==0) 
01CC:  BTFSC  16.7
01CE:  BRA    01F4
....................       { 
....................          if(tempo_segundos>0) 
01D0:  MOVF   28,F
01D2:  BZ    01D8
....................          { 
....................             tempo_segundos--; 
01D4:  DECF   28,F
....................          } 
....................          else 
01D6:  BRA    01F4
....................          { 
....................             if(tempo_minutos>0) 
01D8:  MOVF   27,F
01DA:  BZ    01E4
....................             { 
....................                tempo_minutos--; 
01DC:  DECF   27,F
....................                tempo_segundos=59; 
01DE:  MOVLW  3B
01E0:  MOVWF  28
....................             } 
....................             else 
01E2:  BRA    01F4
....................             { 
....................                tiempo_cumplido=1; 
01E4:  BSF    16.7
....................                estadouv=0;Luz_UV_off; 
01E6:  BCF    16.0
01E8:  BCF    F8C.1
01EA:  BCF    F95.1
....................                tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
01EC:  MOVFF  29,27
01F0:  MOVFF  2A,28
....................             } 
....................          } 
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
01F4:  BCF    F9E.0
01F6:  GOTO   0054
.................... void main () 
.................... { 
*
1DEE:  CLRF   FF8
1DF0:  BCF    FD0.7
1DF2:  BSF    07.7
1DF4:  CLRF   FEA
1DF6:  CLRF   FE9
1DF8:  BCF    16.0
1DFA:  BCF    16.1
1DFC:  BCF    16.2
1DFE:  BCF    16.3
1E00:  BCF    16.4
1E02:  BCF    16.5
1E04:  BCF    16.6
1E06:  BCF    16.7
1E08:  BCF    17.0
1E0A:  BCF    17.1
1E0C:  BCF    17.2
1E0E:  BCF    17.3
1E10:  BCF    17.4
1E12:  CLRF   18
1E14:  MOVLW  06
1E16:  MOVWF  19
1E18:  MOVLW  02
1E1A:  MOVWF  1A
1E1C:  MOVLW  0B
1E1E:  MOVWF  1B
1E20:  MOVLW  02
1E22:  MOVWF  1C
1E24:  MOVLW  03
1E26:  MOVWF  1D
1E28:  MOVLW  02
1E2A:  MOVWF  1E
1E2C:  MOVWF  1F
1E2E:  MOVLW  04
1E30:  MOVWF  20
1E32:  CLRF   21
1E34:  CLRF   22
1E36:  CLRF   23
1E38:  CLRF   24
1E3A:  CLRF   25
1E3C:  CLRF   26
1E3E:  CLRF   27
1E40:  CLRF   28
1E42:  CLRF   29
1E44:  CLRF   2A
1E46:  CLRF   2B
1E48:  CLRF   2C
1E4A:  CLRF   2D
1E4C:  MOVLW  01
1E4E:  MOVWF  2E
1E50:  CLRF   2F
1E52:  CLRF   30
1E54:  CLRF   31
1E56:  CLRF   3D
1E58:  CLRF   41
1E5A:  CLRF   40
1E5C:  CLRF   43
1E5E:  CLRF   42
1E60:  CLRF   45
1E62:  CLRF   44
1E64:  CLRF   x99
1E66:  CLRF   x98
1E68:  CLRF   x97
1E6A:  CLRF   x96
1E6C:  CLRF   x9D
1E6E:  CLRF   x9C
1E70:  CLRF   x9B
1E72:  CLRF   x9A
1E74:  CLRF   xA1
1E76:  CLRF   xA0
1E78:  CLRF   x9F
1E7A:  CLRF   x9E
1E7C:  CLRF   xA5
1E7E:  CLRF   xA4
1E80:  CLRF   xA3
1E82:  CLRF   xA2
1E84:  CLRF   xA9
1E86:  CLRF   xA8
1E88:  CLRF   xA7
1E8A:  MOVLW  80
1E8C:  MOVWF  xA6
1E8E:  BSF    17.5
1E90:  BCF    17.6
1E92:  BCF    17.7
1E94:  BCF    xAA.0
1E96:  MOVF   FC1,W
1E98:  ANDLW  C0
1E9A:  IORLW  0F
1E9C:  MOVWF  FC1
1E9E:  MOVLW  07
1EA0:  MOVWF  FB4
1EA2:  MOVLW  3E
1EA4:  MOVWF  32
1EA6:  MOVLW  20
1EA8:  MOVWF  33
1EAA:  MOVLW  5E
1EAC:  MOVWF  34
1EAE:  CLRF   35
1EB0:  CLRF   36
1EB2:  CLRF   37
1EB4:  CLRF   38
1EB6:  CLRF   39
1EB8:  CLRF   3A
1EBA:  CLRF   3B
1EBC:  CLRF   3C
1EBE:  CLRF   46
1EC0:  CLRF   47
1EC2:  CLRF   48
1EC4:  CLRF   49
1EC6:  CLRF   4A
1EC8:  CLRF   4B
1ECA:  CLRF   4C
1ECC:  CLRF   4D
1ECE:  CLRF   4E
1ED0:  CLRF   4F
1ED2:  CLRF   50
1ED4:  CLRF   51
1ED6:  CLRF   52
1ED8:  CLRF   53
1EDA:  CLRF   54
1EDC:  CLRF   55
1EDE:  CLRF   56
1EE0:  CLRF   57
1EE2:  CLRF   58
1EE4:  CLRF   59
1EE6:  CLRF   5A
1EE8:  CLRF   5B
1EEA:  CLRF   5C
1EEC:  CLRF   5D
1EEE:  CLRF   5E
1EF0:  CLRF   5F
1EF2:  CLRF   x60
1EF4:  CLRF   x61
1EF6:  CLRF   x62
1EF8:  CLRF   x63
1EFA:  CLRF   x64
1EFC:  CLRF   x65
1EFE:  CLRF   x66
1F00:  CLRF   x67
1F02:  CLRF   x68
1F04:  CLRF   x69
1F06:  CLRF   x6A
1F08:  CLRF   x6B
1F0A:  CLRF   x6C
1F0C:  CLRF   x6D
1F0E:  CLRF   x6E
1F10:  CLRF   x6F
1F12:  CLRF   x70
1F14:  CLRF   x71
1F16:  CLRF   x72
1F18:  CLRF   x73
1F1A:  CLRF   x74
1F1C:  CLRF   x75
1F1E:  CLRF   x76
1F20:  CLRF   x77
1F22:  CLRF   x78
1F24:  CLRF   x79
1F26:  CLRF   x7A
1F28:  CLRF   x7B
1F2A:  CLRF   x7C
1F2C:  CLRF   x7D
1F2E:  CLRF   x7E
1F30:  CLRF   x7F
1F32:  CLRF   x80
1F34:  CLRF   x81
1F36:  CLRF   x82
1F38:  CLRF   x83
1F3A:  CLRF   x84
1F3C:  CLRF   x85
1F3E:  CLRF   x86
1F40:  CLRF   x87
1F42:  CLRF   x88
1F44:  CLRF   x89
1F46:  CLRF   x8A
1F48:  CLRF   x8B
1F4A:  CLRF   x8C
1F4C:  CLRF   x8D
1F4E:  CLRF   x8E
1F50:  CLRF   x8F
1F52:  CLRF   x90
1F54:  CLRF   x91
1F56:  CLRF   x92
1F58:  CLRF   x93
1F5A:  CLRF   x94
1F5C:  CLRF   x95
....................    ConfigInterrupciones(); 
1F5E:  GOTO   07CA
....................    MensajeBienvenida(); 
1F62:  GOTO   08DA
....................    LeeEEPROM();  
1F66:  GOTO   0976
....................    LimitaValores(); 
1F6A:  GOTO   0BAC
....................  
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1F6E:  MOVF   18,F
1F70:  BTFSS  FD8.2
1F72:  BRA    2376
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
1F74:  MOVLW  01
1F76:  MOVWF  xC1
1F78:  MOVWF  xC2
1F7A:  CALL   07FA
....................          printf(lcd_putc,"     Ingrese        "); 
1F7E:  MOVLW  FA
1F80:  MOVWF  FF6
1F82:  MOVLW  01
1F84:  MOVWF  FF7
1F86:  CALL   08BA
....................          lcd_gotoxy(1,2); 
1F8A:  MOVLW  01
1F8C:  MOVWF  xC1
1F8E:  MOVLW  02
1F90:  MOVWF  xC2
1F92:  CALL   07FA
....................          printf(lcd_putc,"    Contraseña      "); 
1F96:  MOVLW  10
1F98:  MOVWF  FF6
1F9A:  MOVLW  02
1F9C:  MOVWF  FF7
1F9E:  CALL   08BA
....................          lcd_gotoxy(1,3); 
1FA2:  MOVLW  01
1FA4:  MOVWF  xC1
1FA6:  MOVLW  03
1FA8:  MOVWF  xC2
1FAA:  CALL   07FA
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1FAE:  MOVLW  26
1FB0:  MOVWF  FF6
1FB2:  MOVLW  02
1FB4:  MOVWF  FF7
1FB6:  MOVLW  0A
1FB8:  MOVWF  xB3
1FBA:  CALL   0EA0
1FBE:  MOVFF  35,AF
1FC2:  MOVLW  1F
1FC4:  MOVWF  xB0
1FC6:  CALL   0EE6
1FCA:  MOVFF  36,AF
1FCE:  MOVLW  1F
1FD0:  MOVWF  xB0
1FD2:  CALL   0EE6
1FD6:  MOVFF  37,AF
1FDA:  MOVLW  1F
1FDC:  MOVWF  xB0
1FDE:  CALL   0EE6
1FE2:  MOVFF  38,AF
1FE6:  MOVLW  1F
1FE8:  MOVWF  xB0
1FEA:  CALL   0EE6
1FEE:  MOVLW  20
1FF0:  MOVWF  xC0
1FF2:  CALL   085C
1FF6:  MOVLW  20
1FF8:  MOVWF  xC0
1FFA:  CALL   085C
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1FFE:  MOVFF  1B,C1
2002:  MOVLW  04
2004:  MOVWF  xC2
2006:  CALL   07FA
....................          lcd_putc(t[2]); 
200A:  MOVFF  34,C0
200E:  CALL   085C
....................           
....................          if(unidad>11&&unidad<14){ 
2012:  MOVF   1B,W
2014:  SUBLW  0B
2016:  BC    2036
2018:  MOVF   1B,W
201A:  SUBLW  0D
201C:  BNC   2036
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
201E:  MOVLW  01
2020:  SUBWF  1B,W
2022:  MOVWF  xAF
2024:  MOVWF  xC1
2026:  MOVLW  04
2028:  MOVWF  xC2
202A:  CALL   07FA
....................             lcd_putc(t[1]); 
202E:  MOVFF  33,C0
2032:  CALL   085C
....................          } 
....................           
....................          Cambio=OFF; 
2036:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2038:  BSF    F92.5
203A:  BTFSS  F80.5
203C:  BRA    2070
....................          delay_ms(20); 
203E:  MOVLW  14
2040:  MOVWF  xC6
2042:  CALL   06E2
....................          if(UP){ 
2046:  BSF    F92.5
2048:  BTFSS  F80.5
204A:  BRA    206E
....................             if(Flanco == 0) { 
204C:  BTFSC  16.3
204E:  BRA    206E
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2050:  MOVLW  0B
2052:  SUBWF  1B,W
2054:  CLRF   03
2056:  ADDLW  35
2058:  MOVWF  FE9
205A:  MOVLW  00
205C:  ADDWFC 03,W
205E:  MOVWF  FEA
2060:  INCF   FEF,F
2062:  BSF    16.3
2064:  MOVLW  1E
2066:  MOVWF  xC6
2068:  CALL   06E2
206C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
206E:  BRA    2072
....................          Flanco = 0; 
2070:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2072:  BSF    F96.0
2074:  BTFSS  F84.0
2076:  BRA    20AA
....................          delay_ms(20); 
2078:  MOVLW  14
207A:  MOVWF  xC6
207C:  CALL   06E2
....................          if(DOWN){ 
2080:  BSF    F96.0
2082:  BTFSS  F84.0
2084:  BRA    20A8
....................             if(Flanco2 == 0) { 
2086:  BTFSC  16.5
2088:  BRA    20A8
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
208A:  MOVLW  0B
208C:  SUBWF  1B,W
208E:  CLRF   03
2090:  ADDLW  35
2092:  MOVWF  FE9
2094:  MOVLW  00
2096:  ADDWFC 03,W
2098:  MOVWF  FEA
209A:  DECF   FEF,F
209C:  BSF    16.5
209E:  MOVLW  1E
20A0:  MOVWF  xC6
20A2:  CALL   06E2
20A6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
20A8:  BRA    20AC
....................          Flanco2 = 0; 
20AA:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
20AC:  BSF    F96.1
20AE:  BTFSS  F84.1
20B0:  BRA    20DC
....................          delay_ms(20); 
20B2:  MOVLW  14
20B4:  MOVWF  xC6
20B6:  CALL   06E2
....................          if(RIGHT){ 
20BA:  BSF    F96.1
20BC:  BTFSS  F84.1
20BE:  BRA    20DA
....................             if(Flanco1 == 0) { 
20C0:  BTFSC  16.4
20C2:  BRA    20DA
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
20C4:  BSF    16.4
20C6:  INCF   1B,F
20C8:  MOVLW  1E
20CA:  MOVWF  xC6
20CC:  CALL   06E2
20D0:  MOVLW  0C
20D2:  MOVWF  xC0
20D4:  CALL   085C
20D8:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
20DA:  BRA    20DE
....................          Flanco1 = 0; 
20DC:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
20DE:  BSF    F96.2
20E0:  BTFSS  F84.2
20E2:  BRA    210E
....................          delay_ms(150); 
20E4:  MOVLW  96
20E6:  MOVWF  xC6
20E8:  CALL   06E2
....................          if(IZQU){ 
20EC:  BSF    F96.2
20EE:  BTFSS  F84.2
20F0:  BRA    210C
....................             if(Flanco3 == 0){ 
20F2:  BTFSC  16.6
20F4:  BRA    210C
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
20F6:  BSF    16.6
20F8:  DECF   1B,F
20FA:  MOVLW  1E
20FC:  MOVWF  xC6
20FE:  CALL   06E2
2102:  MOVLW  0C
2104:  MOVWF  xC0
2106:  CALL   085C
210A:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
210C:  BRA    2110
....................         Flanco3 = 0; 
210E:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2110:  MOVLW  0B
2112:  SUBWF  1B,W
2114:  CLRF   03
2116:  ADDLW  35
2118:  MOVWF  FE9
211A:  MOVLW  00
211C:  ADDWFC 03,W
211E:  MOVWF  FEA
2120:  BTFSC  FEF.7
2122:  BRA    2126
2124:  BRA    213A
....................          clave[unidad-11]=9; 
2126:  MOVLW  0B
2128:  SUBWF  1B,W
212A:  CLRF   03
212C:  ADDLW  35
212E:  MOVWF  FE9
2130:  MOVLW  00
2132:  ADDWFC 03,W
2134:  MOVWF  FEA
2136:  MOVLW  09
2138:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
213A:  MOVLW  0B
213C:  SUBWF  1B,W
213E:  CLRF   03
2140:  ADDLW  35
2142:  MOVWF  FE9
2144:  MOVLW  00
2146:  ADDWFC 03,W
2148:  MOVWF  FEA
214A:  BTFSC  FEF.7
214C:  BRA    2166
214E:  MOVF   FEF,W
2150:  SUBLW  09
2152:  BC    2166
....................          clave[unidad-11]=0; 
2154:  MOVLW  0B
2156:  SUBWF  1B,W
2158:  CLRF   03
215A:  ADDLW  35
215C:  MOVWF  FE9
215E:  MOVLW  00
2160:  ADDWFC 03,W
2162:  MOVWF  FEA
2164:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2166:  MOVF   1B,W
2168:  SUBLW  0A
216A:  BNC   2170
....................          unidad=11; 
216C:  MOVLW  0B
216E:  MOVWF  1B
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2170:  MOVF   1B,W
2172:  SUBLW  0E
2174:  BTFSC  FD8.0
2176:  BRA    2376
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
2178:  MOVF   35,W
217A:  SUBLW  03
217C:  BNZ   2258
217E:  MOVF   36,W
2180:  SUBLW  08
2182:  BNZ   2258
2184:  MOVF   37,W
2186:  SUBLW  09
2188:  BNZ   2258
218A:  MOVF   38,W
218C:  SUBLW  02
218E:  BNZ   2258
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2190:  CLRF   FA9
2192:  CLRF   FA8
2194:  BCF    FA6.6
2196:  BCF    FA6.7
2198:  BSF    FA6.2
219A:  MOVF   FF2,W
219C:  MOVWF  00
219E:  BCF    FF2.7
21A0:  MOVLB  F
21A2:  MOVLW  55
21A4:  MOVWF  FA7
21A6:  MOVLW  AA
21A8:  MOVWF  FA7
21AA:  BSF    FA6.1
21AC:  BTFSC  FA6.1
21AE:  BRA    21AC
21B0:  BCF    FA6.2
21B2:  MOVF   00,W
21B4:  IORWF  FF2,F
21B6:  MOVLW  14
21B8:  MOVLB  0
21BA:  MOVWF  xC6
21BC:  CALL   06E2
21C0:  MOVLW  01
21C2:  MOVWF  FA9
21C4:  CLRF   FA8
21C6:  BCF    FA6.6
21C8:  BCF    FA6.7
21CA:  BSF    FA6.2
21CC:  MOVF   FF2,W
21CE:  MOVWF  00
21D0:  BCF    FF2.7
21D2:  MOVLB  F
21D4:  MOVLW  55
21D6:  MOVWF  FA7
21D8:  MOVLW  AA
21DA:  MOVWF  FA7
21DC:  BSF    FA6.1
21DE:  BTFSC  FA6.1
21E0:  BRA    21DE
21E2:  BCF    FA6.2
21E4:  MOVF   00,W
21E6:  IORWF  FF2,F
21E8:  MOVLW  14
21EA:  MOVLB  0
21EC:  MOVWF  xC6
21EE:  CALL   06E2
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
21F2:  MOVLW  02
21F4:  MOVWF  FA9
21F6:  CLRF   FA8
21F8:  BCF    FA6.6
21FA:  BCF    FA6.7
21FC:  BSF    FA6.2
21FE:  MOVF   FF2,W
2200:  MOVWF  00
2202:  BCF    FF2.7
2204:  MOVLB  F
2206:  MOVLW  55
2208:  MOVWF  FA7
220A:  MOVLW  AA
220C:  MOVWF  FA7
220E:  BSF    FA6.1
2210:  BTFSC  FA6.1
2212:  BRA    2210
2214:  BCF    FA6.2
2216:  MOVF   00,W
2218:  IORWF  FF2,F
221A:  MOVLW  14
221C:  MOVLB  0
221E:  MOVWF  xC6
2220:  CALL   06E2
2224:  MOVLW  03
2226:  MOVWF  FA9
2228:  CLRF   FA8
222A:  BCF    FA6.6
222C:  BCF    FA6.7
222E:  BSF    FA6.2
2230:  MOVF   FF2,W
2232:  MOVWF  00
2234:  BCF    FF2.7
2236:  MOVLB  F
2238:  MOVLW  55
223A:  MOVWF  FA7
223C:  MOVLW  AA
223E:  MOVWF  FA7
2240:  BSF    FA6.1
2242:  BTFSC  FA6.1
2244:  BRA    2242
2246:  BCF    FA6.2
2248:  MOVF   00,W
224A:  IORWF  FF2,F
224C:  MOVLW  14
224E:  MOVLB  0
2250:  MOVWF  xC6
2252:  CALL   06E2
....................              reset_cpu(); 
2256:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
2258:  MOVF   39,W
225A:  SUBWF  35,W
225C:  BNZ   22FC
225E:  MOVF   3A,W
2260:  SUBWF  36,W
2262:  BNZ   22FC
2264:  MOVF   3B,W
2266:  SUBWF  37,W
2268:  BNZ   22FC
226A:  MOVF   3C,W
226C:  SUBWF  38,W
226E:  BNZ   22FC
....................             lcd_gotoxy(1,1); 
2270:  MOVLW  01
2272:  MOVWF  xC1
2274:  MOVWF  xC2
2276:  CALL   07FA
....................             printf(lcd_putc,"                   "); 
227A:  MOVLW  3C
227C:  MOVWF  FF6
227E:  MOVLW  02
2280:  MOVWF  FF7
2282:  CALL   08BA
....................             lcd_gotoxy(1,2); 
2286:  MOVLW  01
2288:  MOVWF  xC1
228A:  MOVLW  02
228C:  MOVWF  xC2
228E:  CALL   07FA
....................             printf(lcd_putc,"     Contraseña    "); 
2292:  MOVLW  50
2294:  MOVWF  FF6
2296:  MOVLW  02
2298:  MOVWF  FF7
229A:  CALL   08BA
....................             lcd_gotoxy(1,3); 
229E:  MOVLW  01
22A0:  MOVWF  xC1
22A2:  MOVLW  03
22A4:  MOVWF  xC2
22A6:  CALL   07FA
....................             printf(lcd_putc,"      Correcta     "); 
22AA:  MOVLW  64
22AC:  MOVWF  FF6
22AE:  MOVLW  02
22B0:  MOVWF  FF7
22B2:  CALL   08BA
....................             lcd_gotoxy(1,4); 
22B6:  MOVLW  01
22B8:  MOVWF  xC1
22BA:  MOVLW  04
22BC:  MOVWF  xC2
22BE:  CALL   07FA
....................             printf(lcd_putc,"                   "); 
22C2:  MOVLW  78
22C4:  MOVWF  FF6
22C6:  MOVLW  02
22C8:  MOVWF  FF7
22CA:  CALL   08BA
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
22CE:  MOVLW  04
22D0:  MOVWF  xAF
22D2:  MOVLW  FA
22D4:  MOVWF  xC6
22D6:  CALL   06E2
22DA:  DECFSZ xAF,F
22DC:  BRA    22D2
22DE:  MOVLW  32
22E0:  MOVWF  18
22E2:  MOVLW  0B
22E4:  MOVWF  1B
22E6:  MOVLW  0C
22E8:  MOVWF  xC0
22EA:  CALL   085C
22EE:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
22F0:  CLRF   35
22F2:  CLRF   36
22F4:  CLRF   37
22F6:  CLRF   38
22F8:  BSF    17.5
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
22FA:  BRA    2376
....................             lcd_gotoxy(1,1); 
22FC:  MOVLW  01
22FE:  MOVWF  xC1
2300:  MOVWF  xC2
2302:  CALL   07FA
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
2306:  MOVLW  01
2308:  MOVWF  xC1
230A:  MOVLW  02
230C:  MOVWF  xC2
230E:  CALL   07FA
....................             printf(lcd_putc,"     Contraseña    "); 
2312:  MOVLW  8C
2314:  MOVWF  FF6
2316:  MOVLW  02
2318:  MOVWF  FF7
231A:  CALL   08BA
....................             lcd_gotoxy(1,3); 
231E:  MOVLW  01
2320:  MOVWF  xC1
2322:  MOVLW  03
2324:  MOVWF  xC2
2326:  CALL   07FA
....................             printf(lcd_putc,"     Incorrecta    "); 
232A:  MOVLW  A0
232C:  MOVWF  FF6
232E:  MOVLW  02
2330:  MOVWF  FF7
2332:  CALL   08BA
....................             lcd_gotoxy(1,4); 
2336:  MOVLW  01
2338:  MOVWF  xC1
233A:  MOVLW  04
233C:  MOVWF  xC2
233E:  CALL   07FA
....................             printf(lcd_putc,"                   "); 
2342:  MOVLW  B4
2344:  MOVWF  FF6
2346:  MOVLW  02
2348:  MOVWF  FF7
234A:  CALL   08BA
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
234E:  MOVLW  04
2350:  MOVWF  xAF
2352:  MOVLW  FA
2354:  MOVWF  xC6
2356:  CALL   06E2
235A:  DECFSZ xAF,F
235C:  BRA    2352
235E:  MOVLW  0B
2360:  MOVWF  1B
2362:  MOVLW  0C
2364:  MOVWF  xC0
2366:  CALL   085C
236A:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
236C:  CLRF   35
236E:  CLRF   36
2370:  CLRF   37
2372:  CLRF   38
2374:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2376:  DECFSZ 18,W
2378:  BRA    25B0
....................       EliminaRuido(); 
237A:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
237E:  MOVLW  01
2380:  MOVWF  xC1
2382:  MOVWF  xC2
2384:  CALL   07FA
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
2388:  MOVLW  C8
238A:  MOVWF  FF6
238C:  MOVLW  02
238E:  MOVWF  FF7
2390:  CALL   08BA
....................          mensajes(1+paso,2); 
2394:  MOVLW  01
2396:  ADDWF  31,W
2398:  MOVWF  xAF
239A:  MOVWF  xB0
239C:  MOVLW  02
239E:  MOVWF  xB1
23A0:  CALL   0FAE
....................          mensajes(2+paso,3); 
23A4:  MOVLW  02
23A6:  ADDWF  31,W
23A8:  MOVWF  xAF
23AA:  MOVWF  xB0
23AC:  MOVLW  03
23AE:  MOVWF  xB1
23B0:  CALL   0FAE
....................          mensajes(3+paso,4); 
23B4:  MOVLW  03
23B6:  ADDWF  31,W
23B8:  MOVWF  xAF
23BA:  MOVWF  xB0
23BC:  MOVLW  04
23BE:  MOVWF  xB1
23C0:  CALL   0FAE
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
23C4:  MOVLW  01
23C6:  MOVWF  xC1
23C8:  MOVFF  1C,C2
23CC:  CALL   07FA
....................         lcd_putc(t[0]); 
23D0:  MOVFF  32,C0
23D4:  CALL   085C
....................  
....................         if(Flecha==2) 
23D8:  MOVF   1C,W
23DA:  SUBLW  02
23DC:  BNZ   2406
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
23DE:  MOVLW  01
23E0:  MOVWF  xC1
23E2:  MOVLW  04
23E4:  MOVWF  xC2
23E6:  CALL   07FA
....................             lcd_putc(t[1]); 
23EA:  MOVFF  33,C0
23EE:  CALL   085C
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
23F2:  MOVLW  01
23F4:  MOVWF  xC1
23F6:  MOVLW  03
23F8:  MOVWF  xC2
23FA:  CALL   07FA
....................             lcd_putc(t[1]); 
23FE:  MOVFF  33,C0
2402:  CALL   085C
....................           } 
....................          
....................         if(Flecha==4) 
2406:  MOVF   1C,W
2408:  SUBLW  04
240A:  BNZ   2434
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
240C:  MOVLW  01
240E:  MOVWF  xC1
2410:  MOVLW  02
2412:  MOVWF  xC2
2414:  CALL   07FA
....................             lcd_putc(t[1]); 
2418:  MOVFF  33,C0
241C:  CALL   085C
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2420:  MOVLW  01
2422:  MOVWF  xC1
2424:  MOVLW  03
2426:  MOVWF  xC2
2428:  CALL   07FA
....................             lcd_putc(t[1]); 
242C:  MOVFF  33,C0
2430:  CALL   085C
....................           } 
....................          
....................         if(Flecha==3) 
2434:  MOVF   1C,W
2436:  SUBLW  03
2438:  BNZ   2462
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
243A:  MOVLW  01
243C:  MOVWF  xC1
243E:  MOVLW  04
2440:  MOVWF  xC2
2442:  CALL   07FA
....................             lcd_putc(t[1]); 
2446:  MOVFF  33,C0
244A:  CALL   085C
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
244E:  MOVLW  01
2450:  MOVWF  xC1
2452:  MOVLW  02
2454:  MOVWF  xC2
2456:  CALL   07FA
....................             lcd_putc(t[1]); 
245A:  MOVFF  33,C0
245E:  CALL   085C
....................           } 
....................          Cambio=OFF; 
2462:  BCF    17.5
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
2464:  BSF    F92.5
2466:  BTFSS  F80.5
2468:  BRA    2494
....................          delay_ms(20); 
246A:  MOVLW  14
246C:  MOVWF  xC6
246E:  CALL   06E2
....................          if(UP){ 
2472:  BSF    F92.5
2474:  BTFSS  F80.5
2476:  BRA    2492
....................             if(Flanco == 0){ 
2478:  BTFSC  16.3
247A:  BRA    2492
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
247C:  DECF   1E,F
247E:  DECF   1C,F
2480:  MOVLW  01
2482:  ADDWF  1C,W
2484:  MOVWF  1D
2486:  BSF    16.3
2488:  MOVLW  1E
248A:  MOVWF  xC6
248C:  CALL   06E2
2490:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2492:  BRA    2496
....................          Flanco = 0; 
2494:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2496:  BSF    F96.0
2498:  BTFSS  F84.0
249A:  BRA    24C6
....................          delay_ms(20); 
249C:  MOVLW  14
249E:  MOVWF  xC6
24A0:  CALL   06E2
....................          if(DOWN){ 
24A4:  BSF    F96.0
24A6:  BTFSS  F84.0
24A8:  BRA    24C4
....................             if(Flanco2 == 0){ 
24AA:  BTFSC  16.5
24AC:  BRA    24C4
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
24AE:  INCF   1E,F
24B0:  INCF   1C,F
24B2:  MOVLW  01
24B4:  SUBWF  1C,W
24B6:  MOVWF  1D
24B8:  BSF    16.5
24BA:  MOVLW  1E
24BC:  MOVWF  xC6
24BE:  CALL   06E2
24C2:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
24C4:  BRA    24C8
....................          Flanco2 = 0; 
24C6:  BCF    16.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
24C8:  MOVF   1E,W
24CA:  SUBWF  20,W
24CC:  BC    24DE
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
24CE:  INCF   31,F
24D0:  MOVFF  1E,20
24D4:  MOVLW  02
24D6:  SUBWF  20,W
24D8:  MOVWF  1F
24DA:  MOVLW  04
24DC:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
24DE:  MOVF   1F,W
24E0:  SUBWF  1E,W
24E2:  BC    24F4
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
24E4:  DECF   31,F
24E6:  MOVFF  1E,1F
24EA:  MOVLW  02
24EC:  ADDWF  1F,W
24EE:  MOVWF  20
24F0:  MOVLW  02
24F2:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
24F4:  MOVF   1E,W
24F6:  SUBWF  19,W
24F8:  BC    250C
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
24FA:  MOVFF  1A,1E
24FE:  MOVLW  02
2500:  MOVWF  1C
2502:  CLRF   31
2504:  MOVFF  1E,1F
2508:  ADDWF  1F,W
250A:  MOVWF  20
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
250C:  MOVF   1A,W
250E:  SUBWF  1E,W
2510:  BC    2528
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
2512:  MOVFF  19,1E
2516:  MOVLW  04
2518:  MOVWF  1C
251A:  SUBWF  19,W
251C:  MOVWF  31
251E:  MOVFF  1E,20
2522:  MOVLW  02
2524:  SUBWF  20,W
2526:  MOVWF  1F
....................       } 
....................          
....................       if(paso<0) 
2528:  BTFSC  31.7
252A:  BRA    252E
252C:  BRA    2530
....................          paso=0; 
252E:  CLRF   31
....................           
....................       if(RIGHT){// Si oprime derecha 
2530:  BSF    F96.1
2532:  BTFSS  F84.1
2534:  BRA    257C
....................          delay_ms(20); 
2536:  MOVLW  14
2538:  MOVWF  xC6
253A:  CALL   06E2
....................          if(RIGHT){ 
253E:  BSF    F96.1
2540:  BTFSS  F84.1
2542:  BRA    2578
....................             if(Flanco1 == 0){ 
2544:  BTFSC  16.4
2546:  BRA    2578
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
2548:  BSF    16.4
254A:  MOVFF  1E,18
254E:  MOVLW  03
2550:  MOVWF  1C
2552:  MOVLW  02
2554:  MOVWF  xAF
2556:  MOVLW  96
2558:  MOVWF  xC6
255A:  CALL   06E2
255E:  DECFSZ xAF,F
2560:  BRA    2556
2562:  MOVLW  0C
2564:  MOVWF  xC0
2566:  CALL   085C
....................                if(Menu==6){ 
256A:  MOVF   18,W
256C:  SUBLW  06
256E:  BNZ   2578
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2570:  CLRF   35
2572:  CLRF   36
2574:  CLRF   37
2576:  CLRF   38
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
2578:  BSF    17.5
....................       }else{ 
257A:  BRA    257E
....................         Flanco1 = 0; 
257C:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){ 
257E:  BSF    F96.2
2580:  BTFSS  F84.2
2582:  BRA    25B0
....................          delay_ms(20); 
2584:  MOVLW  14
2586:  MOVWF  xC6
2588:  CALL   06E2
....................          if(IZQU){ 
258C:  BSF    F96.2
258E:  BTFSS  F84.2
2590:  BRA    25B0
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
2592:  MOVLW  02
2594:  MOVWF  xAF
2596:  MOVLW  FA
2598:  MOVWF  xC6
259A:  CALL   06E2
259E:  DECFSZ xAF,F
25A0:  BRA    2596
25A2:  MOVLW  32
25A4:  MOVWF  18
25A6:  MOVLW  0C
25A8:  MOVWF  xC0
25AA:  CALL   085C
25AE:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
25B0:  MOVF   18,W
25B2:  SUBLW  02
25B4:  BTFSS  FD8.2
25B6:  BRA    280C
....................    EliminaRuido(); 
25B8:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
25BC:  MOVLW  01
25BE:  MOVWF  xC1
25C0:  MOVWF  xC2
25C2:  CALL   07FA
....................       printf(lcd_putc,"    Temporizador     "); 
25C6:  MOVLW  DE
25C8:  MOVWF  FF6
25CA:  MOVLW  02
25CC:  MOVWF  FF7
25CE:  CALL   08BA
....................       lcd_gotoxy(1,2); 
25D2:  MOVLW  01
25D4:  MOVWF  xC1
25D6:  MOVLW  02
25D8:  MOVWF  xC2
25DA:  CALL   07FA
....................       printf(lcd_putc,"       Luz UV        "); 
25DE:  MOVLW  F4
25E0:  MOVWF  FF6
25E2:  MOVLW  02
25E4:  MOVWF  FF7
25E6:  CALL   08BA
....................       lcd_gotoxy(6,3); 
25EA:  MOVLW  06
25EC:  MOVWF  xC1
25EE:  MOVLW  03
25F0:  MOVWF  xC2
25F2:  CALL   07FA
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
25F6:  MOVFF  29,AF
25FA:  MOVLW  03
25FC:  MOVWF  xB0
25FE:  CALL   1052
2602:  MOVLW  3A
2604:  MOVWF  xC0
2606:  CALL   085C
260A:  MOVFF  2A,AF
260E:  MOVLW  01
2610:  MOVWF  xB0
2612:  CALL   1052
2616:  MOVLW  13
2618:  MOVWF  FF6
261A:  MOVLW  03
261C:  MOVWF  FF7
261E:  MOVLW  08
2620:  MOVWF  xB3
2622:  CALL   0EA0
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2626:  MOVLW  06
2628:  ADDWF  2E,W
262A:  MOVWF  xAF
262C:  MOVWF  xC1
262E:  MOVLW  04
2630:  MOVWF  xC2
2632:  CALL   07FA
....................       lcd_putc(t[2]); 
2636:  MOVFF  34,C0
263A:  CALL   085C
....................        
....................       Cambio=OFF; 
263E:  BCF    17.5
.................... //   } 
....................     
....................    if(UP) 
2640:  BSF    F92.5
2642:  BTFSS  F80.5
2644:  BRA    2692
....................    { 
....................       delay_ms(20); 
2646:  MOVLW  14
2648:  MOVWF  xC6
264A:  CALL   06E2
....................       if(UP){ 
264E:  BSF    F92.5
2650:  BTFSS  F80.5
2652:  BRA    2692
....................          if(unidad2==1) 
2654:  DECFSZ 2E,W
2656:  BRA    2672
....................          { 
....................             if(tempo_minutos_pro<240) 
2658:  MOVF   29,W
265A:  SUBLW  EF
265C:  BNC   2672
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
265E:  MOVLW  05
2660:  ADDWF  29,F
2662:  MOVLW  02
2664:  MOVWF  xAF
2666:  MOVLW  96
2668:  MOVWF  xC6
266A:  CALL   06E2
266E:  DECFSZ xAF,F
2670:  BRA    2666
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
2672:  MOVF   2E,W
2674:  SUBLW  04
2676:  BNZ   2690
....................          { 
....................             if(tempo_segundos_pro<59) 
2678:  MOVF   2A,W
267A:  SUBLW  3A
267C:  BNC   2690
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
267E:  INCF   2A,F
2680:  MOVLW  02
2682:  MOVWF  xAF
2684:  MOVLW  96
2686:  MOVWF  xC6
2688:  CALL   06E2
268C:  DECFSZ xAF,F
268E:  BRA    2684
....................             } 
....................          }      
....................       Cambio=ON; 
2690:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN) 
2692:  BSF    F96.0
2694:  BTFSS  F84.0
2696:  BRA    26E0
....................    { 
....................       delay_ms(20); 
2698:  MOVLW  14
269A:  MOVWF  xC6
269C:  CALL   06E2
....................       if(DOWN){ 
26A0:  BSF    F96.0
26A2:  BTFSS  F84.0
26A4:  BRA    26E0
....................          if(unidad2==1) 
26A6:  DECFSZ 2E,W
26A8:  BRA    26C2
....................          { 
....................             if(tempo_minutos_pro>0) 
26AA:  MOVF   29,F
26AC:  BZ    26C2
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
26AE:  MOVLW  05
26B0:  SUBWF  29,F
26B2:  MOVLW  02
26B4:  MOVWF  xAF
26B6:  MOVLW  96
26B8:  MOVWF  xC6
26BA:  CALL   06E2
26BE:  DECFSZ xAF,F
26C0:  BRA    26B6
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
26C2:  MOVF   2E,W
26C4:  SUBLW  04
26C6:  BNZ   26DE
....................          { 
....................             if(tempo_segundos_pro>0) 
26C8:  MOVF   2A,F
26CA:  BZ    26DE
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
26CC:  DECF   2A,F
26CE:  MOVLW  02
26D0:  MOVWF  xAF
26D2:  MOVLW  96
26D4:  MOVWF  xC6
26D6:  CALL   06E2
26DA:  DECFSZ xAF,F
26DC:  BRA    26D2
....................             }    
....................          } 
....................       Cambio=ON; 
26DE:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
26E0:  BSF    F96.1
26E2:  BTFSS  F84.1
26E4:  BRA    2722
....................    { 
....................       delay_ms(20); 
26E6:  MOVLW  14
26E8:  MOVWF  xC6
26EA:  CALL   06E2
....................       if(RIGHT){ 
26EE:  BSF    F96.1
26F0:  BTFSS  F84.1
26F2:  BRA    2722
....................          if(unidad2==1) 
26F4:  DECFSZ 2E,W
26F6:  BRA    26FE
....................          { 
....................             unidad2=4; 
26F8:  MOVLW  04
26FA:  MOVWF  2E
....................          } 
....................          else 
26FC:  BRA    2708
....................          { 
....................             if(unidad2==4) 
26FE:  MOVF   2E,W
2700:  SUBLW  04
2702:  BNZ   2708
....................             { 
....................                unidad2=1; 
2704:  MOVLW  01
2706:  MOVWF  2E
....................             } 
....................          } 
....................       delay_ms(500); 
2708:  MOVLW  02
270A:  MOVWF  xAF
270C:  MOVLW  FA
270E:  MOVWF  xC6
2710:  CALL   06E2
2714:  DECFSZ xAF,F
2716:  BRA    270C
....................       printf(lcd_putc,"\f"); 
2718:  MOVLW  0C
271A:  MOVWF  xC0
271C:  CALL   085C
....................       Cambio=ON; 
2720:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(IZQU) 
2722:  BSF    F96.2
2724:  BTFSS  F84.2
2726:  BRA    280C
....................    { 
....................       if(IZQU){ 
2728:  BSF    F96.2
272A:  BTFSS  F84.2
272C:  BRA    280C
....................          delay_ms(200); 
272E:  MOVLW  C8
2730:  MOVWF  xC6
2732:  CALL   06E2
....................          printf(lcd_putc,"\f"); 
2736:  MOVLW  0C
2738:  MOVWF  xC0
273A:  CALL   085C
....................          lcd_gotoxy(1,2); 
273E:  MOVLW  01
2740:  MOVWF  xC1
2742:  MOVLW  02
2744:  MOVWF  xC2
2746:  CALL   07FA
....................          printf(lcd_putc,"Tiempo Almacenado"); 
274A:  MOVLW  1C
274C:  MOVWF  FF6
274E:  MOVLW  03
2750:  MOVWF  FF7
2752:  CALL   08BA
....................          lcd_gotoxy(1,3); 
2756:  MOVLW  01
2758:  MOVWF  xC1
275A:  MOVLW  03
275C:  MOVWF  xC2
275E:  CALL   07FA
....................          printf(lcd_putc,"  Correctamente  "); 
2762:  MOVLW  2E
2764:  MOVWF  FF6
2766:  MOVLW  03
2768:  MOVWF  FF7
276A:  CALL   08BA
....................          write_eeprom(5,tempo_minutos_pro); 
276E:  MOVLW  05
2770:  MOVWF  FA9
2772:  MOVFF  29,FA8
2776:  BCF    FA6.6
2778:  BCF    FA6.7
277A:  BSF    FA6.2
277C:  MOVF   FF2,W
277E:  MOVWF  00
2780:  BCF    FF2.7
2782:  MOVLB  F
2784:  MOVLW  55
2786:  MOVWF  FA7
2788:  MOVLW  AA
278A:  MOVWF  FA7
278C:  BSF    FA6.1
278E:  BTFSC  FA6.1
2790:  BRA    278E
2792:  BCF    FA6.2
2794:  MOVF   00,W
2796:  IORWF  FF2,F
....................          delay_ms(20); 
2798:  MOVLW  14
279A:  MOVLB  0
279C:  MOVWF  xC6
279E:  CALL   06E2
....................          write_eeprom(6,tempo_segundos_pro); 
27A2:  MOVLW  06
27A4:  MOVWF  FA9
27A6:  MOVFF  2A,FA8
27AA:  BCF    FA6.6
27AC:  BCF    FA6.7
27AE:  BSF    FA6.2
27B0:  MOVF   FF2,W
27B2:  MOVWF  00
27B4:  BCF    FF2.7
27B6:  MOVLB  F
27B8:  MOVLW  55
27BA:  MOVWF  FA7
27BC:  MOVLW  AA
27BE:  MOVWF  FA7
27C0:  BSF    FA6.1
27C2:  BTFSC  FA6.1
27C4:  BRA    27C2
27C6:  BCF    FA6.2
27C8:  MOVF   00,W
27CA:  IORWF  FF2,F
....................          delay_ms(20); 
27CC:  MOVLW  14
27CE:  MOVLB  0
27D0:  MOVWF  xC6
27D2:  CALL   06E2
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
27D6:  MOVFF  29,27
27DA:  MOVFF  2A,28
....................          delay_ms(700); 
27DE:  MOVLW  04
27E0:  MOVWF  xAF
27E2:  MOVLW  AF
27E4:  MOVWF  xC6
27E6:  CALL   06E2
27EA:  DECFSZ xAF,F
27EC:  BRA    27E2
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
27EE:  MOVLW  1E
27F0:  MOVWF  xC6
27F2:  CALL   06E2
27F6:  MOVLW  01
27F8:  MOVWF  18
27FA:  CLRF   31
27FC:  MOVLW  02
27FE:  MOVWF  1C
2800:  MOVWF  1E
2802:  MOVLW  0C
2804:  MOVWF  xC0
2806:  CALL   085C
....................          Cambio=ON; 
280A:  BSF    17.5
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
280C:  MOVF   18,W
280E:  SUBLW  03
2810:  BTFSS  FD8.2
2812:  BRA    2B5E
....................       EliminaRuido(); 
2814:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2818:  MOVLW  01
281A:  MOVWF  xC1
281C:  MOVWF  xC2
281E:  CALL   07FA
....................          printf(lcd_putc,"     Ingrese        "); 
2822:  MOVLW  40
2824:  MOVWF  FF6
2826:  MOVLW  03
2828:  MOVWF  FF7
282A:  CALL   08BA
....................          lcd_gotoxy(1,2); 
282E:  MOVLW  01
2830:  MOVWF  xC1
2832:  MOVLW  02
2834:  MOVWF  xC2
2836:  CALL   07FA
....................          printf(lcd_putc,"    Contraseña      "); 
283A:  MOVLW  56
283C:  MOVWF  FF6
283E:  MOVLW  03
2840:  MOVWF  FF7
2842:  CALL   08BA
....................          lcd_gotoxy(1,3); 
2846:  MOVLW  01
2848:  MOVWF  xC1
284A:  MOVLW  03
284C:  MOVWF  xC2
284E:  CALL   07FA
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2852:  MOVLW  6C
2854:  MOVWF  FF6
2856:  MOVLW  03
2858:  MOVWF  FF7
285A:  MOVLW  0A
285C:  MOVWF  xB3
285E:  CALL   0EA0
2862:  MOVFF  35,AF
2866:  MOVLW  1F
2868:  MOVWF  xB0
286A:  CALL   0EE6
286E:  MOVFF  36,AF
2872:  MOVLW  1F
2874:  MOVWF  xB0
2876:  CALL   0EE6
287A:  MOVFF  37,AF
287E:  MOVLW  1F
2880:  MOVWF  xB0
2882:  CALL   0EE6
2886:  MOVFF  38,AF
288A:  MOVLW  1F
288C:  MOVWF  xB0
288E:  CALL   0EE6
2892:  MOVLW  20
2894:  MOVWF  xC0
2896:  CALL   085C
289A:  MOVLW  20
289C:  MOVWF  xC0
289E:  CALL   085C
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
28A2:  MOVFF  1B,C1
28A6:  MOVLW  04
28A8:  MOVWF  xC2
28AA:  CALL   07FA
....................          lcd_putc(t[2]); 
28AE:  MOVFF  34,C0
28B2:  CALL   085C
....................           
....................          if(unidad>11&&unidad<14){ 
28B6:  MOVF   1B,W
28B8:  SUBLW  0B
28BA:  BC    28DA
28BC:  MOVF   1B,W
28BE:  SUBLW  0D
28C0:  BNC   28DA
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
28C2:  MOVLW  01
28C4:  SUBWF  1B,W
28C6:  MOVWF  xAF
28C8:  MOVWF  xC1
28CA:  MOVLW  04
28CC:  MOVWF  xC2
28CE:  CALL   07FA
....................             lcd_putc(t[1]); 
28D2:  MOVFF  33,C0
28D6:  CALL   085C
....................          } 
....................           
....................          Cambio=OFF; 
28DA:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
28DC:  BSF    F92.5
28DE:  BTFSS  F80.5
28E0:  BRA    2914
....................          delay_ms(20); 
28E2:  MOVLW  14
28E4:  MOVWF  xC6
28E6:  CALL   06E2
....................          if(UP){ 
28EA:  BSF    F92.5
28EC:  BTFSS  F80.5
28EE:  BRA    2912
....................             if(Flanco == 0) { 
28F0:  BTFSC  16.3
28F2:  BRA    2912
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
28F4:  MOVLW  0B
28F6:  SUBWF  1B,W
28F8:  CLRF   03
28FA:  ADDLW  35
28FC:  MOVWF  FE9
28FE:  MOVLW  00
2900:  ADDWFC 03,W
2902:  MOVWF  FEA
2904:  INCF   FEF,F
2906:  BSF    16.3
2908:  MOVLW  1E
290A:  MOVWF  xC6
290C:  CALL   06E2
2910:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2912:  BRA    2916
....................          Flanco = 0; 
2914:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2916:  BSF    F96.0
2918:  BTFSS  F84.0
291A:  BRA    294E
....................          delay_ms(20); 
291C:  MOVLW  14
291E:  MOVWF  xC6
2920:  CALL   06E2
....................          if(DOWN){ 
2924:  BSF    F96.0
2926:  BTFSS  F84.0
2928:  BRA    294C
....................             if(Flanco2 == 0) { 
292A:  BTFSC  16.5
292C:  BRA    294C
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
292E:  MOVLW  0B
2930:  SUBWF  1B,W
2932:  CLRF   03
2934:  ADDLW  35
2936:  MOVWF  FE9
2938:  MOVLW  00
293A:  ADDWFC 03,W
293C:  MOVWF  FEA
293E:  DECF   FEF,F
2940:  BSF    16.5
2942:  MOVLW  1E
2944:  MOVWF  xC6
2946:  CALL   06E2
294A:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
294C:  BRA    2950
....................          Flanco2 = 0; 
294E:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2950:  BSF    F96.1
2952:  BTFSS  F84.1
2954:  BRA    2980
....................          delay_ms(20); 
2956:  MOVLW  14
2958:  MOVWF  xC6
295A:  CALL   06E2
....................          if(RIGHT){ 
295E:  BSF    F96.1
2960:  BTFSS  F84.1
2962:  BRA    297E
....................             if(Flanco1 == 0) { 
2964:  BTFSC  16.4
2966:  BRA    297E
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2968:  BSF    16.4
296A:  INCF   1B,F
296C:  MOVLW  1E
296E:  MOVWF  xC6
2970:  CALL   06E2
2974:  MOVLW  0C
2976:  MOVWF  xC0
2978:  CALL   085C
297C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
297E:  BRA    2982
....................          Flanco1 = 0; 
2980:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2982:  BSF    F96.2
2984:  BTFSS  F84.2
2986:  BRA    29B2
....................          delay_ms(150); 
2988:  MOVLW  96
298A:  MOVWF  xC6
298C:  CALL   06E2
....................          if(IZQU){ 
2990:  BSF    F96.2
2992:  BTFSS  F84.2
2994:  BRA    29B0
....................             if(Flanco3 == 0){ 
2996:  BTFSC  16.6
2998:  BRA    29B0
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
299A:  BSF    16.6
299C:  DECF   1B,F
299E:  MOVLW  1E
29A0:  MOVWF  xC6
29A2:  CALL   06E2
29A6:  MOVLW  0C
29A8:  MOVWF  xC0
29AA:  CALL   085C
29AE:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
29B0:  BRA    29B4
....................         Flanco3 = 0; 
29B2:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
29B4:  MOVLW  0B
29B6:  SUBWF  1B,W
29B8:  CLRF   03
29BA:  ADDLW  35
29BC:  MOVWF  FE9
29BE:  MOVLW  00
29C0:  ADDWFC 03,W
29C2:  MOVWF  FEA
29C4:  BTFSC  FEF.7
29C6:  BRA    29CA
29C8:  BRA    29DE
....................          clave[unidad-11]=9; 
29CA:  MOVLW  0B
29CC:  SUBWF  1B,W
29CE:  CLRF   03
29D0:  ADDLW  35
29D2:  MOVWF  FE9
29D4:  MOVLW  00
29D6:  ADDWFC 03,W
29D8:  MOVWF  FEA
29DA:  MOVLW  09
29DC:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
29DE:  MOVLW  0B
29E0:  SUBWF  1B,W
29E2:  CLRF   03
29E4:  ADDLW  35
29E6:  MOVWF  FE9
29E8:  MOVLW  00
29EA:  ADDWFC 03,W
29EC:  MOVWF  FEA
29EE:  BTFSC  FEF.7
29F0:  BRA    2A0A
29F2:  MOVF   FEF,W
29F4:  SUBLW  09
29F6:  BC    2A0A
....................          clave[unidad-11]=0; 
29F8:  MOVLW  0B
29FA:  SUBWF  1B,W
29FC:  CLRF   03
29FE:  ADDLW  35
2A00:  MOVWF  FE9
2A02:  MOVLW  00
2A04:  ADDWFC 03,W
2A06:  MOVWF  FEA
2A08:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2A0A:  MOVF   1B,W
2A0C:  SUBLW  0A
2A0E:  BNC   2A30
....................          unidad=11; 
2A10:  MOVLW  0B
2A12:  MOVWF  1B
....................          Menu=1; 
2A14:  MOVLW  01
2A16:  MOVWF  18
....................          paso=0; 
2A18:  CLRF   31
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2A1A:  CLRF   35
2A1C:  CLRF   36
2A1E:  CLRF   37
2A20:  CLRF   38
2A22:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
2A24:  MOVLW  0B
2A26:  MOVWF  1B
2A28:  MOVLW  0C
2A2A:  MOVWF  xC0
2A2C:  CALL   085C
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2A30:  MOVF   1B,W
2A32:  SUBLW  0E
2A34:  BTFSC  FD8.0
2A36:  BRA    2B5E
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
2A38:  MOVF   39,W
2A3A:  SUBWF  35,W
2A3C:  BNZ   2ADA
2A3E:  MOVF   3A,W
2A40:  SUBWF  36,W
2A42:  BNZ   2ADA
2A44:  MOVF   3B,W
2A46:  SUBWF  37,W
2A48:  BNZ   2ADA
2A4A:  MOVF   3C,W
2A4C:  SUBWF  38,W
2A4E:  BNZ   2ADA
....................             lcd_gotoxy(1,1); 
2A50:  MOVLW  01
2A52:  MOVWF  xC1
2A54:  MOVWF  xC2
2A56:  CALL   07FA
....................             printf(lcd_putc,"                    "); 
2A5A:  MOVLW  82
2A5C:  MOVWF  FF6
2A5E:  MOVLW  03
2A60:  MOVWF  FF7
2A62:  CALL   08BA
....................             lcd_gotoxy(1,2); 
2A66:  MOVLW  01
2A68:  MOVWF  xC1
2A6A:  MOVLW  02
2A6C:  MOVWF  xC2
2A6E:  CALL   07FA
....................             printf(lcd_putc,"     Contraseña     "); 
2A72:  MOVLW  98
2A74:  MOVWF  FF6
2A76:  MOVLW  03
2A78:  MOVWF  FF7
2A7A:  CALL   08BA
....................             lcd_gotoxy(1,3); 
2A7E:  MOVLW  01
2A80:  MOVWF  xC1
2A82:  MOVLW  03
2A84:  MOVWF  xC2
2A86:  CALL   07FA
....................             printf(lcd_putc,"      Correcta      "); 
2A8A:  MOVLW  AE
2A8C:  MOVWF  FF6
2A8E:  MOVLW  03
2A90:  MOVWF  FF7
2A92:  CALL   08BA
....................             lcd_gotoxy(1,4); 
2A96:  MOVLW  01
2A98:  MOVWF  xC1
2A9A:  MOVLW  04
2A9C:  MOVWF  xC2
2A9E:  CALL   07FA
....................             printf(lcd_putc,"                    "); 
2AA2:  MOVLW  C4
2AA4:  MOVWF  FF6
2AA6:  MOVLW  03
2AA8:  MOVWF  FF7
2AAA:  CALL   08BA
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
2AAE:  MOVLW  02
2AB0:  MOVWF  xAF
2AB2:  MOVLW  FA
2AB4:  MOVWF  xC6
2AB6:  CALL   06E2
2ABA:  DECFSZ xAF,F
2ABC:  BRA    2AB2
2ABE:  MOVLW  3D
2AC0:  MOVWF  18
2AC2:  MOVLW  0B
2AC4:  MOVWF  1B
2AC6:  MOVLW  0C
2AC8:  MOVWF  xC0
2ACA:  CALL   085C
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2ACE:  CLRF   35
2AD0:  CLRF   36
2AD2:  CLRF   37
2AD4:  CLRF   38
2AD6:  BSF    17.5
....................          }else{ 
2AD8:  BRA    2B5E
....................             lcd_gotoxy(1,1); 
2ADA:  MOVLW  01
2ADC:  MOVWF  xC1
2ADE:  MOVWF  xC2
2AE0:  CALL   07FA
....................             printf(lcd_putc,"                    "); 
2AE4:  MOVLW  DA
2AE6:  MOVWF  FF6
2AE8:  MOVLW  03
2AEA:  MOVWF  FF7
2AEC:  CALL   08BA
....................             lcd_gotoxy(1,2); 
2AF0:  MOVLW  01
2AF2:  MOVWF  xC1
2AF4:  MOVLW  02
2AF6:  MOVWF  xC2
2AF8:  CALL   07FA
....................             printf(lcd_putc,"     Contraseña     "); 
2AFC:  MOVLW  F0
2AFE:  MOVWF  FF6
2B00:  MOVLW  03
2B02:  MOVWF  FF7
2B04:  CALL   08BA
....................             lcd_gotoxy(1,3); 
2B08:  MOVLW  01
2B0A:  MOVWF  xC1
2B0C:  MOVLW  03
2B0E:  MOVWF  xC2
2B10:  CALL   07FA
....................             printf(lcd_putc,"     Incorrecta     "); 
2B14:  MOVLW  06
2B16:  MOVWF  FF6
2B18:  MOVLW  04
2B1A:  MOVWF  FF7
2B1C:  CALL   08BA
....................             lcd_gotoxy(1,4); 
2B20:  MOVLW  01
2B22:  MOVWF  xC1
2B24:  MOVLW  04
2B26:  MOVWF  xC2
2B28:  CALL   07FA
....................             printf(lcd_putc,"                    "); 
2B2C:  MOVLW  1C
2B2E:  MOVWF  FF6
2B30:  MOVLW  04
2B32:  MOVWF  FF7
2B34:  CALL   08BA
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2B38:  MOVLW  02
2B3A:  MOVWF  xAF
2B3C:  MOVLW  FA
2B3E:  MOVWF  xC6
2B40:  CALL   06E2
2B44:  DECFSZ xAF,F
2B46:  BRA    2B3C
2B48:  MOVLW  0B
2B4A:  MOVWF  1B
2B4C:  MOVLW  0C
2B4E:  MOVWF  xC0
2B50:  CALL   085C
2B54:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2B56:  CLRF   35
2B58:  CLRF   36
2B5A:  CLRF   37
2B5C:  CLRF   38
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2B5E:  MOVF   18,W
2B60:  SUBLW  3D
2B62:  BTFSS  FD8.2
2B64:  BRA    2EEE
....................       EliminaRuido(); 
2B66:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2B6A:  MOVLW  01
2B6C:  MOVWF  xC1
2B6E:  MOVWF  xC2
2B70:  CALL   07FA
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
2B74:  MOVLW  32
2B76:  MOVWF  FF6
2B78:  MOVLW  04
2B7A:  MOVWF  FF7
2B7C:  CALL   08BA
....................          lcd_gotoxy(1,2); 
2B80:  MOVLW  01
2B82:  MOVWF  xC1
2B84:  MOVLW  02
2B86:  MOVWF  xC2
2B88:  CALL   07FA
....................          printf(lcd_putc,"     Contraseña     "); 
2B8C:  MOVLW  48
2B8E:  MOVWF  FF6
2B90:  MOVLW  04
2B92:  MOVWF  FF7
2B94:  CALL   08BA
....................          lcd_gotoxy(1,3); 
2B98:  MOVLW  01
2B9A:  MOVWF  xC1
2B9C:  MOVLW  03
2B9E:  MOVWF  xC2
2BA0:  CALL   07FA
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2BA4:  MOVLW  5E
2BA6:  MOVWF  FF6
2BA8:  MOVLW  04
2BAA:  MOVWF  FF7
2BAC:  MOVLW  0A
2BAE:  MOVWF  xB3
2BB0:  CALL   0EA0
2BB4:  MOVFF  35,AF
2BB8:  MOVLW  1F
2BBA:  MOVWF  xB0
2BBC:  CALL   0EE6
2BC0:  MOVFF  36,AF
2BC4:  MOVLW  1F
2BC6:  MOVWF  xB0
2BC8:  CALL   0EE6
2BCC:  MOVFF  37,AF
2BD0:  MOVLW  1F
2BD2:  MOVWF  xB0
2BD4:  CALL   0EE6
2BD8:  MOVFF  38,AF
2BDC:  MOVLW  1F
2BDE:  MOVWF  xB0
2BE0:  CALL   0EE6
2BE4:  MOVLW  20
2BE6:  MOVWF  xC0
2BE8:  CALL   085C
2BEC:  MOVLW  20
2BEE:  MOVWF  xC0
2BF0:  CALL   085C
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2BF4:  MOVFF  1B,C1
2BF8:  MOVLW  04
2BFA:  MOVWF  xC2
2BFC:  CALL   07FA
....................          lcd_putc(t[2]); 
2C00:  MOVFF  34,C0
2C04:  CALL   085C
....................           
....................          if(unidad>11&&unidad<14){ 
2C08:  MOVF   1B,W
2C0A:  SUBLW  0B
2C0C:  BC    2C2C
2C0E:  MOVF   1B,W
2C10:  SUBLW  0D
2C12:  BNC   2C2C
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2C14:  MOVLW  01
2C16:  SUBWF  1B,W
2C18:  MOVWF  xAF
2C1A:  MOVWF  xC1
2C1C:  MOVLW  04
2C1E:  MOVWF  xC2
2C20:  CALL   07FA
....................             lcd_putc(t[1]); 
2C24:  MOVFF  33,C0
2C28:  CALL   085C
....................          } 
....................           
....................          Cambio=OFF; 
2C2C:  BCF    17.5
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
2C2E:  BSF    F92.5
2C30:  BTFSS  F80.5
2C32:  BRA    2C66
....................          delay_ms(20); 
2C34:  MOVLW  14
2C36:  MOVWF  xC6
2C38:  CALL   06E2
....................          if(UP){ 
2C3C:  BSF    F92.5
2C3E:  BTFSS  F80.5
2C40:  BRA    2C64
....................             if(Flanco == 0) { 
2C42:  BTFSC  16.3
2C44:  BRA    2C64
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2C46:  MOVLW  0B
2C48:  SUBWF  1B,W
2C4A:  CLRF   03
2C4C:  ADDLW  35
2C4E:  MOVWF  FE9
2C50:  MOVLW  00
2C52:  ADDWFC 03,W
2C54:  MOVWF  FEA
2C56:  INCF   FEF,F
2C58:  BSF    16.3
2C5A:  MOVLW  1E
2C5C:  MOVWF  xC6
2C5E:  CALL   06E2
2C62:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2C64:  BRA    2C68
....................          Flanco = 0; 
2C66:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2C68:  BSF    F96.0
2C6A:  BTFSS  F84.0
2C6C:  BRA    2CA0
....................          delay_ms(20); 
2C6E:  MOVLW  14
2C70:  MOVWF  xC6
2C72:  CALL   06E2
....................          if(DOWN){ 
2C76:  BSF    F96.0
2C78:  BTFSS  F84.0
2C7A:  BRA    2C9E
....................             if(Flanco2 == 0) { 
2C7C:  BTFSC  16.5
2C7E:  BRA    2C9E
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2C80:  MOVLW  0B
2C82:  SUBWF  1B,W
2C84:  CLRF   03
2C86:  ADDLW  35
2C88:  MOVWF  FE9
2C8A:  MOVLW  00
2C8C:  ADDWFC 03,W
2C8E:  MOVWF  FEA
2C90:  DECF   FEF,F
2C92:  BSF    16.5
2C94:  MOVLW  1E
2C96:  MOVWF  xC6
2C98:  CALL   06E2
2C9C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2C9E:  BRA    2CA2
....................          Flanco2 = 0; 
2CA0:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2CA2:  BSF    F96.1
2CA4:  BTFSS  F84.1
2CA6:  BRA    2CCA
....................          if(RIGHT){ 
2CA8:  BSF    F96.1
2CAA:  BTFSS  F84.1
2CAC:  BRA    2CC8
....................             if(Flanco1 == 0) { 
2CAE:  BTFSC  16.4
2CB0:  BRA    2CC8
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2CB2:  BSF    16.4
2CB4:  INCF   1B,F
2CB6:  MOVLW  1E
2CB8:  MOVWF  xC6
2CBA:  CALL   06E2
2CBE:  MOVLW  0C
2CC0:  MOVWF  xC0
2CC2:  CALL   085C
2CC6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2CC8:  BRA    2CCC
....................          Flanco1 = 0; 
2CCA:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2CCC:  BSF    F96.2
2CCE:  BTFSS  F84.2
2CD0:  BRA    2CFC
....................          delay_ms(150); 
2CD2:  MOVLW  96
2CD4:  MOVWF  xC6
2CD6:  CALL   06E2
....................          if(IZQU){ 
2CDA:  BSF    F96.2
2CDC:  BTFSS  F84.2
2CDE:  BRA    2CFA
....................             if(Flanco3 == 0){ 
2CE0:  BTFSC  16.6
2CE2:  BRA    2CFA
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2CE4:  BSF    16.6
2CE6:  DECF   1B,F
2CE8:  MOVLW  1E
2CEA:  MOVWF  xC6
2CEC:  CALL   06E2
2CF0:  MOVLW  0C
2CF2:  MOVWF  xC0
2CF4:  CALL   085C
2CF8:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2CFA:  BRA    2CFE
....................         Flanco3 = 0; 
2CFC:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2CFE:  MOVLW  0B
2D00:  SUBWF  1B,W
2D02:  CLRF   03
2D04:  ADDLW  35
2D06:  MOVWF  FE9
2D08:  MOVLW  00
2D0A:  ADDWFC 03,W
2D0C:  MOVWF  FEA
2D0E:  BTFSC  FEF.7
2D10:  BRA    2D14
2D12:  BRA    2D28
....................          clave[unidad-11]=9; 
2D14:  MOVLW  0B
2D16:  SUBWF  1B,W
2D18:  CLRF   03
2D1A:  ADDLW  35
2D1C:  MOVWF  FE9
2D1E:  MOVLW  00
2D20:  ADDWFC 03,W
2D22:  MOVWF  FEA
2D24:  MOVLW  09
2D26:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2D28:  MOVLW  0B
2D2A:  SUBWF  1B,W
2D2C:  CLRF   03
2D2E:  ADDLW  35
2D30:  MOVWF  FE9
2D32:  MOVLW  00
2D34:  ADDWFC 03,W
2D36:  MOVWF  FEA
2D38:  BTFSC  FEF.7
2D3A:  BRA    2D54
2D3C:  MOVF   FEF,W
2D3E:  SUBLW  09
2D40:  BC    2D54
....................          clave[unidad-11]=0; 
2D42:  MOVLW  0B
2D44:  SUBWF  1B,W
2D46:  CLRF   03
2D48:  ADDLW  35
2D4A:  MOVWF  FE9
2D4C:  MOVLW  00
2D4E:  ADDWFC 03,W
2D50:  MOVWF  FEA
2D52:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2D54:  MOVF   1B,W
2D56:  SUBLW  0A
2D58:  BNC   2D78
....................          unidad=11; 
2D5A:  MOVLW  0B
2D5C:  MOVWF  1B
....................          Menu=1; 
2D5E:  MOVLW  01
2D60:  MOVWF  18
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2D62:  CLRF   35
2D64:  CLRF   36
2D66:  CLRF   37
2D68:  CLRF   38
2D6A:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
2D6C:  MOVLW  0B
2D6E:  MOVWF  1B
2D70:  MOVLW  0C
2D72:  MOVWF  xC0
2D74:  CALL   085C
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
2D78:  MOVF   1B,W
2D7A:  SUBLW  0E
2D7C:  BTFSC  FD8.0
2D7E:  BRA    2EEE
....................          lcd_gotoxy(1,1); 
2D80:  MOVLW  01
2D82:  MOVWF  xC1
2D84:  MOVWF  xC2
2D86:  CALL   07FA
....................          printf(lcd_putc,"                    "); 
2D8A:  MOVLW  74
2D8C:  MOVWF  FF6
2D8E:  MOVLW  04
2D90:  MOVWF  FF7
2D92:  CALL   08BA
....................          lcd_gotoxy(1,2); 
2D96:  MOVLW  01
2D98:  MOVWF  xC1
2D9A:  MOVLW  02
2D9C:  MOVWF  xC2
2D9E:  CALL   07FA
....................          printf(lcd_putc,"     Contraseña     "); 
2DA2:  MOVLW  8A
2DA4:  MOVWF  FF6
2DA6:  MOVLW  04
2DA8:  MOVWF  FF7
2DAA:  CALL   08BA
....................          lcd_gotoxy(1,3); 
2DAE:  MOVLW  01
2DB0:  MOVWF  xC1
2DB2:  MOVLW  03
2DB4:  MOVWF  xC2
2DB6:  CALL   07FA
....................          printf(lcd_putc,"     Almacenada     "); 
2DBA:  MOVLW  A0
2DBC:  MOVWF  FF6
2DBE:  MOVLW  04
2DC0:  MOVWF  FF7
2DC2:  CALL   08BA
....................          lcd_gotoxy(1,4); 
2DC6:  MOVLW  01
2DC8:  MOVWF  xC1
2DCA:  MOVLW  04
2DCC:  MOVWF  xC2
2DCE:  CALL   07FA
....................          printf(lcd_putc,"                    "); 
2DD2:  MOVLW  B6
2DD4:  MOVWF  FF6
2DD6:  MOVLW  04
2DD8:  MOVWF  FF7
2DDA:  CALL   08BA
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
2DDE:  CLRF   FA9
2DE0:  MOVFF  35,FA8
2DE4:  BCF    FA6.6
2DE6:  BCF    FA6.7
2DE8:  BSF    FA6.2
2DEA:  MOVF   FF2,W
2DEC:  MOVWF  00
2DEE:  BCF    FF2.7
2DF0:  MOVLB  F
2DF2:  MOVLW  55
2DF4:  MOVWF  FA7
2DF6:  MOVLW  AA
2DF8:  MOVWF  FA7
2DFA:  BSF    FA6.1
2DFC:  BTFSC  FA6.1
2DFE:  BRA    2DFC
2E00:  BCF    FA6.2
2E02:  MOVF   00,W
2E04:  IORWF  FF2,F
2E06:  MOVLW  14
2E08:  MOVLB  0
2E0A:  MOVWF  xC6
2E0C:  CALL   06E2
2E10:  MOVLW  01
2E12:  MOVWF  FA9
2E14:  MOVFF  36,FA8
2E18:  BCF    FA6.6
2E1A:  BCF    FA6.7
2E1C:  BSF    FA6.2
2E1E:  MOVF   FF2,W
2E20:  MOVWF  00
2E22:  BCF    FF2.7
2E24:  MOVLB  F
2E26:  MOVLW  55
2E28:  MOVWF  FA7
2E2A:  MOVLW  AA
2E2C:  MOVWF  FA7
2E2E:  BSF    FA6.1
2E30:  BTFSC  FA6.1
2E32:  BRA    2E30
2E34:  BCF    FA6.2
2E36:  MOVF   00,W
2E38:  IORWF  FF2,F
2E3A:  MOVLW  14
2E3C:  MOVLB  0
2E3E:  MOVWF  xC6
2E40:  CALL   06E2
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
2E44:  MOVLW  02
2E46:  MOVWF  FA9
2E48:  MOVFF  37,FA8
2E4C:  BCF    FA6.6
2E4E:  BCF    FA6.7
2E50:  BSF    FA6.2
2E52:  MOVF   FF2,W
2E54:  MOVWF  00
2E56:  BCF    FF2.7
2E58:  MOVLB  F
2E5A:  MOVLW  55
2E5C:  MOVWF  FA7
2E5E:  MOVLW  AA
2E60:  MOVWF  FA7
2E62:  BSF    FA6.1
2E64:  BTFSC  FA6.1
2E66:  BRA    2E64
2E68:  BCF    FA6.2
2E6A:  MOVF   00,W
2E6C:  IORWF  FF2,F
2E6E:  MOVLW  14
2E70:  MOVLB  0
2E72:  MOVWF  xC6
2E74:  CALL   06E2
2E78:  MOVLW  03
2E7A:  MOVWF  FA9
2E7C:  MOVFF  38,FA8
2E80:  BCF    FA6.6
2E82:  BCF    FA6.7
2E84:  BSF    FA6.2
2E86:  MOVF   FF2,W
2E88:  MOVWF  00
2E8A:  BCF    FF2.7
2E8C:  MOVLB  F
2E8E:  MOVLW  55
2E90:  MOVWF  FA7
2E92:  MOVLW  AA
2E94:  MOVWF  FA7
2E96:  BSF    FA6.1
2E98:  BTFSC  FA6.1
2E9A:  BRA    2E98
2E9C:  BCF    FA6.2
2E9E:  MOVF   00,W
2EA0:  IORWF  FF2,F
2EA2:  MOVLW  14
2EA4:  MOVLB  0
2EA6:  MOVWF  xC6
2EA8:  CALL   06E2
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2EAC:  MOVLW  02
2EAE:  MOVWF  xAF
2EB0:  MOVLW  FA
2EB2:  MOVWF  xC6
2EB4:  CALL   06E2
2EB8:  DECFSZ xAF,F
2EBA:  BRA    2EB0
2EBC:  MOVLW  01
2EBE:  MOVWF  18
2EC0:  CLRF   31
2EC2:  MOVLW  02
2EC4:  MOVWF  1C
2EC6:  MOVWF  1E
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
2EC8:  MOVFF  35,39
2ECC:  MOVFF  36,3A
2ED0:  MOVFF  37,3B
2ED4:  MOVFF  38,3C
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2ED8:  CLRF   35
2EDA:  CLRF   36
2EDC:  CLRF   37
2EDE:  CLRF   38
2EE0:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f");          
2EE2:  MOVLW  0B
2EE4:  MOVWF  1B
2EE6:  MOVLW  0C
2EE8:  MOVWF  xC0
2EEA:  CALL   085C
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
2EEE:  MOVF   18,W
2EF0:  SUBLW  04
2EF2:  BTFSS  FD8.2
2EF4:  BRA    3108
....................    EliminaRuido(); 
2EF6:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
2EFA:  MOVLW  01
2EFC:  MOVWF  xC1
2EFE:  MOVWF  xC2
2F00:  CALL   07FA
....................       printf(lcd_putc,"  Duracion Actual   "); 
2F04:  MOVLW  CC
2F06:  MOVWF  FF6
2F08:  MOVLW  04
2F0A:  MOVWF  FF7
2F0C:  CALL   08BA
....................       lcd_gotoxy(1,2); 
2F10:  MOVLW  01
2F12:  MOVWF  xC1
2F14:  MOVLW  02
2F16:  MOVWF  xC2
2F18:  CALL   07FA
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2F1C:  MOVLW  E2
2F1E:  MOVWF  FF6
2F20:  MOVLW  04
2F22:  MOVWF  FF7
2F24:  MOVLW  0B
2F26:  MOVWF  xB3
2F28:  CALL   0EA0
2F2C:  MOVLW  08
2F2E:  MOVWF  FE9
2F30:  MOVFF  41,B0
2F34:  MOVFF  40,AF
2F38:  GOTO   10BE
2F3C:  MOVLW  20
2F3E:  MOVWF  xC0
2F40:  CALL   085C
2F44:  MOVLW  20
2F46:  MOVWF  xC0
2F48:  CALL   085C
2F4C:  MOVLW  20
2F4E:  MOVWF  xC0
2F50:  CALL   085C
....................       lcd_gotoxy(1,4); 
2F54:  MOVLW  01
2F56:  MOVWF  xC1
2F58:  MOVLW  04
2F5A:  MOVWF  xC2
2F5C:  CALL   07FA
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
2F60:  MOVLW  F6
2F62:  MOVWF  FF6
2F64:  MOVLW  04
2F66:  MOVWF  FF7
2F68:  CALL   08BA
....................        
....................       Cambio=OFF; 
2F6C:  BCF    17.5
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
2F6E:  BSF    F92.5
2F70:  BTFSS  F80.5
2F72:  BRA    30C4
2F74:  BSF    F96.1
2F76:  BTFSS  F84.1
2F78:  BRA    30C4
....................          delay_ms(20); 
2F7A:  MOVLW  14
2F7C:  MOVWF  xC6
2F7E:  CALL   06E2
....................          if(UP && RIGHT){ 
2F82:  BSF    F92.5
2F84:  BTFSS  F80.5
2F86:  BRA    30C4
2F88:  BSF    F96.1
2F8A:  BTFSS  F84.1
2F8C:  BRA    30C4
....................             delay_ms(200); 
2F8E:  MOVLW  C8
2F90:  MOVWF  xC6
2F92:  CALL   06E2
....................             printf(lcd_putc,"\f"); 
2F96:  MOVLW  0C
2F98:  MOVWF  xC0
2F9A:  CALL   085C
....................             lcd_gotoxy(1,2); 
2F9E:  MOVLW  01
2FA0:  MOVWF  xC1
2FA2:  MOVLW  02
2FA4:  MOVWF  xC2
2FA6:  CALL   07FA
....................             printf(lcd_putc," Reset de tiempo "); 
2FAA:  MOVLW  0C
2FAC:  MOVWF  FF6
2FAE:  MOVLW  05
2FB0:  MOVWF  FF7
2FB2:  CALL   08BA
....................             lcd_gotoxy(1,3); 
2FB6:  MOVLW  01
2FB8:  MOVWF  xC1
2FBA:  MOVLW  03
2FBC:  MOVWF  xC2
2FBE:  CALL   07FA
....................             printf(lcd_putc,"     Exitoso     "); 
2FC2:  MOVLW  1E
2FC4:  MOVWF  FF6
2FC6:  MOVLW  05
2FC8:  MOVWF  FF7
2FCA:  CALL   08BA
....................             write_eeprom(7,0); 
2FCE:  MOVLW  07
2FD0:  MOVWF  FA9
2FD2:  CLRF   FA8
2FD4:  BCF    FA6.6
2FD6:  BCF    FA6.7
2FD8:  BSF    FA6.2
2FDA:  MOVF   FF2,W
2FDC:  MOVWF  00
2FDE:  BCF    FF2.7
2FE0:  MOVLB  F
2FE2:  MOVLW  55
2FE4:  MOVWF  FA7
2FE6:  MOVLW  AA
2FE8:  MOVWF  FA7
2FEA:  BSF    FA6.1
2FEC:  BTFSC  FA6.1
2FEE:  BRA    2FEC
2FF0:  BCF    FA6.2
2FF2:  MOVF   00,W
2FF4:  IORWF  FF2,F
....................             delay_ms(20); 
2FF6:  MOVLW  14
2FF8:  MOVLB  0
2FFA:  MOVWF  xC6
2FFC:  CALL   06E2
....................             write_eeprom(8,0); 
3000:  MOVLW  08
3002:  MOVWF  FA9
3004:  CLRF   FA8
3006:  BCF    FA6.6
3008:  BCF    FA6.7
300A:  BSF    FA6.2
300C:  MOVF   FF2,W
300E:  MOVWF  00
3010:  BCF    FF2.7
3012:  MOVLB  F
3014:  MOVLW  55
3016:  MOVWF  FA7
3018:  MOVLW  AA
301A:  MOVWF  FA7
301C:  BSF    FA6.1
301E:  BTFSC  FA6.1
3020:  BRA    301E
3022:  BCF    FA6.2
3024:  MOVF   00,W
3026:  IORWF  FF2,F
....................             delay_ms(20); 
3028:  MOVLW  14
302A:  MOVLB  0
302C:  MOVWF  xC6
302E:  CALL   06E2
....................             write_eeprom(9,0); 
3032:  MOVLW  09
3034:  MOVWF  FA9
3036:  CLRF   FA8
3038:  BCF    FA6.6
303A:  BCF    FA6.7
303C:  BSF    FA6.2
303E:  MOVF   FF2,W
3040:  MOVWF  00
3042:  BCF    FF2.7
3044:  MOVLB  F
3046:  MOVLW  55
3048:  MOVWF  FA7
304A:  MOVLW  AA
304C:  MOVWF  FA7
304E:  BSF    FA6.1
3050:  BTFSC  FA6.1
3052:  BRA    3050
3054:  BCF    FA6.2
3056:  MOVF   00,W
3058:  IORWF  FF2,F
....................             delay_ms(20); 
305A:  MOVLW  14
305C:  MOVLB  0
305E:  MOVWF  xC6
3060:  CALL   06E2
....................             write_eeprom(10,0); 
3064:  MOVLW  0A
3066:  MOVWF  FA9
3068:  CLRF   FA8
306A:  BCF    FA6.6
306C:  BCF    FA6.7
306E:  BSF    FA6.2
3070:  MOVF   FF2,W
3072:  MOVWF  00
3074:  BCF    FF2.7
3076:  MOVLB  F
3078:  MOVLW  55
307A:  MOVWF  FA7
307C:  MOVLW  AA
307E:  MOVWF  FA7
3080:  BSF    FA6.1
3082:  BTFSC  FA6.1
3084:  BRA    3082
3086:  BCF    FA6.2
3088:  MOVF   00,W
308A:  IORWF  FF2,F
....................             delay_ms(700); 
308C:  MOVLW  04
308E:  MOVLB  0
3090:  MOVWF  xAF
3092:  MOVLW  AF
3094:  MOVWF  xC6
3096:  CALL   06E2
309A:  DECFSZ xAF,F
309C:  BRA    3092
....................             segundos=0;minutos=0;horas=0; 
309E:  CLRF   21
30A0:  CLRF   22
30A2:  CLRF   41
30A4:  CLRF   40
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
30A6:  MOVLW  1E
30A8:  MOVWF  xC6
30AA:  CALL   06E2
30AE:  MOVLW  01
30B0:  MOVWF  18
30B2:  CLRF   31
30B4:  MOVLW  02
30B6:  MOVWF  1C
30B8:  MOVWF  1E
30BA:  MOVLW  0C
30BC:  MOVWF  xC0
30BE:  CALL   085C
....................             Cambio=ON; 
30C2:  BSF    17.5
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
30C4:  BSF    F96.2
30C6:  BTFSS  F84.2
30C8:  BRA    3106
....................          delay_ms(20); 
30CA:  MOVLW  14
30CC:  MOVWF  xC6
30CE:  CALL   06E2
....................          if(IZQU){ 
30D2:  BSF    F96.2
30D4:  BTFSS  F84.2
30D6:  BRA    3104
....................             if(Flanco3 == 0){ 
30D8:  BTFSC  16.6
30DA:  BRA    3104
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
30DC:  BSF    16.6
30DE:  MOVLW  02
30E0:  MOVWF  xAF
30E2:  MOVLW  FA
30E4:  MOVWF  xC6
30E6:  CALL   06E2
30EA:  DECFSZ xAF,F
30EC:  BRA    30E2
30EE:  MOVLW  01
30F0:  MOVWF  18
30F2:  CLRF   31
30F4:  MOVLW  02
30F6:  MOVWF  1C
30F8:  MOVWF  1E
30FA:  MOVLW  0C
30FC:  MOVWF  xC0
30FE:  CALL   085C
3102:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
3104:  BRA    3108
....................          Flanco3 = 0; 
3106:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
3108:  MOVF   18,W
310A:  SUBLW  05
310C:  BTFSS  FD8.2
310E:  BRA    3364
....................       EliminaRuido(); 
3110:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3114:  MOVLW  01
3116:  MOVWF  xC1
3118:  MOVWF  xC2
311A:  CALL   07FA
....................          printf(lcd_putc,"  Zero Point Config "); 
311E:  MOVLW  30
3120:  MOVWF  FF6
3122:  MOVLW  05
3124:  MOVWF  FF7
3126:  CALL   08BA
....................          lcd_gotoxy(1,2); 
312A:  MOVLW  01
312C:  MOVWF  xC1
312E:  MOVLW  02
3130:  MOVWF  xC2
3132:  CALL   07FA
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
3136:  MOVLW  05
3138:  MOVWF  xAF
313A:  CALL   158E
313E:  MOVFF  00,AF
3142:  MOVFF  01,B0
3146:  MOVFF  02,B1
314A:  MOVFF  03,B2
314E:  MOVFF  03,C6
3152:  MOVFF  02,C5
3156:  MOVFF  01,C4
315A:  MOVFF  00,C3
315E:  MOVLW  D7
3160:  MOVWF  xCA
3162:  MOVLW  A3
3164:  MOVWF  xC9
3166:  CLRF   xC8
3168:  MOVLW  81
316A:  MOVWF  xC7
316C:  CALL   1724
3170:  MOVFF  00,AF
3174:  MOVFF  01,B0
3178:  MOVFF  02,B1
317C:  MOVFF  03,B2
3180:  MOVLW  46
3182:  MOVWF  FF6
3184:  MOVLW  05
3186:  MOVWF  FF7
3188:  MOVLW  09
318A:  MOVWF  xB3
318C:  CALL   0EA0
3190:  MOVLW  02
3192:  MOVWF  FE9
3194:  MOVFF  B2,B6
3198:  MOVFF  B1,B5
319C:  MOVFF  B0,B4
31A0:  MOVFF  AF,B3
31A4:  MOVWF  xB7
31A6:  CALL   18D0
31AA:  MOVLW  54
31AC:  MOVWF  FF6
31AE:  MOVLW  05
31B0:  MOVWF  FF7
31B2:  MOVLW  07
31B4:  MOVWF  xB3
31B6:  CALL   0EA0
....................          lcd_gotoxy(1,3); 
31BA:  MOVLW  01
31BC:  MOVWF  xC1
31BE:  MOVLW  03
31C0:  MOVWF  xC2
31C2:  CALL   07FA
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
31C6:  CLRF   xB4
31C8:  CALL   1174
31CC:  MOVFF  00,AF
31D0:  MOVFF  01,B0
31D4:  MOVFF  02,B1
31D8:  MOVFF  03,B2
31DC:  MOVLW  5C
31DE:  MOVWF  FF6
31E0:  MOVLW  05
31E2:  MOVWF  FF7
31E4:  MOVLW  08
31E6:  MOVWF  xB3
31E8:  CALL   0EA0
31EC:  MOVLW  01
31EE:  MOVWF  FE9
31F0:  MOVFF  B2,B6
31F4:  MOVFF  B1,B5
31F8:  MOVFF  B0,B4
31FC:  MOVFF  AF,B3
3200:  CLRF   xB7
3202:  CALL   18D0
....................          lcd_gotoxy(1,4); 
3206:  MOVLW  01
3208:  MOVWF  xC1
320A:  MOVLW  04
320C:  MOVWF  xC2
320E:  CALL   07FA
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
3212:  MOVLW  6A
3214:  MOVWF  FF6
3216:  MOVLW  05
3218:  MOVWF  FF7
321A:  MOVLW  07
321C:  MOVWF  xB3
321E:  CALL   0EA0
3222:  MOVLW  01
3224:  MOVWF  FE9
3226:  MOVFF  A9,B6
322A:  MOVFF  A8,B5
322E:  MOVFF  A7,B4
3232:  MOVFF  A6,B3
3236:  CLRF   xB7
3238:  CALL   18D0
....................           
....................          Cambio=OFF; 
323C:  BCF    17.5
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
323E:  BSF    F96.1
3240:  BTFSS  F84.1
3242:  BRA    3324
....................          delay_ms(20); 
3244:  MOVLW  14
3246:  MOVWF  xC6
3248:  CALL   06E2
....................          if(RIGHT){ 
324C:  BSF    F96.1
324E:  BTFSS  F84.1
3250:  BRA    3322
....................             if(Flanco1 == 0){ 
3252:  BTFSC  16.4
3254:  BRA    3322
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3256:  MOVLW  01
3258:  MOVWF  18
325A:  CLRF   31
325C:  MOVLW  02
325E:  MOVWF  1C
3260:  MOVWF  1E
3262:  MOVLW  0B
3264:  MOVWF  1B
3266:  MOVLW  02
3268:  MOVWF  xAF
326A:  MOVLW  FA
326C:  MOVWF  xC6
326E:  CALL   06E2
3272:  DECFSZ xAF,F
3274:  BRA    326A
3276:  MOVLW  0C
3278:  MOVWF  xC0
327A:  CALL   085C
....................                G=sensores(0); 
327E:  CLRF   xB4
3280:  CALL   1174
3284:  MOVFF  03,A9
3288:  MOVFF  02,A8
328C:  MOVFF  01,A7
3290:  MOVFF  00,A6
....................                G16=(int16)G; 
3294:  MOVFF  A9,C6
3298:  MOVFF  A8,C5
329C:  MOVFF  A7,C4
32A0:  MOVFF  A6,C3
32A4:  CALL   1A56
32A8:  MOVFF  02,43
32AC:  MOVFF  01,42
....................                G_l=G16; G_h=(G16>>8); 
32B0:  MOVFF  42,25
32B4:  MOVFF  43,26
....................                 
....................                write_eeprom(11,G_l); 
32B8:  MOVLW  0B
32BA:  MOVWF  FA9
32BC:  MOVFF  25,FA8
32C0:  BCF    FA6.6
32C2:  BCF    FA6.7
32C4:  BSF    FA6.2
32C6:  MOVF   FF2,W
32C8:  MOVWF  00
32CA:  BCF    FF2.7
32CC:  MOVLB  F
32CE:  MOVLW  55
32D0:  MOVWF  FA7
32D2:  MOVLW  AA
32D4:  MOVWF  FA7
32D6:  BSF    FA6.1
32D8:  BTFSC  FA6.1
32DA:  BRA    32D8
32DC:  BCF    FA6.2
32DE:  MOVF   00,W
32E0:  IORWF  FF2,F
....................                delay_ms(20); 
32E2:  MOVLW  14
32E4:  MOVLB  0
32E6:  MOVWF  xC6
32E8:  CALL   06E2
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
32EC:  MOVLW  0C
32EE:  MOVWF  FA9
32F0:  MOVFF  26,FA8
32F4:  BCF    FA6.6
32F6:  BCF    FA6.7
32F8:  BSF    FA6.2
32FA:  MOVF   FF2,W
32FC:  MOVWF  00
32FE:  BCF    FF2.7
3300:  MOVLB  F
3302:  MOVLW  55
3304:  MOVWF  FA7
3306:  MOVLW  AA
3308:  MOVWF  FA7
330A:  BSF    FA6.1
330C:  BTFSC  FA6.1
330E:  BRA    330C
3310:  BCF    FA6.2
3312:  MOVF   00,W
3314:  IORWF  FF2,F
....................                delay_ms(20); 
3316:  MOVLW  14
3318:  MOVLB  0
331A:  MOVWF  xC6
331C:  CALL   06E2
....................                Cambio=ON; 
3320:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
3322:  BRA    3326
....................          Flanco1 = 0; 
3324:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3326:  BSF    F96.2
3328:  BTFSS  F84.2
332A:  BRA    3362
....................          delay_ms(20); 
332C:  MOVLW  14
332E:  MOVWF  xC6
3330:  CALL   06E2
....................          if(IZQU){ 
3334:  BSF    F96.2
3336:  BTFSS  F84.2
3338:  BRA    3360
....................             if(Flanco3 == 0){ 
333A:  BTFSC  16.6
333C:  BRA    3360
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
333E:  MOVLW  01
3340:  MOVWF  18
3342:  CLRF   31
3344:  MOVLW  02
3346:  MOVWF  1C
3348:  MOVWF  1E
334A:  MOVLW  0B
334C:  MOVWF  1B
334E:  MOVLW  1E
3350:  MOVWF  xC6
3352:  CALL   06E2
3356:  MOVLW  0C
3358:  MOVWF  xC0
335A:  CALL   085C
....................                Cambio=ON; 
335E:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
3360:  BRA    3364
....................          Flanco3 = 0; 
3362:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
3364:  MOVF   18,W
3366:  SUBLW  06
3368:  BTFSS  FD8.2
336A:  BRA    3492
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
336C:  BTG    17.4
336E:  BSF    16.4
3370:  MOVLW  01
3372:  MOVWF  18
3374:  CLRF   31
....................                        
....................             if(estadoalarma==1) 
3376:  BTFSS  17.4
3378:  BRA    33DA
....................             {estadoalarma=1; 
337A:  BSF    17.4
....................                lcd_gotoxy(1,1); 
337C:  MOVLW  01
337E:  MOVWF  xC1
3380:  MOVWF  xC2
3382:  CALL   07FA
....................                printf(lcd_putc,"                    "); 
3386:  MOVLW  78
3388:  MOVWF  FF6
338A:  MOVLW  05
338C:  MOVWF  FF7
338E:  CALL   08BA
....................                lcd_gotoxy(1,2); 
3392:  MOVLW  01
3394:  MOVWF  xC1
3396:  MOVLW  02
3398:  MOVWF  xC2
339A:  CALL   07FA
....................                printf(lcd_putc,"        Activo      "); 
339E:  MOVLW  8E
33A0:  MOVWF  FF6
33A2:  MOVLW  05
33A4:  MOVWF  FF7
33A6:  CALL   08BA
....................                lcd_gotoxy(1,3); 
33AA:  MOVLW  01
33AC:  MOVWF  xC1
33AE:  MOVLW  03
33B0:  MOVWF  xC2
33B2:  CALL   07FA
....................                printf(lcd_putc,"        Alarma      "); 
33B6:  MOVLW  A4
33B8:  MOVWF  FF6
33BA:  MOVLW  05
33BC:  MOVWF  FF7
33BE:  CALL   08BA
....................                lcd_gotoxy(1,4); 
33C2:  MOVLW  01
33C4:  MOVWF  xC1
33C6:  MOVLW  04
33C8:  MOVWF  xC2
33CA:  CALL   07FA
....................                printf(lcd_putc,"                    ");} 
33CE:  MOVLW  BA
33D0:  MOVWF  FF6
33D2:  MOVLW  05
33D4:  MOVWF  FF7
33D6:  CALL   08BA
....................                 
....................             if(estadoalarma==0) 
33DA:  BTFSC  17.4
33DC:  BRA    343E
....................             {estadoalarma=0; 
33DE:  BCF    17.4
....................                lcd_gotoxy(1,1); 
33E0:  MOVLW  01
33E2:  MOVWF  xC1
33E4:  MOVWF  xC2
33E6:  CALL   07FA
....................                printf(lcd_putc,"                    "); 
33EA:  MOVLW  D0
33EC:  MOVWF  FF6
33EE:  MOVLW  05
33F0:  MOVWF  FF7
33F2:  CALL   08BA
....................                lcd_gotoxy(1,2); 
33F6:  MOVLW  01
33F8:  MOVWF  xC1
33FA:  MOVLW  02
33FC:  MOVWF  xC2
33FE:  CALL   07FA
....................                printf(lcd_putc,"      Desactivo     "); 
3402:  MOVLW  E6
3404:  MOVWF  FF6
3406:  MOVLW  05
3408:  MOVWF  FF7
340A:  CALL   08BA
....................                lcd_gotoxy(1,3); 
340E:  MOVLW  01
3410:  MOVWF  xC1
3412:  MOVLW  03
3414:  MOVWF  xC2
3416:  CALL   07FA
....................                printf(lcd_putc,"       Alarma       "); 
341A:  MOVLW  FC
341C:  MOVWF  FF6
341E:  MOVLW  05
3420:  MOVWF  FF7
3422:  CALL   08BA
....................                lcd_gotoxy(1,4); 
3426:  MOVLW  01
3428:  MOVWF  xC1
342A:  MOVLW  04
342C:  MOVWF  xC2
342E:  CALL   07FA
....................                printf(lcd_putc,"                    ");} 
3432:  MOVLW  12
3434:  MOVWF  FF6
3436:  MOVLW  06
3438:  MOVWF  FF7
343A:  CALL   08BA
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
343E:  MOVLW  00
3440:  BTFSC  17.4
3442:  MOVLW  01
3444:  MOVWF  xAF
3446:  MOVLW  04
3448:  MOVWF  FA9
344A:  MOVFF  AF,FA8
344E:  BCF    FA6.6
3450:  BCF    FA6.7
3452:  BSF    FA6.2
3454:  MOVF   FF2,W
3456:  MOVWF  00
3458:  BCF    FF2.7
345A:  MOVLB  F
345C:  MOVLW  55
345E:  MOVWF  FA7
3460:  MOVLW  AA
3462:  MOVWF  FA7
3464:  BSF    FA6.1
3466:  BTFSC  FA6.1
3468:  BRA    3466
346A:  BCF    FA6.2
346C:  MOVF   00,W
346E:  IORWF  FF2,F
3470:  MOVLW  04
3472:  MOVLB  0
3474:  MOVWF  xAF
3476:  MOVLW  FA
3478:  MOVWF  xC6
347A:  CALL   06E2
347E:  DECFSZ xAF,F
3480:  BRA    3476
3482:  MOVLW  02
3484:  MOVWF  1C
3486:  MOVWF  1E
3488:  MOVLW  0C
348A:  MOVWF  xC0
348C:  CALL   085C
....................             Cambio=ON; 
3490:  BSF    17.5
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
3492:  MOVF   18,W
3494:  SUBLW  32
3496:  BTFSS  FD8.2
3498:  BRA    3AD0
....................    if(Lectura==1) 
349A:  BTFSS  17.0
349C:  BRA    36C0
....................    { 
....................       Lectura=0; 
349E:  BCF    17.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
34A0:  MOVLW  05
34A2:  MOVWF  xAF
34A4:  CALL   158E
34A8:  MOVFF  03,A5
34AC:  MOVFF  02,A4
34B0:  MOVFF  01,A3
34B4:  MOVFF  00,A2
....................       lcd_gotoxy(1,1); 
34B8:  MOVLW  01
34BA:  MOVWF  xC1
34BC:  MOVWF  xC2
34BE:  CALL   07FA
....................       printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));       
34C2:  MOVFF  A5,C6
34C6:  MOVFF  A4,C5
34CA:  MOVFF  A3,C4
34CE:  MOVFF  A2,C3
34D2:  MOVLW  D7
34D4:  MOVWF  xCA
34D6:  MOVLW  A3
34D8:  MOVWF  xC9
34DA:  CLRF   xC8
34DC:  MOVLW  81
34DE:  MOVWF  xC7
34E0:  CALL   1724
34E4:  MOVFF  00,AF
34E8:  MOVFF  01,B0
34EC:  MOVFF  02,B1
34F0:  MOVFF  03,B2
34F4:  MOVLW  28
34F6:  MOVWF  FF6
34F8:  MOVLW  06
34FA:  MOVWF  FF7
34FC:  MOVLW  08
34FE:  MOVWF  xB3
3500:  CALL   0EA0
3504:  MOVLW  02
3506:  MOVWF  FE9
3508:  MOVFF  B2,B6
350C:  MOVFF  B1,B5
3510:  MOVFF  B0,B4
3514:  MOVFF  AF,B3
3518:  MOVWF  xB7
351A:  CALL   18D0
351E:  MOVLW  35
3520:  MOVWF  FF6
3522:  MOVLW  06
3524:  MOVWF  FF7
3526:  MOVLW  07
3528:  MOVWF  xB3
352A:  CALL   0EA0
....................       Saturacion=(CaidaPresion/0.37)*11; 
352E:  MOVFF  A5,C6
3532:  MOVFF  A4,C5
3536:  MOVFF  A3,C4
353A:  MOVFF  A2,C3
353E:  MOVLW  A4
3540:  MOVWF  xCA
3542:  MOVLW  70
3544:  MOVWF  xC9
3546:  MOVLW  3D
3548:  MOVWF  xC8
354A:  MOVLW  7D
354C:  MOVWF  xC7
354E:  CALL   11CA
3552:  MOVFF  00,AF
3556:  MOVFF  01,B0
355A:  MOVFF  02,B1
355E:  MOVFF  03,B2
3562:  MOVFF  03,C6
3566:  MOVFF  02,C5
356A:  MOVFF  01,C4
356E:  MOVFF  00,C3
3572:  CLRF   xCA
3574:  CLRF   xC9
3576:  MOVLW  30
3578:  MOVWF  xC8
357A:  MOVLW  82
357C:  MOVWF  xC7
357E:  CALL   1724
3582:  MOVFF  03,A1
3586:  MOVFF  02,A0
358A:  MOVFF  01,9F
358E:  MOVFF  00,9E
....................        
....................       if(Saturacion>11) 
3592:  CLRF   xC6
3594:  CLRF   xC5
3596:  MOVLW  30
3598:  MOVWF  xC4
359A:  MOVLW  82
359C:  MOVWF  xC3
359E:  MOVFF  A1,CA
35A2:  MOVFF  A0,C9
35A6:  MOVFF  9F,C8
35AA:  MOVFF  9E,C7
35AE:  CALL   0B36
35B2:  BNC   35C0
....................       { 
....................          Saturacion=11; 
35B4:  CLRF   xA1
35B6:  CLRF   xA0
35B8:  MOVLW  30
35BA:  MOVWF  x9F
35BC:  MOVLW  82
35BE:  MOVWF  x9E
....................       } 
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
35C0:  CLRF   2D
35C2:  MOVFF  A1,B2
35C6:  MOVFF  A0,B1
35CA:  MOVFF  9F,B0
35CE:  MOVFF  9E,AF
35D2:  CALL   1DC8
35D6:  MOVFF  00,AF
35DA:  MOVFF  01,B0
35DE:  MOVFF  02,B1
35E2:  MOVFF  03,B2
35E6:  CLRF   xC8
35E8:  MOVFF  2D,C7
35EC:  CALL   0940
35F0:  MOVFF  03,C6
35F4:  MOVFF  02,C5
35F8:  MOVFF  01,C4
35FC:  MOVFF  00,C3
3600:  MOVFF  B2,CA
3604:  MOVFF  B1,C9
3608:  MOVFF  B0,C8
360C:  MOVFF  AF,C7
3610:  CALL   0B36
3614:  BNC   3632
....................       { 
....................          lcd_gotoxy(i+8,2); 
3616:  MOVLW  08
3618:  ADDWF  2D,W
361A:  MOVWF  xAF
361C:  MOVWF  xC1
361E:  MOVLW  02
3620:  MOVWF  xC2
3622:  CALL   07FA
....................          printf(lcd_putc,"Ñ"); 
3626:  MOVLW  D1
3628:  MOVWF  xC0
362A:  CALL   085C
....................       } 
362E:  INCF   2D,F
3630:  BRA    35C2
....................        
....................       for(i=floor(Saturacion);i<11;i++) 
3632:  MOVFF  A1,B2
3636:  MOVFF  A0,B1
363A:  MOVFF  9F,B0
363E:  MOVFF  9E,AF
3642:  CALL   1DC8
3646:  MOVFF  03,C6
364A:  MOVFF  02,C5
364E:  MOVFF  01,C4
3652:  MOVFF  00,C3
3656:  CALL   1A56
365A:  MOVFF  01,2D
365E:  MOVF   2D,W
3660:  SUBLW  0A
3662:  BNC   3680
....................       { 
....................          lcd_gotoxy(i+8,2); 
3664:  MOVLW  08
3666:  ADDWF  2D,W
3668:  MOVWF  xAF
366A:  MOVWF  xC1
366C:  MOVLW  02
366E:  MOVWF  xC2
3670:  CALL   07FA
....................          printf(lcd_putc," "); 
3674:  MOVLW  20
3676:  MOVWF  xC0
3678:  CALL   085C
....................       } 
367C:  INCF   2D,F
367E:  BRA    365E
....................        
....................       lcd_gotoxy(9,3); 
3680:  MOVLW  09
3682:  MOVWF  xC1
3684:  MOVLW  03
3686:  MOVWF  xC2
3688:  CALL   07FA
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
368C:  MOVLW  3E
368E:  MOVWF  FF6
3690:  MOVLW  06
3692:  MOVWF  FF7
3694:  MOVLW  06
3696:  MOVWF  xB3
3698:  CALL   0EA0
369C:  MOVFF  27,AF
36A0:  MOVLW  03
36A2:  MOVWF  xB0
36A4:  CALL   1052
36A8:  MOVLW  3A
36AA:  MOVWF  xC0
36AC:  CALL   085C
36B0:  MOVFF  28,AF
36B4:  MOVLW  01
36B6:  MOVWF  xB0
36B8:  CALL   1052
....................       EliminaRuido(); 
36BC:  CALL   0004
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
36C0:  BTFSS  16.7
36C2:  BRA    375C
....................    { 
....................       if(estadoalarma==1) 
36C4:  BTFSS  17.4
36C6:  BRA    3752
....................       { 
....................          printf(lcd_putc,"\f"); 
36C8:  MOVLW  0C
36CA:  MOVWF  xC0
36CC:  CALL   085C
....................          lcd_gotoxy(1,2); 
36D0:  MOVLW  01
36D2:  MOVWF  xC1
36D4:  MOVLW  02
36D6:  MOVWF  xC2
36D8:  CALL   07FA
....................          printf(lcd_putc,"  Temporizador  de  "); 
36DC:  MOVLW  4E
36DE:  MOVWF  FF6
36E0:  MOVLW  06
36E2:  MOVWF  FF7
36E4:  CALL   08BA
....................          lcd_gotoxy(1,3); 
36E8:  MOVLW  01
36EA:  MOVWF  xC1
36EC:  MOVLW  03
36EE:  MOVWF  xC2
36F0:  CALL   07FA
....................          printf(lcd_putc," Luz UV  Finalizado "); 
36F4:  MOVLW  64
36F6:  MOVWF  FF6
36F8:  MOVLW  06
36FA:  MOVWF  FF7
36FC:  CALL   08BA
....................          lcd_gotoxy(1,4); 
3700:  MOVLW  01
3702:  MOVWF  xC1
3704:  MOVLW  04
3706:  MOVWF  xC2
3708:  CALL   07FA
....................          printf(lcd_putc,"                    "); 
370C:  MOVLW  7A
370E:  MOVWF  FF6
3710:  MOVLW  06
3712:  MOVWF  FF7
3714:  CALL   08BA
....................          lcd_gotoxy(1,1); 
3718:  MOVLW  01
371A:  MOVWF  xC1
371C:  MOVWF  xC2
371E:  CALL   07FA
....................          printf(lcd_putc,"                    "); 
3722:  MOVLW  90
3724:  MOVWF  FF6
3726:  MOVLW  06
3728:  MOVWF  FF7
372A:  CALL   08BA
....................          for(i=0;i<5;i++) 
372E:  CLRF   2D
3730:  MOVF   2D,W
3732:  SUBLW  04
3734:  BNC   3752
....................          { 
....................             Buzzer_on; 
3736:  BSF    F8C.0
3738:  BCF    F95.0
....................             delay_ms(200); 
373A:  MOVLW  C8
373C:  MOVWF  xC6
373E:  CALL   06E2
....................             Buzzer_off; 
3742:  BCF    F8C.0
3744:  BCF    F95.0
....................             delay_ms(200); 
3746:  MOVLW  C8
3748:  MOVWF  xC6
374A:  CALL   06E2
....................          } 
374E:  INCF   2D,F
3750:  BRA    3730
....................       } 
....................       tiempo_cumplido=0; 
3752:  BCF    16.7
....................       printf(lcd_putc,"\f"); 
3754:  MOVLW  0C
3756:  MOVWF  xC0
3758:  CALL   085C
....................    } 
....................     
....................    if(CaidaPresion>=0.37) 
375C:  MOVLW  A4
375E:  MOVWF  xC6
3760:  MOVLW  70
3762:  MOVWF  xC5
3764:  MOVLW  3D
3766:  MOVWF  xC4
3768:  MOVLW  7D
376A:  MOVWF  xC3
376C:  MOVFF  A5,CA
3770:  MOVFF  A4,C9
3774:  MOVFF  A3,C8
3778:  MOVFF  A2,C7
377C:  CALL   0B36
3780:  BC    3784
3782:  BNZ   378A
....................    {  
....................       ActivaBuzzer=1; 
3784:  MOVLW  01
3786:  MOVWF  3D
....................    } 
....................    else 
3788:  BRA    3790
....................    { 
....................       ActivaBuzzer=0; 
378A:  CLRF   3D
....................       Buzzer_off; 
378C:  BCF    F8C.0
378E:  BCF    F95.0
....................    } 
....................        
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,2); 
3790:  MOVLW  01
3792:  MOVWF  xC1
3794:  MOVLW  02
3796:  MOVWF  xC2
3798:  CALL   07FA
....................       printf(lcd_putc,"Filtro:"); 
379C:  MOVLW  A6
379E:  MOVWF  FF6
37A0:  MOVLW  06
37A2:  MOVWF  FF7
37A4:  CALL   08BA
....................        
....................       if(estadomv==1) 
37A8:  BTFSS  16.2
37AA:  BRA    37C6
....................       { 
....................          lcd_gotoxy(1,4); 
37AC:  MOVLW  01
37AE:  MOVWF  xC1
37B0:  MOVLW  04
37B2:  MOVWF  xC2
37B4:  CALL   07FA
....................          printf(lcd_putc,"Motor:ON ");       
37B8:  MOVLW  AE
37BA:  MOVWF  FF6
37BC:  MOVLW  06
37BE:  MOVWF  FF7
37C0:  CALL   08BA
....................       } 
....................       else 
37C4:  BRA    37DE
....................       { 
....................          lcd_gotoxy(1,4); 
37C6:  MOVLW  01
37C8:  MOVWF  xC1
37CA:  MOVLW  04
37CC:  MOVWF  xC2
37CE:  CALL   07FA
....................          printf(lcd_putc,"Motor:OFF"); 
37D2:  MOVLW  B8
37D4:  MOVWF  FF6
37D6:  MOVLW  06
37D8:  MOVWF  FF7
37DA:  CALL   08BA
....................       } 
....................        
....................       if(estadouv==1) 
37DE:  BTFSS  16.0
37E0:  BRA    37FC
....................       { 
....................          lcd_gotoxy(13,4); 
37E2:  MOVLW  0D
37E4:  MOVWF  xC1
37E6:  MOVLW  04
37E8:  MOVWF  xC2
37EA:  CALL   07FA
....................          printf(lcd_putc,"UV:ON "); 
37EE:  MOVLW  C2
37F0:  MOVWF  FF6
37F2:  MOVLW  06
37F4:  MOVWF  FF7
37F6:  CALL   08BA
....................       } 
....................       else 
37FA:  BRA    3814
....................       {          
....................          lcd_gotoxy(13,4); 
37FC:  MOVLW  0D
37FE:  MOVWF  xC1
3800:  MOVLW  04
3802:  MOVWF  xC2
3804:  CALL   07FA
....................          printf(lcd_putc,"UV:OFF"); 
3808:  MOVLW  CA
380A:  MOVWF  FF6
380C:  MOVLW  06
380E:  MOVWF  FF7
3810:  CALL   08BA
....................       } 
....................        
....................       if(estadofl==1) 
3814:  BTFSS  16.1
3816:  BRA    3832
....................       { 
....................          lcd_gotoxy(1,3); 
3818:  MOVLW  01
381A:  MOVWF  xC1
381C:  MOVLW  03
381E:  MOVWF  xC2
3820:  CALL   07FA
....................          printf(lcd_putc,"Luz:ON "); 
3824:  MOVLW  D2
3826:  MOVWF  FF6
3828:  MOVLW  06
382A:  MOVWF  FF7
382C:  CALL   08BA
....................       } 
....................       else 
3830:  BRA    384A
....................       { 
....................          lcd_gotoxy(1,3); 
3832:  MOVLW  01
3834:  MOVWF  xC1
3836:  MOVLW  03
3838:  MOVWF  xC2
383A:  CALL   07FA
....................          printf(lcd_putc,"Luz:OFF"); 
383E:  MOVLW  DA
3840:  MOVWF  FF6
3842:  MOVLW  06
3844:  MOVWF  FF7
3846:  CALL   08BA
....................       }  
....................       Cambio=OFF; 
384A:  BCF    17.5
....................    //} 
....................     
....................    if(estadomv==1){  
384C:  BTFSS  16.2
384E:  BRA    3872
....................       velocidades(1); 
3850:  MOVLW  01
3852:  MOVWF  xAF
3854:  CALL   1DDE
....................       if(flagmv==0){ 
3858:  BTFSC  17.6
385A:  BRA    3870
....................          lcd_init();delay_ms(200);lcd_init();flagmv=1;Cambio=ON; 
385C:  CALL   0774
3860:  MOVLW  C8
3862:  MOVWF  xC6
3864:  CALL   06E2
3868:  CALL   0774
386C:  BSF    17.6
386E:  BSF    17.5
....................       } 
....................    }else{ 
3870:  BRA    3890
....................       velocidades(0);     
3872:  CLRF   xAF
3874:  CALL   1DDE
....................       if(flagmv==1){ 
3878:  BTFSS  17.6
387A:  BRA    3890
....................          lcd_init();delay_ms(200);lcd_init();flagmv=0;Cambio=ON; 
387C:  CALL   0774
3880:  MOVLW  C8
3882:  MOVWF  xC6
3884:  CALL   06E2
3888:  CALL   0774
388C:  BCF    17.6
388E:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(estadouv==1 && !VIDRIO){ 
3890:  BTFSS  16.0
3892:  BRA    38CC
3894:  BSF    F92.2
3896:  BTFSC  F80.2
3898:  BRA    38CC
....................       estadomv=0; 
389A:  BCF    16.2
....................       velocidades(0); 
389C:  CLRF   xAF
389E:  CALL   1DDE
....................       estadofl=0; 
38A2:  BCF    16.1
....................       Luz_Blanca_off; 
38A4:  BCF    F8C.2
38A6:  BCF    F95.2
....................       Luz_UV_on; 
38A8:  BSF    F8C.1
38AA:  BCF    F95.1
....................       tiempo_cumplido=0; 
38AC:  BCF    16.7
....................       if(flaguv==0){ 
38AE:  BTFSC  17.1
38B0:  BRA    38CA
....................          lcd_init();delay_ms(200);lcd_init();flaguv=1;guardaruv=1;Cambio=ON; 
38B2:  CALL   0774
38B6:  MOVLW  C8
38B8:  MOVWF  xC6
38BA:  CALL   06E2
38BE:  CALL   0774
38C2:  BSF    17.1
38C4:  MOVLW  01
38C6:  MOVWF  30
38C8:  BSF    17.5
....................       } 
....................    }else{ 
38CA:  BRA    38EE
....................       estadouv=0; 
38CC:  BCF    16.0
....................       Luz_UV_off; 
38CE:  BCF    F8C.1
38D0:  BCF    F95.1
....................       if(flaguv==1){ 
38D2:  BTFSS  17.1
38D4:  BRA    38EE
....................          lcd_init();delay_ms(200);lcd_init();flaguv=0;guardaruv=1;Cambio=ON; 
38D6:  CALL   0774
38DA:  MOVLW  C8
38DC:  MOVWF  xC6
38DE:  CALL   06E2
38E2:  CALL   0774
38E6:  BCF    17.1
38E8:  MOVLW  01
38EA:  MOVWF  30
38EC:  BSF    17.5
....................       } 
....................    } 
....................        
....................    if(estadofl==1) 
38EE:  BTFSS  16.1
38F0:  BRA    3910
....................    { 
....................       Luz_Blanca_on; 
38F2:  BSF    F8C.2
38F4:  BCF    F95.2
....................       if(flagfl==0) 
38F6:  BTFSC  17.2
38F8:  BRA    390E
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=1;Cambio=ON; 
38FA:  CALL   0774
38FE:  MOVLW  C8
3900:  MOVWF  xC6
3902:  CALL   06E2
3906:  CALL   0774
390A:  BSF    17.2
390C:  BSF    17.5
....................       } 
....................    } 
....................    else 
390E:  BRA    392C
....................    { 
....................       Luz_Blanca_off; 
3910:  BCF    F8C.2
3912:  BCF    F95.2
....................       if(flagfl==1) 
3914:  BTFSS  17.2
3916:  BRA    392C
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=0;Cambio=ON; 
3918:  CALL   0774
391C:  MOVLW  C8
391E:  MOVWF  xC6
3920:  CALL   06E2
3924:  CALL   0774
3928:  BCF    17.2
392A:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN)//Si oprime hacia arriba 
392C:  BSF    F96.0
392E:  BTFSS  F84.0
3930:  BRA    395C
....................    { 
....................       delay_ms(20); 
3932:  MOVLW  14
3934:  MOVWF  xC6
3936:  CALL   06E2
....................       if(DOWN){ 
393A:  BSF    F96.0
393C:  BTFSS  F84.0
393E:  BRA    395A
....................          if(Flanco == 0) 
3940:  BTFSC  16.3
3942:  BRA    395A
....................          { 
....................             estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
3944:  BTG    16.1
3946:  BSF    16.3
3948:  MOVLW  02
394A:  MOVWF  xAF
394C:  MOVLW  96
394E:  MOVWF  xC6
3950:  CALL   06E2
3954:  DECFSZ xAF,F
3956:  BRA    394C
3958:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
395A:  BRA    395E
....................    { 
....................       Flanco = 0; 
395C:  BCF    16.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
395E:  BSF    F96.1
3960:  BTFSS  F84.1
3962:  BRA    398E
....................    { 
....................       delay_ms(20); 
3964:  MOVLW  14
3966:  MOVWF  xC6
3968:  CALL   06E2
....................       if(RIGHT){ 
396C:  BSF    F96.1
396E:  BTFSS  F84.1
3970:  BRA    398C
....................          if(Flanco1 == 0) 
3972:  BTFSC  16.4
3974:  BRA    398C
....................          { 
....................             estadomv=!estadomv;Flanco1 = 1;delay_ms(300);Cambio=ON; 
3976:  BTG    16.2
3978:  BSF    16.4
397A:  MOVLW  02
397C:  MOVWF  xAF
397E:  MOVLW  96
3980:  MOVWF  xC6
3982:  CALL   06E2
3986:  DECFSZ xAF,F
3988:  BRA    397E
398A:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
398C:  BRA    3990
....................    { 
....................       Flanco1 = 0; 
398E:  BCF    16.4
....................    } 
....................     
....................    if(IZQU)//Si oprime hacia izquierda 
3990:  BSF    F96.2
3992:  BTFSS  F84.2
3994:  BRA    39B0
....................    { 
....................       delay_ms(20); 
3996:  MOVLW  14
3998:  MOVWF  xC6
399A:  CALL   06E2
....................       if(IZQU){ 
399E:  BSF    F96.2
39A0:  BTFSS  F84.2
39A2:  BRA    39B0
....................          delay_ms(150);  
39A4:  MOVLW  96
39A6:  MOVWF  xC6
39A8:  CALL   06E2
....................          estadouv=!estadouv; 
39AC:  BTG    16.0
....................          Cambio=ON; 
39AE:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
39B0:  BSF    F92.5
39B2:  BTFSS  F80.5
39B4:  BRA    39F2
....................    { 
....................       delay_ms(20); 
39B6:  MOVLW  14
39B8:  MOVWF  xC6
39BA:  CALL   06E2
....................       if(UP){ 
39BE:  BSF    F92.5
39C0:  BTFSS  F80.5
39C2:  BRA    39F2
....................          delay_ms(200); 
39C4:  MOVLW  C8
39C6:  MOVWF  xC6
39C8:  CALL   06E2
....................          printf(lcd_putc,"\f"); 
39CC:  MOVLW  0C
39CE:  MOVWF  xC0
39D0:  CALL   085C
....................          delay_ms(300); 
39D4:  MOVLW  02
39D6:  MOVWF  xAF
39D8:  MOVLW  96
39DA:  MOVWF  xC6
39DC:  CALL   06E2
39E0:  DECFSZ xAF,F
39E2:  BRA    39D8
....................          Menu=1;  
39E4:  MOVLW  01
39E6:  MOVWF  18
....................          paso=0; 
39E8:  CLRF   31
....................          Flecha=2; 
39EA:  MOVLW  02
39EC:  MOVWF  1C
....................          Flecha2=2; 
39EE:  MOVWF  1E
....................          Cambio=ON; 
39F0:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(guardaruv==1) 
39F2:  DECFSZ 30,W
39F4:  BRA    3AB8
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
39F6:  MOVLW  07
39F8:  MOVWF  FA9
39FA:  MOVFF  21,FA8
39FE:  BCF    FA6.6
3A00:  BCF    FA6.7
3A02:  BSF    FA6.2
3A04:  MOVF   FF2,W
3A06:  MOVWF  00
3A08:  BCF    FF2.7
3A0A:  MOVLB  F
3A0C:  MOVLW  55
3A0E:  MOVWF  FA7
3A10:  MOVLW  AA
3A12:  MOVWF  FA7
3A14:  BSF    FA6.1
3A16:  BTFSC  FA6.1
3A18:  BRA    3A16
3A1A:  BCF    FA6.2
3A1C:  MOVF   00,W
3A1E:  IORWF  FF2,F
3A20:  MOVLW  08
3A22:  MOVWF  FA9
3A24:  MOVFF  22,FA8
3A28:  BCF    FA6.6
3A2A:  BCF    FA6.7
3A2C:  BSF    FA6.2
3A2E:  MOVF   FF2,W
3A30:  MOVWF  00
3A32:  BCF    FF2.7
3A34:  MOVLW  55
3A36:  MOVWF  FA7
3A38:  MOVLW  AA
3A3A:  MOVWF  FA7
3A3C:  BSF    FA6.1
3A3E:  BTFSC  FA6.1
3A40:  BRA    3A3E
3A42:  BCF    FA6.2
3A44:  MOVF   00,W
3A46:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
3A48:  MOVFF  40,23
....................       horasH=make8(horas,1); 
3A4C:  MOVFF  41,24
....................       write_eeprom(9,horasL); 
3A50:  MOVLW  09
3A52:  MOVWF  FA9
3A54:  MOVFF  23,FA8
3A58:  BCF    FA6.6
3A5A:  BCF    FA6.7
3A5C:  BSF    FA6.2
3A5E:  MOVFF  FF2,00
3A62:  BCF    FF2.7
3A64:  MOVLW  55
3A66:  MOVWF  FA7
3A68:  MOVLW  AA
3A6A:  MOVWF  FA7
3A6C:  BSF    FA6.1
3A6E:  BTFSC  FA6.1
3A70:  BRA    3A6E
3A72:  BCF    FA6.2
3A74:  MOVF   00,W
3A76:  IORWF  FF2,F
....................       delay_ms(20); 
3A78:  MOVLW  14
3A7A:  MOVLB  0
3A7C:  MOVWF  xC6
3A7E:  CALL   06E2
....................       write_eeprom(10,horasH); 
3A82:  MOVLW  0A
3A84:  MOVWF  FA9
3A86:  MOVFF  24,FA8
3A8A:  BCF    FA6.6
3A8C:  BCF    FA6.7
3A8E:  BSF    FA6.2
3A90:  MOVF   FF2,W
3A92:  MOVWF  00
3A94:  BCF    FF2.7
3A96:  MOVLB  F
3A98:  MOVLW  55
3A9A:  MOVWF  FA7
3A9C:  MOVLW  AA
3A9E:  MOVWF  FA7
3AA0:  BSF    FA6.1
3AA2:  BTFSC  FA6.1
3AA4:  BRA    3AA2
3AA6:  BCF    FA6.2
3AA8:  MOVF   00,W
3AAA:  IORWF  FF2,F
....................       delay_ms(20); 
3AAC:  MOVLW  14
3AAE:  MOVLB  0
3AB0:  MOVWF  xC6
3AB2:  CALL   06E2
....................       guardaruv=0; 
3AB6:  CLRF   30
....................    } 
....................     
....................    if(segundos>=60) 
3AB8:  MOVF   21,W
3ABA:  SUBLW  3B
3ABC:  BC    3AC2
....................    { 
....................       segundos=0;minutos++; 
3ABE:  CLRF   21
3AC0:  INCF   22,F
....................    } 
....................    if(minutos==60) 
3AC2:  MOVF   22,W
3AC4:  SUBLW  3C
3AC6:  BNZ   3AD0
....................    { 
....................       minutos=0;horas++; 
3AC8:  CLRF   22
3ACA:  INCF   40,F
3ACC:  BTFSC  FD8.2
3ACE:  INCF   41,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
3AD0:  MOVF   2F,W
3AD2:  SUBLW  3B
3AD4:  BC    3AEA
....................    { 
....................       lcd_init();delay_ms(200);lcd_init(); 
3AD6:  CALL   0774
3ADA:  MOVLW  C8
3ADC:  MOVWF  xC6
3ADE:  CALL   06E2
3AE2:  CALL   0774
....................       tiemporeset=0; 
3AE6:  CLRF   2F
....................       Cambio=ON; 
3AE8:  BSF    17.5
....................    }    
....................    } 
3AEA:  GOTO   1F6E
.................... } 
....................  
3AEE:  SLEEP 

Configuration Fuses:
   Word  1: C220   XTPLL IESO FCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E3F   BROWNOUT NOWDT BORV20 NOPUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
